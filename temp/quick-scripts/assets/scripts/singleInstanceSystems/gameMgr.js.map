{"version":3,"sources":["gameMgr.js"],"names":["GameMgr","cc","Class","extends","Component","properties","start","enterLevelScene","givenLevel","self","director","preloadScene","err","res","levelMgr","scene","getChildByName","getComponent","level","animatedToScene","_enterLevelScene","levelForName","toString","length","levelName","sceneName","currentScene","getScene","tween","children","to","opacity","delay","call","loadScene","_generateLevelSceneConfig","levelConfig","require","result","completNum","check","Object","keys","networkMgr","messageObj","makeMessageObj","message","data","sendMessageByMsgObj","index","levelId","getSceneNameByLevelId","givenLevelId","setupResult","log","canvas","oneResult","getNodeBasicResult","node","x","y","width","height","angle","fillNodes","fillNodesResult","oneFillNode","oneFillNodeResult","push","walls","wallsResult","oneWallNode","oneWallResult","targets","targetsResult","oneTargetNode","oneTargetResult","pathWaysNode","pathWaysNodeResult","onePathWayNode","onePathWayResult","name","i","oneChildNode","oneChildResult","bullets","bulletsResult","oneBulletNode","oneBulletResult","basicResult","basic","bulletMgr","mgrResult","bulletType","pathWaysNodeName","mgr","gameMgr","module","exports"],"mappings":"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","file":"gameMgr.js","sourceRoot":"../../../../../assets/scripts/singleInstanceSystems","sourcesContent":["\n// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nvar GameMgr = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n    enterLevelScene(givenLevel) {\n        var self = this\n        cc.director.preloadScene(\"levelScene\",null,function(err,res){\n            var levelMgr = res.scene.getChildByName(\"Canvas\").getComponent(\"levelMgr\")\n            levelMgr.level = givenLevel\n            self.animatedToScene(\"levelScene\")\n        })\n    },\n\n    _enterLevelScene(givenLevel) {\n        var levelForName = givenLevel\n            switch(levelForName.toString().length){\n                case 1:\n                    levelForName = \"00\" + levelForName.toString()\n                    break\n                case 2:\n                    levelForName = \"0\" + levelForName.toString()\n                    break\n            }\n        var levelName = \"level\" + levelForName\n        var self = this\n        cc.director.preloadScene(levelName,null,function(err,res){\n            var levelMgr = res.scene.getChildByName(\"Canvas\").getComponent(\"levelMgr\")\n            levelMgr.level = givenLevel\n            // cc.director.loadScene(levelName)\n            self.animatedToScene(levelName)\n        })\n    },\n\n    animatedToScene(sceneName) {\n        var currentScene = cc.director.getScene()\n        cc.tween(currentScene.children[0])\n            .to(0.5,{opacity: 0})\n            .delay(1)\n            .call(function(){\n                cc.director.preloadScene(sceneName,null,function(err,res){\n                    var scene = res.scene\n                    scene.children[0].opacity = 0\n                    cc.director.loadScene(sceneName,function(){\n                        cc.tween(scene.children[0])\n                            .to(0.5,{opacity: 255})\n                            .start()\n                    })\n                })\n            })\n            .start()\n    },\n\n\n    \n    _generateLevelSceneConfig() {\n        var levelConfig = require(\"levelConfig\")\n        var result = {}\n        var completNum = 0\n        var check = function(completNum) {\n            if (completNum == Object.keys(levelConfig).length) {\n                var networkMgr = require(\"networkMgr\")\n                var messageObj = networkMgr.makeMessageObj(\"helperModule\",\"generateLevelConfigFileMessageType\")\n                messageObj.message.data = result\n                networkMgr.sendMessageByMsgObj(messageObj)\n            }\n        }\n        for (var index in Object.keys(levelConfig)) {\n            var levelId = Object.keys(levelConfig)[index]\n\n            var getSceneNameByLevelId = function(givenLevelId) {\n                var levelForName = givenLevelId\n                switch(levelForName.toString().length){\n                    case 1:\n                        levelForName = \"00\" + levelForName.toString()\n                        break\n                    case 2:\n                        levelForName = \"0\" + levelForName.toString()\n                        break\n                }\n\n                var levelName = \"level\" + levelForName\n                return levelName\n            }\n\n            var sceneName = getSceneNameByLevelId(levelId)\n            var setupResult = function(sceneName, levelId) {\n                cc.director.preloadScene(sceneName,null,function(err,res){\n                    cc.log(\"preload scene: \" + sceneName)\n                    var canvas = res.scene.children[0]\n                    var oneResult = {}\n                    var getNodeBasicResult = function(node) {\n                        var oneResult = {}\n                        oneResult.x = node.x\n                        oneResult.y = node.y\n                        oneResult.width = node.width\n                        oneResult.height = node.height\n                        oneResult.angle = node.angle\n                        return oneResult\n                    }\n                    //fillNodes\n                    var fillNodes = canvas.getChildByName(\"fillNodes\")\n                    var fillNodesResult = []\n                    cc.log(\"setup fillNodes\")\n                    for(var index in fillNodes.children) {\n                        var oneFillNode = fillNodes.children[index]\n                        var oneFillNodeResult = getNodeBasicResult(oneFillNode)   \n                        fillNodesResult.push(oneFillNodeResult)\n                    }\n                    oneResult.fillNodes = fillNodesResult\n\n                    //walls\n                    var walls = canvas.getChildByName(\"walls\")\n                    var wallsResult = []\n                    cc.log(\"setup walls\")\n                    for (var index in walls.children) {\n                        var oneWallNode = walls.children[index]\n                        var oneWallResult = getNodeBasicResult(oneWallNode)\n                        wallsResult.push(oneWallResult)\n                    }\n                    oneResult.walls = wallsResult\n\n                    //targets\n\n                    var targets = canvas.getChildByName(\"targets\")\n                    var targetsResult = []\n                    cc.log(\"setup targets\")\n                    for(var index in targets.children) {\n                        var oneTargetNode = targets.children[index]\n                        var oneTargetResult = getNodeBasicResult(oneTargetNode)\n                        targetsResult.push(oneTargetResult)\n                    }\n                    oneResult.targets = targetsResult\n\n                    //pathWaysNode\n                    var pathWaysNode = canvas.getChildByName(\"pathWaysNode\")\n                    var pathWaysNodeResult = []\n                    cc.log(\"setup pathWaysNode\")\n                    for (var index in pathWaysNode.children) {\n                        var onePathWayNode = pathWaysNode.children[index]\n                        var onePathWayResult = {}\n                        onePathWayResult.name = onePathWayNode.name\n                        onePathWayResult.children = []\n                        for (var i in onePathWayNode.children) {\n                            var oneChildNode = onePathWayNode.children[i]\n                            var oneChildResult = getNodeBasicResult(oneChildNode)\n                            onePathWayResult.children.push(oneChildResult)\n                        }\n                        pathWaysNodeResult.push(onePathWayResult)\n                    }\n                    oneResult.pathWaysNode = pathWaysNodeResult\n\n                    //bullets\n                    var bullets = canvas.getChildByName(\"bullets\")\n                    var bulletsResult = []\n                    cc.log(\"setup bullets\")\n                    for (var index in bullets.children) {\n                        var oneBulletNode = bullets.children[index]\n                        var oneBulletResult = {}\n                        var basicResult  = getNodeBasicResult(oneBulletNode)\n                        oneBulletResult.basic = basicResult\n\n                        var bulletMgr = oneBulletNode.getComponent(\"bulletMgr\")\n                        var mgrResult = {}\n                        mgrResult.bulletType = bulletMgr.bulletType\n                        mgrResult.pathWaysNodeName = \"\"\n                        if (bulletMgr.pathWaysNode != null) {\n                            mgrResult.pathWaysNodeName = bulletMgr.pathWaysNode.name\n                        }\n                        oneBulletResult.mgr = mgrResult\n                        bulletsResult.push(oneBulletResult)\n                    }\n                    oneResult.bullets = bulletsResult\n\n                    result[levelId.toString()] = oneResult\n                    completNum += 1\n                    check(completNum)\n                })\n            }\n            setupResult(sceneName,levelId)\n        }\n    }\n    // update (dt) {},\n});\n\nvar gameMgr = new GameMgr()\nmodule.exports = gameMgr"]}