{"version":3,"sources":["gameMgr.js"],"names":["GameMgr","cc","Class","extends","Component","properties","start","enterLevelScene","givenLevel","self","director","preloadScene","err","res","levelMgr","scene","getChildByName","getComponent","level","animatedToScene","sceneName","coverNode","require","reses","instantiate","width","winSize","height","opacity","on","getScene","addChild","tween","to","delay","call","loadScene","_generateLevelSceneConfig","levelConfig","result","completNum","check","Object","keys","length","networkMgr","messageObj","makeMessageObj","message","data","sendMessageByMsgObj","index","levelId","getSceneNameByLevelId","givenLevelId","levelForName","toString","levelName","setupResult","log","canvas","children","oneResult","getNodeBasicResult","node","x","y","angle","fillNodes","fillNodesResult","oneFillNode","oneFillNodeResult","push","walls","wallsResult","oneWallNode","oneWallResult","targets","targetsResult","oneTargetNode","oneTargetResult","pathWaysNode","pathWaysNodeResult","onePathWayNode","onePathWayResult","name","i","oneChildNode","oneChildResult","bullets","bulletsResult","oneBulletNode","oneBulletResult","basicResult","basic","bulletMgr","mgrResult","bulletType","pathWaysNodeName","mgr","gameMgr","module","exports"],"mappings":"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","file":"gameMgr.js","sourceRoot":"../../../../../assets/scripts/singleInstanceSystems","sourcesContent":["\n// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nvar GameMgr = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n    enterLevelScene(givenLevel) {\n        var self = this\n        cc.director.preloadScene(\"levelScene\",null,function(err,res){\n            var levelMgr = res.scene.getChildByName(\"Canvas\").getComponent(\"levelMgr\")\n            levelMgr.level = givenLevel\n            self.animatedToScene(\"levelScene\")\n        })\n    },\n\n    animatedToScene(sceneName) {\n        var coverNode = require(\"resMgr\").reses[\"coverNodePrefab\"]\n        coverNode = cc.instantiate(coverNode)\n        coverNode.width = cc.winSize.width\n        coverNode.height = cc.winSize.height\n        coverNode.opacity = 0\n        coverNode.on(\"touchstart\",function(){})\n        cc.director.getScene().getChildByName(\"Canvas\").addChild(coverNode)\n\n        cc.tween(coverNode)\n            .to(0.3, {opacity:255})\n            .delay(0.3)\n            .call(function(){\n                cc.director.loadScene(sceneName)\n            })\n            .start()\n    },\n\n    \n    _generateLevelSceneConfig() {\n        var levelConfig = require(\"levelConfig\")\n        var result = {}\n        var completNum = 0\n        var check = function(completNum) {\n            if (completNum == Object.keys(levelConfig).length) {\n                var networkMgr = require(\"networkMgr\")\n                var messageObj = networkMgr.makeMessageObj(\"helperModule\",\"generateLevelConfigFileMessageType\")\n                messageObj.message.data = result\n                networkMgr.sendMessageByMsgObj(messageObj)\n            }\n        }\n        for (var index in Object.keys(levelConfig)) {\n            var levelId = Object.keys(levelConfig)[index]\n\n            var getSceneNameByLevelId = function(givenLevelId) {\n                var levelForName = givenLevelId\n                switch(levelForName.toString().length){\n                    case 1:\n                        levelForName = \"00\" + levelForName.toString()\n                        break\n                    case 2:\n                        levelForName = \"0\" + levelForName.toString()\n                        break\n                }\n\n                var levelName = \"level\" + levelForName\n                return levelName\n            }\n\n            var sceneName = getSceneNameByLevelId(levelId)\n            var setupResult = function(sceneName, levelId) {\n                cc.director.preloadScene(sceneName,null,function(err,res){\n                    cc.log(\"preload scene: \" + sceneName)\n                    var canvas = res.scene.children[0]\n                    var oneResult = {}\n                    var getNodeBasicResult = function(node) {\n                        var oneResult = {}\n                        oneResult.x = node.x\n                        oneResult.y = node.y\n                        oneResult.width = node.width\n                        oneResult.height = node.height\n                        oneResult.angle = node.angle\n                        return oneResult\n                    }\n                    //fillNodes\n                    var fillNodes = canvas.getChildByName(\"fillNodes\")\n                    var fillNodesResult = []\n                    cc.log(\"setup fillNodes\")\n                    for(var index in fillNodes.children) {\n                        var oneFillNode = fillNodes.children[index]\n                        var oneFillNodeResult = getNodeBasicResult(oneFillNode)   \n                        fillNodesResult.push(oneFillNodeResult)\n                    }\n                    oneResult.fillNodes = fillNodesResult\n\n                    //walls\n                    var walls = canvas.getChildByName(\"walls\")\n                    var wallsResult = []\n                    cc.log(\"setup walls\")\n                    for (var index in walls.children) {\n                        var oneWallNode = walls.children[index]\n                        var oneWallResult = getNodeBasicResult(oneWallNode)\n                        wallsResult.push(oneWallResult)\n                    }\n                    oneResult.walls = wallsResult\n\n                    //targets\n\n                    var targets = canvas.getChildByName(\"targets\")\n                    var targetsResult = []\n                    cc.log(\"setup targets\")\n                    for(var index in targets.children) {\n                        var oneTargetNode = targets.children[index]\n                        var oneTargetResult = getNodeBasicResult(oneTargetNode)\n                        targetsResult.push(oneTargetResult)\n                    }\n                    oneResult.targets = targetsResult\n\n                    //pathWaysNode\n                    var pathWaysNode = canvas.getChildByName(\"pathWaysNode\")\n                    var pathWaysNodeResult = []\n                    cc.log(\"setup pathWaysNode\")\n                    for (var index in pathWaysNode.children) {\n                        var onePathWayNode = pathWaysNode.children[index]\n                        var onePathWayResult = {}\n                        onePathWayResult.name = onePathWayNode.name\n                        onePathWayResult.children = []\n                        for (var i in onePathWayNode.children) {\n                            var oneChildNode = onePathWayNode.children[i]\n                            var oneChildResult = getNodeBasicResult(oneChildNode)\n                            onePathWayResult.children.push(oneChildResult)\n                        }\n                        pathWaysNodeResult.push(onePathWayResult)\n                    }\n                    oneResult.pathWaysNode = pathWaysNodeResult\n\n                    //bullets\n                    var bullets = canvas.getChildByName(\"bullets\")\n                    var bulletsResult = []\n                    cc.log(\"setup bullets\")\n                    for (var index in bullets.children) {\n                        var oneBulletNode = bullets.children[index]\n                        var oneBulletResult = {}\n                        var basicResult  = getNodeBasicResult(oneBulletNode)\n                        oneBulletResult.basic = basicResult\n\n                        var bulletMgr = oneBulletNode.getComponent(\"bulletMgr\")\n                        var mgrResult = {}\n                        mgrResult.bulletType = bulletMgr.bulletType\n                        mgrResult.pathWaysNodeName = \"\"\n                        if (bulletMgr.pathWaysNode != null) {\n                            mgrResult.pathWaysNodeName = bulletMgr.pathWaysNode.name\n                        }\n                        oneBulletResult.mgr = mgrResult\n                        bulletsResult.push(oneBulletResult)\n                    }\n                    oneResult.bullets = bulletsResult\n\n                    result[levelId.toString()] = oneResult\n                    completNum += 1\n                    check(completNum)\n                })\n            }\n            setupResult(sceneName,levelId)\n        }\n    }\n    // update (dt) {},\n});\n\nvar gameMgr = new GameMgr()\nmodule.exports = gameMgr"]}