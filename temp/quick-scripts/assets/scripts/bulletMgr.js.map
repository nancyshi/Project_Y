{"version":3,"sources":["bulletMgr.js"],"names":["cc","Class","extends","Component","properties","bulletType","status","disFromBorder","moveSpeed","movingDirection","targetPosition","levelMgr","helper","_rayTestLength","pathWaysNode","Node","pathWaysHeight","sliderFrame","SpriteFrame","onLoad","find","getComponent","Helper","require","start","node","Sprite","spriteFrame","move","direction","checkWhetherCanMove","update","dt","moveUpdate","normalizeSelf","vx","x","vy","y","tempX","tempY","v2","mag","getNearestWallInfo","givenDirection","result","ray","makeRay","walls","disToSelfBounder","selfBounderLindes","getLinesOfOneNode","key","line","dis","rayTest","index","wallNode","bounderLines","targetDis","suitablePosition","getSuitablePoint","children","length","position","selectedPathNode","onePath","isTwoNodeCross","getMaxDisFromPathNode","currentDis","lines","givenNode","ray1","ray2","self","getDis","dis1","dis2"],"mappings":"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","file":"bulletMgr.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n\n        bulletType: 1, //1 is normal , 2 is slider bullet\n        status: 0, //0 is static, 1 is moving , 2 is reached target\n        disFromBorder: 10,\n        moveSpeed: 500,\n        movingDirection: null,\n        targetPosition: null,\n\n        levelMgr: null,\n        helper: null,\n\n        _rayTestLength: 3000,\n        pathWaysNode: cc.Node,\n        pathWaysHeight: 10,\n        sliderFrame: cc.SpriteFrame\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.levelMgr = cc.find(\"Canvas\").getComponent(\"levelMgr\")\n        var Helper = require(\"helper\")\n        this.helper = new Helper()\n    },\n\n    start () {\n        if (this.bulletType == 2) {\n            this.node.getComponent(cc.Sprite).spriteFrame = this.sliderFrame\n        }\n    },\n    move(direction) {\n\n    },\n    checkWhetherCanMove(direction) {\n\n    },\n    update (dt) {\n        this.moveUpdate(dt)\n    },\n\n    moveUpdate(dt) {\n        if (this.status != 1) {\n            return\n        }\n\n        this.movingDirection.normalizeSelf()\n        var vx = this.moveSpeed * this.movingDirection.x\n        var vy = this.moveSpeed * this.movingDirection.y\n\n        var tempX = this.node.x + vx * dt\n        var tempY = this.node.y + vy * dt\n        if (cc.v2(tempX - this.node.x, tempY - this.node.y).mag() >= cc.v2(this.targetPosition.x - this.node.x, this.targetPosition.y - this.node.y).mag()) {\n            tempX = this.targetPosition.x\n            tempY = this.targetPosition.y\n\n            this.node.x = tempX\n            this.node.y = tempY\n            this.status = 0\n            return\n        }\n\n        this.node.x = tempX\n        this.node.y = tempY\n    },\n    getNearestWallInfo(givenDirection) {\n        if (this.bulletType == 1) {\n            //normal bullet\n            var result = null\n            var ray = this.helper.makeRay(cc.v2(this.node.x,this.node.y),this._rayTestLength,givenDirection)\n            var walls = this.levelMgr.walls\n            var disToSelfBounder = null\n            var selfBounderLindes = this.helper.getLinesOfOneNode(this.node)\n            for (var key in selfBounderLindes) {\n                var line = selfBounderLindes[key]\n                var dis = this.helper.rayTest(ray,line)\n                if (dis != false) {\n                    disToSelfBounder = dis\n                    break\n                }\n            }\n            for(var index in walls) {\n                var wallNode = walls[index]\n                var bounderLines = this.helper.getLinesOfOneNode(wallNode)\n                for (var key in bounderLines) {\n                    var line = bounderLines[key]\n                    var dis = this.helper.rayTest(ray,line)\n                    if (dis == false) {\n                        continue\n                    }\n                    if (result == null || dis < result.dis) {\n                        var targetDis = this.disFromBorder + disToSelfBounder\n                        var suitablePosition = this.helper.getSuitablePoint(cc.v2(this.node.x,this.node.y),dis,targetDis,givenDirection)\n                        result = {\n                            dis: dis,\n                            suitablePosition: suitablePosition\n                        }\n                    }\n                }\n            }\n            return result \n        }\n        \n        if (this.bulletType == 2) {\n            if (this.pathWaysNode == null || this.pathWaysNode.children.length == 0) {\n                return {\n                    dis: 0,\n                    suitablePosition: this.node.position\n                }\n            }\n            var selectedPathNode = null\n            for (var index in this.pathWaysNode.children) {\n                var onePath = this.pathWaysNode.children[index]\n                if (this.helper.isTwoNodeCross(this.node,onePath) == false) {\n                    continue\n                }\n\n                if (selectedPathNode == null || this.getMaxDisFromPathNode(onePath,givenDirection) > this.getMaxDisFromPathNode(selectedPathNode,givenDirection)) {\n                    selectedPathNode = onePath\n                }\n            }\n            var ray = this.helper.makeRay(this.node.position,3000,givenDirection)\n            var currentDis = null\n            var lines = this.helper.getLinesOfOneNode(selectedPathNode)\n            for (var key in lines) {\n                var line = lines[key]\n                var dis = this.helper.rayTest(ray,line)\n                if (dis != false) {\n                    currentDis = dis\n                    break\n                }\n            }\n\n            var suitablePosition = this.helper.getSuitablePoint(this.node.position,currentDis,this.pathWaysHeight/2,givenDirection)\n            var dis = cc.v2(suitablePosition.x - this.node.x, suitablePosition.y - this.node.y).mag()\n            return {\n                suitablePosition: suitablePosition,\n                dis: dis\n            }\n        }\n    },\n\n    getMaxDisFromPathNode(givenNode,direction) {\n        var ray1 = this.helper.makeRay(this.node.position,3000,direction)\n        var ray2 = this.helper.makeRay(this.node.position,3000,cc.v2(-direction.x, -direction.y))\n\n        var lines = this.helper.getLinesOfOneNode(givenNode)\n        var self = this\n        var getDis = function(ray) {\n            for (var key in lines) {\n                var line = lines[key]\n                var dis = self.helper.rayTest(ray,line)\n                if (dis != false) {\n                    return dis\n                }\n            }\n        }\n\n        var dis1 = getDis(ray1)\n        var dis2 = getDis(ray2)\n\n        if (dis1 >= dis2) {\n            return dis1\n        }\n        else {\n            return dis2\n        }\n    }\n \n});\n"]}