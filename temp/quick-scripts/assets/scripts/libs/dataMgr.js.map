{"version":3,"sources":["dataMgr.js"],"names":["dataMgr","cc","Class","extends","Component","properties","playerData","get","_playerData","set","value","onPlayerDataUpdated","delegate","updatePlayerDataFromServer","playerId","networkMgr","require","msgObj","makeMessageObj","message","self","successCallBack","xhr","response","responseText","JSON","parse","type","sendMessageByMsgObj","log","stringify","timerSystemsMgr","initSetup","lunch","commitPlayerDataToServer","dataForCommit","id","commitBody","shareDataMgr","module","exports"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,UAAUC,GAAGC,KAAH,CAAS;;AAEnBC,aAASF,GAAGG,SAFO;AAGnBC,gBAAY;;AAERC,oBAAY;AACRC,eADQ,iBACF;AACF,uBAAO,KAAKC,WAAZ;AACH,aAHO;AAIRC,eAJQ,eAIJC,KAJI,EAIG;AACP,qBAAKF,WAAL,GAAmBE,KAAnB;AACA,qBAAKC,mBAAL;AACA,oBAAI,KAAKC,QAAL,IAAiB,IAArB,EAA2B;AACvB,yBAAKA,QAAL,CAAcD,mBAAd;AACH;AACD;AACH;AAXO,SAFJ;;AAgBRC,kBAAU;;AAhBF,KAHO;;AAuBnBC,8BAvBmB,sCAuBQC,QAvBR,EAuBkB;;AAEjC,YAAIC,aAAaC,QAAQ,YAAR,CAAjB;AACA,YAAIC,SAASF,WAAWG,cAAX,CAA0B,YAA1B,EAAuC,kBAAvC,CAAb;AACAD,eAAOE,OAAP,CAAeL,QAAf,GAA0BA,QAA1B;AACA,YAAIM,OAAO,IAAX;AACAH,eAAOI,eAAP,GAAyB,UAASC,GAAT,EAAc;AACnC,gBAAIC,WAAWD,IAAIE,YAAnB;AACAD,uBAAWE,KAAKC,KAAL,CAAWH,QAAX,CAAX;AACA,gBAAIA,SAASI,IAAT,IAAiB,SAArB,EAAgC;AAC5BP,qBAAKd,UAAL,GAAkBiB,SAASjB,UAA3B;AACH,aAFD,MAGK;AACD;AACH;AACJ,SATD;AAUAS,mBAAWa,mBAAX,CAA+BX,MAA/B;AACH,KAxCkB;AAyCnBN,uBAzCmB,iCAyCI;AACnBV,WAAG4B,GAAH,CAAO,wBAAwBJ,KAAKK,SAAL,CAAe,KAAKxB,UAApB,CAA/B;AACA,YAAIyB,kBAAkBf,QAAQ,iBAAR,CAAtB;AACAe,wBAAgBC,SAAhB;AACAD,wBAAgBE,KAAhB;AACH,KA9CkB;AAgDnBC,4BAhDmB,oCAgDMC,aAhDN,EAgDqBd,eAhDrB,EAgDsC;AACrD,YAAIN,aAAaC,QAAQ,YAAR,CAAjB;AACA,YAAIC,SAASF,WAAWG,cAAX,CAA0B,YAA1B,EAAuC,kBAAvC,CAAb;AACAD,eAAOE,OAAP,CAAeL,QAAf,GAA0B,KAAKR,UAAL,CAAgB8B,EAA1C;AACA,YAAInB,OAAOE,OAAP,CAAeL,QAAf,IAA2B,IAA/B,EAAqC;AACjCb,eAAG4B,GAAH,CAAO,gBAAP;AACA;AACH;;AAGDZ,eAAOE,OAAP,CAAekB,UAAf,GAA4BF,aAA5B;AACAlB,eAAOI,eAAP,GAAyB,UAASC,GAAT,EAAc;AACnC,gBAAIC,WAAWD,IAAIE,YAAnB;AACAD,uBAAWE,KAAKC,KAAL,CAAWH,QAAX,CAAX;AACA,gBAAIA,SAASI,IAAT,IAAiB,eAArB,EAAsC;AAClCN;AACH;AACJ,SAND;AAOAN,mBAAWa,mBAAX,CAA+BX,MAA/B;AACH;AAnEkB,CAAT,CAAd;;AAsEA,IAAIqB,eAAe,IAAItC,OAAJ,EAAnB;AACAuC,OAAOC,OAAP,GAAiBF,YAAjB","file":"dataMgr.js","sourceRoot":"../../../../../assets/scripts/libs","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nvar dataMgr = cc.Class({\n    \n    extends: cc.Component,\n    properties: {\n\n        playerData: {\n            get() {\n                return this._playerData\n            },\n            set(value) {\n                this._playerData = value\n                this.onPlayerDataUpdated()\n                if (this.delegate != null) {\n                    this.delegate.onPlayerDataUpdated()\n                }\n                //do something else\n            }\n        },\n        \n        delegate: null\n        \n    },\n\n    updatePlayerDataFromServer(playerId) {\n\n        var networkMgr = require(\"networkMgr\")\n        var msgObj = networkMgr.makeMessageObj(\"dataModule\",\"queryMessageType\")\n        msgObj.message.playerId = playerId\n        var self = this\n        msgObj.successCallBack = function(xhr) {\n            var response = xhr.responseText\n            response = JSON.parse(response)  \n            if (response.type == \"success\") {\n                self.playerData = response.playerData\n            }\n            else {\n                //do something for erros\n            }\n        }\n        networkMgr.sendMessageByMsgObj(msgObj)\n    },\n    onPlayerDataUpdated () {\n        cc.log(\"now player data is \" + JSON.stringify(this.playerData))\n        var timerSystemsMgr = require(\"timerSystemsMgr\")\n        timerSystemsMgr.initSetup()\n        timerSystemsMgr.lunch()\n    },\n\n    commitPlayerDataToServer(dataForCommit, successCallBack) {\n        var networkMgr = require(\"networkMgr\")\n        var msgObj = networkMgr.makeMessageObj(\"dataModule\",\"commitMessageTyp\")\n        msgObj.message.playerId = this.playerData.id\n        if (msgObj.message.playerId == null) {\n            cc.log(\"no player data\")\n            return\n        }\n        \n\n        msgObj.message.commitBody = dataForCommit\n        msgObj.successCallBack = function(xhr) {\n            var response = xhr.responseText\n            response = JSON.parse(response)\n            if (response.type == \"commitSuccess\") {\n                successCallBack()\n            }\n        }\n        networkMgr.sendMessageByMsgObj(msgObj)\n    }\n});\n\nvar shareDataMgr = new dataMgr()\nmodule.exports = shareDataMgr\n"]}