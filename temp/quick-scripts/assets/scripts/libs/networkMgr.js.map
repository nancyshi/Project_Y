{"version":3,"sources":["networkMgr.js"],"names":["Networkmgr","cc","Class","extends","Component","properties","delegate","retryDelta","retryTime","retryingFlag","currentRetryTime","retryResult","get","_retryResult","set","value","retryWaitingNode","destroy","start","sendMessage","msg","port","ip","suffix","successCallBack","xhr","XMLHttpRequest","onreadystatechange","readyState","status","url","toString","open","send","makeMessageObj","moduleName","messageTypeName","gloableConfig","require","netWorkMessageConfigs","moduleObj","basicIp","basicPort","message","obj","error","sendMessageByMsgObj","msgObj","self","msgForSend","JSON","stringify","onerror","loader","loadRes","err","res","instantiate","name","bg","getChildByName","winsize","director","getWinSize","width","height","on","node","addChild","scheduleOnce","onAllRetryFailed","sharedMgr","module","exports"],"mappings":"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","file":"networkMgr.js","sourceRoot":"../../../../../assets/scripts/libs","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nvar Networkmgr = cc.Class({\n    extends: cc.Component,\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n        delegate: null,\n\n        retryDelta: 0.5,\n        retryTime: 3,\n        retryingFlag: false,\n        currentRetryTime: 3,\n\n        retryResult: {\n            get() {\n                return this._retryResult\n            },\n            set(value) {\n                this._retryResult = value\n                if (value == true) {\n                    if (this.retryWaitingNode != null) {\n                        this.retryWaitingNode.destroy()\n                    }\n                }\n            }\n        },\n\n        retryWaitingNode: null\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    // update (dt) {},\n\n    sendMessage(msg,port,ip,suffix,successCallBack) {\n        var xhr = new XMLHttpRequest()\n        xhr.onreadystatechange = function() {\n            if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\n                successCallBack(xhr)\n            }\n        }\n        var url = \"http://\" + ip + \":\" + port.toString() +\"/\" + suffix.toString()\n        xhr.open(\"POST\",url)\n        xhr.send(msg)\n    },\n\n    makeMessageObj(moduleName, messageTypeName) {\n        var gloableConfig = require(\"gloableConfig\")\n        \n        var netWorkMessageConfigs = gloableConfig.netWorkMessageConfigs\n        var moduleObj = netWorkMessageConfigs[moduleName]\n        \n        if (moduleObj != null) {\n            var ip = gloableConfig.basicIp\n            var port = gloableConfig.basicPort\n            if (moduleObj.ip != null) {\n                ip = moduleObj.ip\n            }\n            if (moduleObj.port != null) {\n                port = moduleObj.port\n            }\n\n            var suffix = moduleObj.suffix\n            \n            var message = moduleObj[messageTypeName]\n            var successCallBack = function(xhr){}\n            var obj = {\n                ip: ip,\n                port: port,\n                suffix: suffix,\n                message: message,\n                successCallBack: successCallBack\n            }\n            return obj\n        }\n        else {\n            cc.error(\"no such module name of \" + moduleName)\n            return null\n        }\n    },\n\n    sendMessageByMsgObj(msgObj) {\n        var url = \"http://\" + msgObj.ip + \":\" + msgObj.port.toString() + \"/\" + msgObj.suffix\n        var xhr = new XMLHttpRequest()\n        var self = this\n        xhr.onreadystatechange = function() {\n\n            if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\n                msgObj.successCallBack(xhr)\n                if (self.retryingFlag == true) {\n                    self.retryResult = true\n                }\n            }\n        }\n        var msgForSend = JSON.stringify(msgObj.message)\n        xhr.onerror = function() {\n            if (self.retryingFlag == false) {\n                cc.loader.loadRes(\"prefabs/retryWaitingNode\",function(err,res){\n                    if (self.delegate != null) {\n                        var retryWaitingNode = cc.instantiate(res)\n                        retryWaitingNode.name = \"retryWaitingNode\"\n                        var bg = retryWaitingNode.getChildByName(\"bg\")\n                        var winsize = cc.director.getWinSize()\n                        bg.width = winsize.width\n                        bg.height = winsize.height\n                        bg.on(\"touchstart\",function(){},this)\n                        self.retryWaitingNode = retryWaitingNode\n                        self.delegate.node.addChild(self.retryWaitingNode)\n                    }\n                    self.retryingFlag = true\n                    self.scheduleOnce(function(){\n                        self.currentRetryTime -= 1\n                        xhr.send(msgForSend)\n    \n                    },self.retryDelta)\n                })\n                \n            }\n            if (self.retryingFlag == true) {\n                self.currentRetryTime -= 1\n                xhr.send(msgForSend)\n                if (self.currentRetryTime == 0) {\n                    xhr.onerror = function() {\n                        xhr = null\n                        self.onAllRetryFailed()\n                        \n                    }\n                    self.retryingFlag = false\n                    self.currentRetryTime = self.retryTime\n                    self.retryResult = null\n                }\n            }\n        }\n        xhr.open(\"POST\",url)\n        xhr.send(msgForSend)\n    },\n\n    onAllRetryFailed() {\n        if (this.retryWaitingNode != null) {\n            this.retryWaitingNode.destroy()\n        }\n        if (this.delegate != null) {\n            this.delegate.onAllRetryFailed()\n        }\n    }\n});\n\n\nvar sharedMgr = new Networkmgr()\nmodule.exports = sharedMgr"]}