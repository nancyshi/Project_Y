
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/__qc_index__.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}
require('./assets/configs/addPropertySysConfig');
require('./assets/configs/levelConfig');
require('./assets/configs/levelSceneConfig');
require('./assets/configs/mailConfig');
require('./assets/configs/mailSysConfig');
require('./assets/configs/sectionConfig');
require('./assets/configs/signInSysConfig');
require('./assets/configs/storyConfig');
require('./assets/configs/textConfig');
require('./assets/migration/use_reversed_rotateTo');
require('./assets/scripts/_mainSceneMgr');
require('./assets/scripts/bulletMgr');
require('./assets/scripts/components/redPointMgr');
require('./assets/scripts/guildNodeMgr');
require('./assets/scripts/helper');
require('./assets/scripts/levelAreaNodeMgr');
require('./assets/scripts/levelMgr');
require('./assets/scripts/libs/dataMgr');
require('./assets/scripts/libs/gestureMgr');
require('./assets/scripts/libs/gloableConfig');
require('./assets/scripts/libs/loginMgr');
require('./assets/scripts/libs/networkMgr');
require('./assets/scripts/libs/resMgr');
require('./assets/scripts/libs/timerSystemsMgr');
require('./assets/scripts/loginSceneMgr');
require('./assets/scripts/mainScene/levelNodeMgr');
require('./assets/scripts/mainScene/mainSceneMgr');
require('./assets/scripts/mainScene/preChallengeUIMgr');
require('./assets/scripts/mainScene/selectSectionElementMgr');
require('./assets/scripts/mainScene/selectSectionUIMgr');
require('./assets/scripts/selectedEffectMgr');
require('./assets/scripts/singleInstanceSystems/advertisMgr');
require('./assets/scripts/singleInstanceSystems/gameMgr');
require('./assets/scripts/singleInstanceSystems/globalRedPointMgr');
require('./assets/scripts/singleInstanceSystems/notificationMgr');
require('./assets/scripts/systems/addPropertyNumSys/addPropertyNumSysMgr');
require('./assets/scripts/systems/ensureSys_notUse/ensureSystem');
require('./assets/scripts/systems/ensureSys_notUse/ensureSystemNodeMgr');
require('./assets/scripts/systems/mailSys/mailSysMailMgr');
require('./assets/scripts/systems/mailSys/mailSysMgr');
require('./assets/scripts/systems/signInSys/signInSysMgr');
require('./assets/scripts/systems/storySys/storySysMgr');
require('./assets/scripts/systems/systemsMgr');
require('./assets/scripts/systems/welfarySys/welfarySysMgr');
require('./assets/scripts/targetMgr');

                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/configs/textConfig.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '9c22epK3DJMhqp2fQro2fYy', 'textConfig');
// configs/textConfig.js

"use strict";

var textConfig = {
  languageType: 0,
  "text_101": {
    id: 101,
    zh: "测试",
    en: "test",
    comment: "测试专用"
  },
  "text_102": {
    id: 102,
    zh: "第一章",
    en: "Section 1",
    comment: "第一章标题"
  },
  "text_103": {
    id: 103,
    zh: "",
    en: "",
    comment: "第一章描述"
  },
  "text_104": {
    id: 104,
    zh: "第二章",
    en: "Section 2",
    comment: "第二章标题"
  },
  "text_105": {
    id: 105,
    zh: "",
    en: "",
    comment: "第二章描述"
  },
  "text_106": {
    id: 106,
    zh: "第三章",
    en: "Section 3",
    comment: "第三章标题"
  },
  "text_107": {
    id: 107,
    zh: "",
    en: "",
    comment: "第三章描述"
  },
  "text_108": {
    id: 108,
    zh: "第四章",
    en: "Section 4",
    comment: "第四章标题"
  },
  "text_109": {
    id: 109,
    zh: "",
    en: "",
    comment: "第四章描述"
  },
  "text_110": {
    id: 110,
    zh: "第五章",
    en: "Section 5",
    comment: "第五章标题"
  },
  "text_111": {
    id: 111,
    zh: "",
    en: "",
    comment: "第五章描述"
  },
  "text_112": {
    id: 112,
    zh: "观看视频广告，挑战关卡消耗体力永久减半！您是否愿意观看？",
    en: "the cost of physical powr for challenge levels will be permanent halving , by watching a video advertisment , would you want to watch?",
    comment: "福利系统显示文字"
  },
  "text_113": {
    id: 113,
    zh: "观看",
    en: "Watch",
    comment: "通用观看"
  },
  "text_114": {
    id: 114,
    zh: "取消",
    en: "Cancel",
    comment: "通用取消"
  },
  "text_115": {
    id: 115,
    zh: "每日签到可以获得 体力 * ",
    en: "Sign in can get physical power * ",
    comment: "签到系统01"
  },
  "text_116": {
    id: 116,
    zh: "， 金币 * ",
    en: ", gold * ",
    comment: "签到系统02"
  },
  "text_117": {
    id: 117,
    zh: "您是否愿意观看视频广告，获得双倍奖励？",
    en: "would you want to watch a video advertisment to get double rewards?",
    comment: "签到系统03"
  },
  "text_118": {
    id: 118,
    zh: "普通签到",
    en: "Common signIn",
    comment: "签到系统"
  },
  "text_119": {
    id: 119,
    zh: "您还可以观看视频广告获取体力 * ",
    en: "you can still watch a video advertisment to get physical power * ",
    comment: "签到系统"
  },
  "text_120": {
    id: 120,
    zh: "，是否观看？",
    en: ", would you want to watch?",
    comment: "签到系统"
  },
  "text_121": {
    id: 121,
    zh: "您今天已经签到过啦，明天再来吧~",
    en: "you have been signed in today, come again tomorrow please ~",
    comment: "签到系统"
  },
  "text_122": {
    id: 122,
    zh: "确定",
    en: "OK",
    comment: "通用确定"
  },
  "text_123": {
    id: 123,
    zh: "您可以观看视频广告，获得",
    en: "you can get ",
    comment: ""
  },
  "text_124": {
    id: 124,
    zh: " 体力 * ",
    en: " physical power * ",
    comment: ""
  },
  "text_125": {
    id: 125,
    zh: " 金币 * ",
    en: " gold * ",
    comment: ""
  },
  "text_126": {
    id: 126,
    zh: "，是否观看？",
    en: ", by watching a video advertisment , would you want to watch?",
    comment: ""
  },
  "text_127": {
    id: 127,
    zh: "主线",
    en: "Main Line",
    comment: "邮件系统 mainline tag name"
  },
  "text_128": {
    id: 128,
    zh: "支线",
    en: "branch line",
    comment: "邮件系统 branchline1 tag name"
  },
  "text_129": {
    id: 129,
    zh: "您还有未读邮件，请先查看完哦，心急不是好习惯 -.-",
    en: "you still have mail unread , please make them readed first , don't be impatient",
    comment: "未读邮件提示"
  },
  "text_130": {
    id: 130,
    zh: "此分支已结束",
    en: "this branch has been finished",
    comment: ""
  },
  "text_131": {
    id: 131,
    zh: "通关 %s - %s , 会有新的邮件，加油吧少年",
    en: "complete level %s - %s , will get a new mail , come on",
    comment: ""
  },
  "text_132": {
    id: 132,
    zh: "在 %s - %s 用最多 %s 步通关 ， 会有新的邮件，加油吧少年",
    en: "complete level %s - %s in at most %s step , will get a new mail, come on",
    comment: ""
  },
  "text_133": {
    id: 133,
    zh: "你知道么",
    en: "you know what",
    comment: "邮件 1001 标题"
  },
  "text_134": {
    id: 134,
    zh: "测试一下",
    en: "have a test",
    comment: "邮件 1001 内容"
  },
  "text_135": {
    id: 135,
    zh: "好的",
    en: "OK",
    comment: "邮件 1001 选项1 通用OK"
  },
  "text_136": {
    id: 136,
    zh: "测试选项",
    en: "Test option",
    comment: "邮件 1001 选项2"
  },
  "text_137": {
    id: 137,
    zh: "测试选项1",
    en: "test option 1",
    comment: "邮件 1001 选项3"
  },
  "text_138": {
    id: 138,
    zh: "测试 10001",
    en: "test 10001",
    comment: "邮件 10001 标题"
  },
  "text_139": {
    id: 139,
    zh: "测试 10001",
    en: "test 10001",
    comment: "邮件 10001 内容"
  },
  "text_140": {
    id: 140,
    zh: "测试 1002",
    en: "test 1002",
    comment: "邮件 1002 标题"
  },
  "text_141": {
    id: 141,
    zh: "测试 1002",
    en: "test 1002",
    comment: "邮件 1002 内容"
  },
  "text_142": {
    id: 142,
    zh: "测试 1003",
    en: "test 1003",
    comment: "邮件 1003 标题"
  },
  "text_143": {
    id: 143,
    zh: "测试 1003",
    en: "test 1003",
    comment: "邮件 1003 内容"
  },
  "text_144": {
    id: 144,
    zh: "测试 1101",
    en: "test 1101",
    comment: "邮件 1101 标题"
  },
  "text_145": {
    id: 145,
    zh: "测试 1101",
    en: "test 1101",
    comment: "邮件 1101 内容"
  },
  "text_146": {
    id: 146,
    zh: "啊哦，还没有任何邮件哦",
    en: "wow , there is no mail yet",
    comment: "邮件系统 没有邮件提示"
  },
  "text_147": {
    id: 147,
    zh: "关闭",
    en: "close",
    comment: "通用关闭"
  },
  "text_148": {
    id: 148,
    zh: "收到了一封新邮件，快去查看吧",
    en: "get one new mail , go to check it",
    comment: "收到新邮件提示"
  },
  "text_149": {
    id: 149,
    zh: "通关后会收到 %s 分支的新邮件",
    en: "complete this level will get one new mail from %s ",
    comment: "关卡预览界面，邮件区文字提示"
  },
  "text_150": {
    id: 150,
    zh: "用不多于 %s 步通关，会收到 %s 分支的新邮件",
    en: "you will get one new mail from %s , by completing this level in at most %s step",
    comment: "关卡预览界面，邮件区文字提示"
  },
  "text_151": {
    id: 151,
    zh: "挑战",
    en: "Enter",
    comment: "关卡预览界面，挑战按钮文字"
  },
  "text_152": {
    id: 152,
    zh: "重试",
    en: "Retry",
    comment: "关卡界面，重试按钮文字"
  },
  "text_153": {
    id: 153,
    zh: "最小步数：%s",
    en: "min step: %s",
    comment: "关卡界面最小步数"
  },
  "text_154": {
    id: 154,
    zh: "当前步数：%s",
    en: "current step: %s",
    comment: "关卡界面当前步数"
  },
  "text_155": {
    id: 155,
    zh: "无",
    en: "none",
    comment: ""
  },
  "text_156": {
    id: 156,
    zh: "登陆中，请稍候",
    en: "loging in , please wait a moment",
    comment: "登陆中提示"
  },
  "text_157": {
    id: 157,
    zh: "登陆成功",
    en: "log in success",
    comment: "登陆成功"
  },
  "text_158": {
    id: 158,
    zh: "这个章节还没有解锁哦",
    en: "this section have no been unlocked",
    comment: ""
  },
  "text_159": {
    id: 159,
    zh: "在屏幕任何地方向四个方向滑动，让所有方块到达与之相匹配的目标，便可通关",
    en: "Swipe to any of the 4 directions at any position in the screen, make all diamonds reached matched target , will pass the level ",
    comment: ""
  },
  "text_160": {
    id: 160,
    zh: "这是第一行\n这是第二行\n这是第三行\n就这样吧先",
    en: "this is new story line 1\n        and this is new story line 2\n        this is new story line 3\n        ok , just complete first",
    comment: "新手剧情测试"
  },
  "text_161": {
    id: 161,
    zh: "连接服务器失败，请点击重试",
    en: "failed to connect server, tap to retry",
    comment: "连接失败"
  },
  getTextByIdAndLanguageType: function getTextByIdAndLanguageType(givenId) {
    var givenType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.languageType;
    var key = "text_" + givenId.toString();
    var result = this[key];

    if (givenType == 1) {
      //cn
      return result.zh;
    } else {
      return result.en;
    }
  },
  getFormatedString: function getFormatedString(givenId) {
    var paras = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var givenType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.languageType;
    var key = "text_" + givenId.toString();
    var result = this[key];
    var strResult = null;

    if (givenType == 1) {
      strResult = result.zh;
    } else {
      strResult = result.en;
    } //%s


    var indexes = [];

    for (var index in strResult) {
      var _char = strResult[index];
      var next = null;

      if (index < strResult.length - 1) {
        var temp = parseInt(index) + 1;
        next = strResult[temp];
      } // cc.log(char,next)


      if (_char == "%" && next == "s") {
        indexes.push(index);
      }
    }

    if (indexes.length != paras.length) {
      cc.log("para length not match of indexes length, indexes: " + indexes.length + " paras: " + paras.length);
      return;
    } // var changedIndexTemp = 0
    // cc.log(strResult)
    // for (var index in paras) {
    //     var elementToReplace = paras[index].toString()
    //     var startIndex = parseInt(indexes[index]) + changedIndexTemp
    //     strResult.splice(startIndex,2,elementToReplace)
    //     changedIndexTemp = elementToReplace.length - 2
    // }


    for (var index in paras) {
      var elementToReplace = paras[index].toString();
      strResult = strResult.replace("%s", elementToReplace);
    }

    return strResult;
  }
};

if (cc.sys.language == cc.sys.LANGUAGE_CHINESE) {
  textConfig.languageType = 1;
}

module.exports = textConfig;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/mainScene/preChallengeUIMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e5cd7mr4sZJ97Ekm5ipqXJu', 'preChallengeUIMgr');
// scripts/mainScene/preChallengeUIMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    headerDis: 83,
    footerDis: 124,
    sectionDis: 66,
    contentSpace: 99,
    mailSectionElementDis: 30,
    titleLabelNode: cc.Node,
    challengeButtonNoe: cc.Node,
    contentSectionNode: cc.Node,
    mailSectionNode: cc.Node,
    closeButtonNode: cc.Node,
    mailSectionElementPrefab: cc.Prefab,
    challengeButtonCostPhySprite: cc.SpriteFrame,
    level: null,
    levelStatus: null,
    costResult: null,
    delegate: null
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    var textConfig = require("textConfig");

    var bg = this.node.getChildByName("bg");
    bg.width = cc.winSize.width;
    bg.height = cc.winSize.height;
    bg.on("touchstart", function () {}, this);
    var self = this;
    this.closeButtonNode.on("click", function () {
      if (self.delegate != null) {
        self.delegate.preChanllengeUIOpend = false;
      } else {
        cc.log("delegate is null");
      }

      self.node.destroy();
    }, this);
    this.challengeButtonNoe.getChildByName("New Label").getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(151);
  },
  start: function start() {
    this.setupUI();
  },
  getSectionAndIndexOfLevel: function getSectionAndIndexOfLevel() {
    var mainSceneMgr = cc.director.getScene().getChildByName("Canvas").getComponent("mainSceneMgr");
    var section = mainSceneMgr.selectedSection;

    var sectionConfig = require("sectionConfig");

    var levels = sectionConfig[section].levels;
    var index = levels.indexOf(this.level) + 1;
    return [section, index];
  },
  setupUI: function setupUI() {
    this._setupUIContent();

    this._setupUIPosition();
  },
  _setupUIContent: function _setupUIContent() {
    //title label
    var result = this.getSectionAndIndexOfLevel();
    this.titleLabelNode.getComponent(cc.Label).string = result[0].toString() + " - " + result[1]; //content section

    var levelConfig = require("levelConfig");

    var config = levelConfig[this.level];
    var desLabelNode = this.contentSectionNode.getChildByName("desLabel");
    desLabelNode.getComponent(cc.Label).string = require("textConfig").getTextByIdAndLanguageType(config.desTextId);

    desLabelNode.getComponent(cc.Label)._forceUpdateRenderData();

    var seperateLineUpNode = this.contentSectionNode.getChildByName("seperateLineUp");
    var seperateLineDownNode = this.contentSectionNode.getChildByName("seperateLineDown");
    var contentHeight = desLabelNode.height + 2 * this.contentSpace + seperateLineUpNode.height + seperateLineDownNode.height;
    this.contentSectionNode.height = contentHeight;
    seperateLineUpNode.y = 0;
    desLabelNode.y = seperateLineUpNode.y - seperateLineUpNode.height - this.contentSpace;
    seperateLineDownNode.y = -contentHeight + seperateLineDownNode.height; //mailSection

    var textConfig = require("textConfig");

    var result = this._getMailSectionInfo();

    var mailSectionHeight = 0;

    for (var index in result) {
      var oneConfig = result[index];
      var node = cc.instantiate(this.mailSectionElementPrefab);
      var desLabel = node.getChildByName("desLabel");
      var textStr = "";

      if (oneConfig.type == 1) {
        // textStr = "通关后会收到 " + oneConfig.tag + " 分支的新邮件"
        textStr = textConfig.getFormatedString(149, [oneConfig.tag]);
      } else if (oneConfig.type == 2) {
        // textStr = "用不多于 " + oneConfig.minStep + " 步通关，会收到 " + oneConfig.tag + " 分支的新邮件"
        textStr = textConfig.getFormatedString(150, [oneConfig.minStep, oneConfig.tag]);
      }

      desLabel.getComponent(cc.Label).string = textStr;

      desLabel.getComponent(cc.Label)._forceUpdateRenderData();

      var completeIcon = node.getChildByName("completeIcon");

      if (oneConfig.status == true) {
        completeIcon.active = true;
      }

      if (desLabel.height > completeIcon.height) {
        node.height = desLabel.height;
      } else {
        node.height = completeIcon.height;
      }

      node.y = mailSectionHeight;
      mailSectionHeight += node.height;

      if (index != result.length - 1) {
        mailSectionHeight += this.mailSectionElementDis;
      }

      this.mailSectionNode.addChild(node);
    }

    this.mailSectionNode.height = mailSectionHeight; //challengeButton

    var costResult = this._getCostInfoOfChallenge();

    if (costResult.type == "physicalPower") {
      this.challengeButtonNoe.getChildByName("costIcon").getComponent(cc.Sprite).spriteFrame = this.challengeButtonCostPhySprite;
    }

    this.challengeButtonNoe.getChildByName("costLabel").getComponent(cc.Label).string = costResult.num.toString();
    this.costResult = costResult;
  },
  _setupUIPosition: function _setupUIPosition() {
    var totalHeight = this.footerDis + this.titleLabelNode.height + this.sectionDis + this.contentSectionNode.height + this.sectionDis + this.mailSectionNode.height + this.sectionDis + this.challengeButtonNoe.height + this.footerDis;
    var uibg = this.node.getChildByName("others").getChildByName("uiBg");
    uibg.height = totalHeight;
    this.titleLabelNode.y = uibg.height / 2 - this.headerDis;
    this.contentSectionNode.y = this.titleLabelNode.y - this.titleLabelNode.height - this.sectionDis;
    this.mailSectionNode.y = this.contentSectionNode.y - this.contentSectionNode.height - this.sectionDis;
    this.challengeButtonNoe.y = this.mailSectionNode.y - this.mailSectionNode.height - this.sectionDis - this.challengeButtonNoe.height / 2;
  },
  _getMailSectionInfo: function _getMailSectionInfo() {
    var mailSysConfig = require("mailSysConfig");

    var result = [];

    var textConfig = require("textConfig");

    for (var tag in mailSysConfig) {
      var oneConfig = mailSysConfig[tag];
      var conditions = oneConfig.conditions;

      var currentConditionIndex = require("dataMgr").playerData.mailConditionIndex[tag];

      for (var index in conditions) {
        var oneConditionConfig = conditions[index];
        var conditionType = oneConditionConfig.conditionType;
        var conditionPara = oneConditionConfig.conditionPara; // if (conditionPara == this.level) {
        //     var oneResult = {
        //         tag: oneConfig.tagName,
        //         status: null
        //     }
        // }

        var oneResult = null;

        if (conditionType == 1 && conditionPara == this.level || conditionType == 2 && conditionPara.levelId == this.level) {
          oneResult = {
            // tag: oneConfig.tagNameTextId,
            tag: textConfig.getTextByIdAndLanguageType(oneConfig.tagNameTextId),
            type: conditionType,
            status: null,
            minStep: null
          };
        }

        if (oneResult == null) {
          continue;
        }

        if (index < currentConditionIndex) {
          oneResult.status = true;
        } else {
          oneResult.status = false;
        }

        if (conditionType == 2) {
          oneResult.minStep = conditionPara.minStepNum;
        }

        result.push(oneResult);
        break;
      }
    }

    return result;
  },
  _getCostInfoOfChallenge: function _getCostInfoOfChallenge() {
    var result = {
      type: "physicalPower",
      num: 0
    };

    var levelConfig = require("levelConfig");

    if (this.levelStatus == 1) {
      result.type = "heart";
      result.num = levelConfig[this.level].heartForRetryCost;
    } else if (this.levelStatus == 2) {
      var flag = require("dataMgr").playerData.physicalPowerCostedFlag;

      if (flag == 0) {
        result.type = "physicalPower";
        result.num = levelConfig[this.level].physicalPowerCost;
      } else if (flag == 1) {
        result.type = "heart";
        result.num = levelConfig[this.level].heartForRetryCost;
      }
    }

    return result;
  },
  onClick: function onClick() {
    if (this.costResult == null || this.costResult.num == 0) {
      return;
    }

    var valueNum = null;

    if (this.costResult.type == "heart") {
      valueNum = require("dataMgr").playerData.heart - this.costResult.num;
    } else if (this.costResult.type == "physicalPower") {
      valueNum = require("dataMgr").playerData.physicalPower - this.costResult.num;
    }

    if (valueNum == null || valueNum < 0) {
      var notificaitionSys = require("notificationMgr");

      var notiStr = "";

      if (this.costResult.type == "heart") {
        notiStr = "金币不足";
      } else if (this.costResult.type == "physicalPower") {
        notiStr = "体力不足";
      }

      notificaitionSys.showNoti(notiStr);
      return;
    }

    var networkMgr = require("networkMgr");

    var messageObj = networkMgr.makeMessageObj("dataModule", "commitMessageTyp");
    messageObj.message.playerId = require("dataMgr").playerData.id;
    var commitBody = null;

    if (this.costResult.type == "heart") {
      commitBody = {
        "heart": require("dataMgr").playerData.heart - this.costResult.num
      };
    } else if (this.costResult.type == "physicalPower") {
      commitBody = {
        "physicalPower": require("dataMgr").playerData.physicalPower - this.costResult.num
      };
    }

    messageObj.message.commitBody = commitBody;
    var self = this;

    messageObj.successCallBack = function () {
      if (self.costResult.type == "heart") {
        require("dataMgr").playerData.heart = commitBody.heart;
      } else if (self.costResult.type == "physicalPower") {
        require("dataMgr").playerData.physicalPower = commitBody.physicalPower;
      } // self.challengeButtonNoe.getComponent(cc.Button).interactable = true


      require("gameMgr").enterLevelScene(self.level);
    };

    this.challengeButtonNoe.getComponent(cc.Button).interactable = false;
    networkMgr.sendMessageByMsgObj(messageObj);
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/helper.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '08b56AlCIJMzL7NY0hkRsv7', 'helper');
// scripts/helper.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var Helper = cc.Class({
  properties: {},
  segmentsIntr: function segmentsIntr(a, b, c, d) {
    /** 1 解线性方程组, 求线段交点. **/
    // 如果分母为0 则平行或共线, 不相交  
    var denominator = (b.y - a.y) * (d.x - c.x) - (a.x - b.x) * (c.y - d.y);

    if (denominator == 0) {
      return false;
    } // 线段所在直线的交点坐标 (x , y)      


    var x = ((b.x - a.x) * (d.x - c.x) * (c.y - a.y) + (b.y - a.y) * (d.x - c.x) * a.x - (d.y - c.y) * (b.x - a.x) * c.x) / denominator;
    var y = -((b.y - a.y) * (d.y - c.y) * (c.x - a.x) + (b.x - a.x) * (d.y - c.y) * a.y - (d.x - c.x) * (b.y - a.y) * c.y) / denominator;
    /** 2 判断交点是否在两条线段上 **/

    if ( // 交点在线段1上  
    this.similarMinus(x, a.x) * this.similarMinus(x, b.x) <= 0 && this.similarMinus(y, a.y) * this.similarMinus(y, b.y) <= 0 // (x - a.x) * (x - b.x) <= 0 && (y - a.y) * (y - b.y) <= 0  
    // 且交点也在线段2上  
    && this.similarMinus(x, c.x) * this.similarMinus(x, d.x) <= 0 && this.similarMinus(y, c.y) * this.similarMinus(y, d.y) <= 0 //  && (x - c.x) * (x - d.x) <= 0 && (y - c.y) * (y - d.y) <= 0  
    ) {
        // 返回交点p  
        return {
          x: x,
          y: y
        };
      } //否则不相交  


    return false;
  },
  rotateSegment: function rotateSegment(a, b, origin, degree) {
    var rotatedA = this.rotateOnePoint(a, origin, degree);
    var rotatedB = this.rotateOnePoint(b, origin, degree);
    return {
      p1: rotatedA,
      p2: rotatedB
    };
  },
  rotateOnePoint: function rotateOnePoint(b, origin, degree) {
    var angle = degree * Math.PI / 180;
    var pb = cc.v2(b.x - origin.x, b.y - origin.y);
    var rotatedPb = pb.rotate(angle);
    var rotatedB = cc.v2(rotatedPb.x + origin.x, rotatedPb.y + origin.y);
    return rotatedB;
  },
  rayTest: function rayTest(line1, line2) {
    var result = this.segmentsIntr(line1.p1, line1.p2, line2.p1, line2.p2);

    if (result == false) {
      return false;
    }

    var dis = cc.v2(result.x - line1.p1.x, result.y - line1.p1.y).mag();
    return dis;
  },
  getSuitablePoint: function getSuitablePoint(p1, currentDis, targetDis, direction) {
    if (targetDis >= currentDis) {
      return p1;
    }

    direction.normalizeSelf();
    var currentDisX = currentDis * direction.x;
    var currentDisY = currentDis * direction.y;
    var ratio = (currentDis - targetDis) / currentDis;
    var resultX = p1.x + ratio * currentDisX;
    var resultY = p1.y + ratio * currentDisY;
    return cc.v2(resultX, resultY);
  },
  makeRay: function makeRay(p1, dis, direction) {
    var ray = {
      p1: p1,
      p2: null
    };

    if (direction.mag() != 1) {
      direction.normalizeSelf();
    }

    var dx = direction.x * dis;
    var dy = direction.y * dis;
    var x = p1.x + dx;
    var y = p1.y + dy;
    ray.p2 = cc.v2(x, y);
    return ray;
  },
  getLinesOfOneNode: function getLinesOfOneNode(givenNode) {
    var offset = givenNode.height / 2;
    var p1 = cc.v2(givenNode.x - givenNode.width / 2, givenNode.y - offset);
    var p2 = cc.v2(givenNode.x + givenNode.width / 2, givenNode.y - offset);
    var p3 = cc.v2(p1.x, p1.y + givenNode.height);
    var p4 = cc.v2(p2.x, p2.y + givenNode.height);
    var p5 = cc.v2(givenNode.x - givenNode.width / 2, givenNode.y + givenNode.height / 2);
    var p6 = cc.v2(p5.x, p5.y - givenNode.height);
    var p7 = cc.v2(givenNode.x + givenNode.width / 2, givenNode.y + givenNode.height / 2);
    var p8 = cc.v2(p7.x, p7.y - givenNode.height);
    var line1 = {
      p1: p1,
      p2: p2
    };
    var line2 = {
      p1: p3,
      p2: p4
    };
    var line3 = {
      p1: p5,
      p2: p6
    };
    var line4 = {
      p1: p7,
      p2: p8
    };

    if (givenNode.angle != null && givenNode.angle != undefined) {
      line1 = this.rotateSegment(p1, p2, cc.v2(givenNode.x, givenNode.y), -givenNode.angle);
      line2 = this.rotateSegment(p3, p4, cc.v2(givenNode.x, givenNode.y), -givenNode.angle);
      line3 = this.rotateSegment(p5, p6, cc.v2(givenNode.x, givenNode.y), -givenNode.angle);
      line4 = this.rotateSegment(p7, p8, cc.v2(givenNode.x, givenNode.y), -givenNode.angle);
    } // var line1 = this.rotateSegment(p1,p2,cc.v2(givenNode.x, givenNode.y),-givenNode.angle)
    // var line2 = this.rotateSegment(p3,p4,cc.v2(givenNode.x, givenNode.y),-givenNode.angle)
    // var line3 = this.rotateSegment(p5,p6,cc.v2(givenNode.x, givenNode.y),-givenNode.angle)
    // var line4 = this.rotateSegment(p7,p8,cc.v2(givenNode.x, givenNode.y),-givenNode.angle) 


    var obj = {
      lowerLine: line1,
      //lower line
      upperLine: line2,
      //upper line
      leftLine: line3,
      //left line
      rightLine: line4 //right line

    };

    if (line1 == null || line2 == null || line3 == null || line4 == null) {
      cc.error("NOT INVALID LINES");
    }

    return obj;
  },
  isTwoNodeCross: function isTwoNodeCross(node1, node2) {
    var info1 = this.getInfoOfOneNode(node1);
    var info2 = this.getInfoOfOneNode(node2);

    if (info1.minY > info2.maxY || info2.minY > info1.maxY || info1.minX > info2.maxX || info2.minX > info1.maxX) {
      return false;
    }

    return true;
  },
  getInfoOfOneNode: function getInfoOfOneNode(givenNode) {
    var leftUpPoint = cc.v2(givenNode.x - givenNode.width / 2, givenNode.y + givenNode.height / 2);
    var rightUpPoint = cc.v2(givenNode.x + givenNode.width / 2, leftUpPoint.y);
    var leftDownPoint = cc.v2(leftUpPoint.x, givenNode.y - givenNode.height / 2);
    var rightDownPoint = cc.v2(rightUpPoint.x, leftDownPoint.y);

    if (givenNode.angle != null && givenNode.angle != undefined) {
      leftUpPoint = this.rotateOnePoint(leftUpPoint, cc.v2(givenNode.x, givenNode.y), -givenNode.angle);
      rightUpPoint = this.rotateOnePoint(rightUpPoint, cc.v2(givenNode.x, givenNode.y), -givenNode.angle);
      leftDownPoint = this.rotateOnePoint(leftDownPoint, cc.v2(givenNode.x, givenNode.y), -givenNode.angle);
      rightDownPoint = this.rotateOnePoint(rightDownPoint, cc.v2(givenNode.x, givenNode.y), -givenNode.angle);
    }

    var minX = leftUpPoint.x;
    var maxX = rightDownPoint.x;
    var minY = leftDownPoint.y;
    var maxY = rightUpPoint.y;
    var arry = [leftUpPoint, leftDownPoint, rightUpPoint, rightDownPoint];

    for (var index in arry) {
      var point = arry[index];

      if (minX > point.x) {
        minX = point.x;
      }

      if (maxX < point.x) {
        maxX = point.x;
      }

      if (minY > point.y) {
        minY = point.y;
      }

      if (maxY < point.y) {
        maxY = point.y;
      }
    }

    return {
      minX: minX,
      minY: minY,
      maxX: maxX,
      maxY: maxY
    };
  },
  getDisToSelfBorder: function getDisToSelfBorder(givenNode, direction) {
    var ray = this.makeRay(cc.v2(givenNode.x, givenNode.y), 1000, direction);
    var borderLines = this.getLinesOfOneNode(givenNode);

    for (var key in borderLines) {
      var line = borderLines[key];
      var dis = this.rayTest(ray, line);

      if (dis != false) {
        return dis;
      }
    }
  },
  getPointsOfOneNode: function getPointsOfOneNode(givenNode) {
    var leftUpPoint = cc.v2(givenNode.x - givenNode.width / 2, givenNode.y + givenNode.height / 2);
    var rightUpPoint = cc.v2(givenNode.x + givenNode.width / 2, leftUpPoint.y);
    var leftDownPoint = cc.v2(leftUpPoint.x, givenNode.y - givenNode.height / 2);
    var rightDownPoint = cc.v2(rightUpPoint.x, leftDownPoint.y);

    if (givenNode.angle != null && givenNode.angle != undefined) {
      leftUpPoint = this.rotateOnePoint(leftUpPoint, cc.v2(givenNode.x, givenNode.y), -givenNode.angle);
      rightUpPoint = this.rotateOnePoint(rightUpPoint, cc.v2(givenNode.x, givenNode.y), -givenNode.angle);
      leftDownPoint = this.rotateOnePoint(leftDownPoint, cc.v2(givenNode.x, givenNode.y), -givenNode.angle);
      rightDownPoint = this.rotateOnePoint(rightDownPoint, cc.v2(givenNode.x, givenNode.y), -givenNode.angle);
    }

    return {
      leftUpPoint: leftUpPoint,
      leftDownPoint: leftDownPoint,
      rightUpPoint: rightUpPoint,
      rightDownPoint: rightDownPoint
    };
  },
  isOneNodeWillCollidWithOneLineInDirection: function isOneNodeWillCollidWithOneLineInDirection(givenNode, givenLine, givenDirection) {
    var dis = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 3000;
    var nodePoints = this.getPointsOfOneNode(givenNode);
    var rays = [];

    for (var key in nodePoints) {
      var onePoint = nodePoints[key];
      var ray = this.makeRay(onePoint, dis, givenDirection);
      rays.push(ray);
    }

    var minX = null;
    var minY = null;
    var maxX = null;
    var maxY = null;

    for (var index in rays) {
      var oneRay = rays[index];
      var minerX = oneRay.p1.x;
      var maxerX = oneRay.p2.x;

      if (minerX > oneRay.p2.x) {
        minerX = oneRay.p2.x;
        maxerX = oneRay.p1.x;
      }

      var minerY = oneRay.p1.y;
      var maxerY = oneRay.p2.y;

      if (minerY > oneRay.p2.y) {
        minerY = oneRay.p2.y;
        maxerY = oneRay.p1.y;
      }

      if (minX == null) {
        minX = minerX;
        maxX = maxerX;
      } else {
        if (minX > minerX) {
          minX = minerX;
        }

        if (maxX < maxerX) {
          maxX = maxerX;
        }
      }

      if (minY == null) {
        minY = minerY;
        maxY = maxerY;
      } else {
        if (minY > minerY) {
          minY = minerY;
        }

        if (maxY < maxerY) {
          maxY = maxerY;
        }
      }
    }

    var lineMinx = givenLine.p1.x;
    var lineMaxX = givenLine.p2.x;
    var lineMinY = givenLine.p1.y;
    var lineMaxY = givenLine.p2.y;

    if (lineMinx > givenLine.p2.x) {
      lineMinx = givenLine.p2.x;
      lineMaxX = givenLine.p1.x;
    }

    if (lineMinY > givenLine.p2.y) {
      lineMinY = givenLine.p2.y;
      lineMaxY = givenLine.p1.y;
    }

    if (minY >= lineMaxY || maxY <= lineMinY || minX >= lineMaxX || maxX <= lineMinx) {
      return false;
    }

    var lineDirection = cc.v2(givenLine.p2.x - givenLine.p1.x, givenLine.p2.y - givenLine.p1.y);
    lineDirection.normalizeSelf();
    var lenthenLineP2 = this.makeRay(givenLine.p2, 3000, lineDirection).p2;
    var lenthenLineP1 = this.makeRay(givenLine.p1, 3000, cc.v2(-lineDirection.x, -lineDirection.y)).p2;
    var lenthenLine = {
      p1: lenthenLineP1,
      p2: lenthenLineP2
    };
    var testRay = this.makeRay(cc.v2(givenNode.x, givenNode.y), 3000, givenDirection);
    var distance = this.rayTest(testRay, lenthenLine);

    if (distance != false) {
      return distance;
    } else {
      return false;
    }
  },
  isTwoPositionSimilarEqual: function isTwoPositionSimilarEqual(p1, p2) {
    var dx = p2.x - p1.x;
    var dy = p2.y - p1.y;
    var faultTolerent = 0.01;

    if (-faultTolerent > dx || faultTolerent < dx) {
      return false;
    }

    if (-faultTolerent > dy || faultTolerent < dy) {
      return false;
    }

    return true;
  },
  isTwoValueSimilarEqual: function isTwoValueSimilarEqual(v1, v2) {
    var d = v2 - v1;
    var faultTolerent = 0.01;

    if (-faultTolerent > d || faultTolerent < d) {
      return false;
    }

    return true;
  },
  similarMinus: function similarMinus(a, b) {
    var temp = a - b;

    if (-0.001 < temp && temp < 0.001) {
      temp = 0;
    }

    return temp;
  }
});
module.exports = Helper;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/systems/mailSys/mailSysMailMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '16bb9ye6UBAebul1F7cBbyY', 'mailSysMailMgr');
// scripts/systems/mailSys/mailSysMailMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    mailId: null,
    relatedMailSectionNode: cc.Node,
    relatedMailSysMgr: null,
    mailOptionNodePrefab: cc.Prefab,
    disOfContentAndOptionSection: 200,
    disOfOptionNodes: 25,
    headerHeight: 82,
    footerHeight: 80
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    var bg = this.node.getChildByName("bg");
    bg.width = cc.winSize.width;
    bg.height = cc.winSize.height;
    bg.on("touchstart", function () {});
    this.setupContentSection();
    this.setupOptionSection();
    this.setupUiBg();
  },
  start: function start() {},
  close: function close() {
    this.node.destroy();
  },
  setupContentSection: function setupContentSection() {
    var textConfig = require("textConfig");

    var mailConfig = require("mailConfig");

    var mail = mailConfig[this.mailId];
    var content = this.node.getChildByName("others").getChildByName("contentSection").getChildByName("view").getChildByName("content");
    var titleLabel = content.getChildByName("titleLabel");
    var contentLabel = content.getChildByName("contentLabel"); // titleLabel.getComponent(cc.Label).string = mail.title
    // contentLabel.getComponent(cc.Label).string = mail.content

    titleLabel.getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(mail.titleTextId);
    contentLabel.getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(mail.contentTextId);
    content.height = -contentLabel.y + contentLabel.height;
  },
  setupOptionSection: function setupOptionSection() {
    var textConfig = require("textConfig");

    var optionSection = this.node.getChildByName("others").getChildByName("optionSection");

    var mailConfig = require("mailConfig");

    var mail = mailConfig[this.mailId];
    var options = mail.options;
    mail = require("dataMgr").playerData.mails[this.mailId];

    if (mail.status == 0) {
      //unreaded mail
      if (options.length == 0) {
        var okOptionNode = cc.instantiate(this.mailOptionNodePrefab);
        var okLabelNode = okOptionNode.getChildByName("label");
        okLabelNode.getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(147);
        var okBgNode = okOptionNode.getChildByName("bg");
        okOptionNode.width = okBgNode.width;
        okOptionNode.height = okBgNode.height;
        optionSection.height += okOptionNode.height;
        var self = this;
        okOptionNode.on("click", function () {
          var onMailReaded = function onMailReaded() {
            self.close();
          };

          self.relatedMailSysMgr.setOneMailReaded(self.mailId, -1, onMailReaded, self.relatedMailSectionNode);
        });
        okOptionNode.y = -(optionSection.height - okOptionNode.height);
        optionSection.addChild(okOptionNode);
        return;
      }

      for (var index in options) {
        var oneOption = options[index];
        var optionNode = cc.instantiate(this.mailOptionNodePrefab);
        var labelNode = optionNode.getChildByName("label"); // labelNode.getComponent(cc.Label).string = oneOption.showText

        labelNode.getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(oneOption.showTextId);
        var bgNode = optionNode.getChildByName("bg");
        bgNode.height = labelNode.height;
        optionNode.width = bgNode.width;
        optionNode.height = bgNode.height;

        if (index == 0) {
          optionSection.height += optionNode.height;
        } else {
          optionSection.height += optionNode.height + this.disOfOptionNodes;
        }

        optionNode.y = -(optionSection.height - optionNode.height);
        var operationType = oneOption.operationType;
        var operationPara = oneOption.operationPara;
        var self = this;

        var bindFunction = function bindFunction(givenNode, givenOperationType, givenOperationPara, indexOfOptions) {
          givenNode.on("click", function () {
            //no matter what option be selected, this mail will be readed
            var onMailReaded = function onMailReaded() {
              if (givenOperationType == 1) {
                self.close();
              } else if (givenOperationType == 2) {
                // mailSys.sendOneMail(givenOperationPara.mailId, mail.tag, givenOperationPara.delay)
                require("systemsMgr").mailSysGloableSendOneMail(givenOperationPara.mailId, mail.tag, function () {}, givenOperationPara.delay);

                self.close();
              }
            };

            self.relatedMailSysMgr.setOneMailReaded(self.mailId, indexOfOptions, onMailReaded, self.relatedMailSectionNode);
          });
        };

        bindFunction(optionNode, operationType, operationPara, index);
        optionSection.addChild(optionNode);
      }
    } else if (mail.status == 1) {
      //readed mail
      if (mail.selectedOptionIndex != -1) {
        var selectedOptionIndex = mail.selectedOptionIndex;
        var selectedOption = options[selectedOptionIndex];
        var optionNode = cc.instantiate(this.mailOptionNodePrefab);
        var labelNode = optionNode.getChildByName("label"); // labelNode.getComponent(cc.Label).string = selectedOption.showText

        labelNode.getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(selectedOption.showTextId);
        labelNode.color = cc.color(255, 255, 255);
        var bgNode = optionNode.getChildByName("bg_readed");
        bgNode.active = true;
        bgNode.height = labelNode.height;
        optionNode.width = bgNode.width;
        optionNode.height = bgNode.height;
        optionSection.height += optionNode.height;
        optionNode.getComponent(cc.Button).interactable = false;
        optionNode.y = -(optionSection.height - optionNode.height);
        optionSection.addChild(optionNode);
        var okOptionNode = cc.instantiate(this.mailOptionNodePrefab);
        var okLabelNode = okOptionNode.getChildByName("label");
        okLabelNode.getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(147);
        var okBgNode = okOptionNode.getChildByName("bg");
        okOptionNode.width = okBgNode.width;
        okOptionNode.height = okBgNode.height;
        optionSection.height += okOptionNode.height + this.disOfOptionNodes;
        var self = this;
        okOptionNode.on("click", function () {
          self.close();
        });
        okOptionNode.y = -(optionSection.height - okOptionNode.height);
        optionSection.addChild(okOptionNode);
      } else {
        var okOptionNode = cc.instantiate(this.mailOptionNodePrefab);
        var okLabelNode = okOptionNode.getChildByName("label");
        okLabelNode.getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(147);
        var okBgNode = okOptionNode.getChildByName("bg");
        okOptionNode.width = okBgNode.width;
        okOptionNode.height = okBgNode.height;
        optionSection.height += okOptionNode.height;
        var self = this;
        okOptionNode.on("click", function () {
          self.close();
        });
        okOptionNode.y = -(optionSection.height - okOptionNode.height);
        optionSection.addChild(okOptionNode);
      }
    }
  },
  setupUiBg: function setupUiBg() {
    var uibg = this.node.getChildByName("others").getChildByName("uibg");
    var contentSection = this.node.getChildByName("others").getChildByName("contentSection");
    var optionSection = this.node.getChildByName("others").getChildByName("optionSection");
    uibg.height = this.headerHeight + contentSection.height + this.disOfContentAndOptionSection + optionSection.height + this.footerHeight;
    contentSection.y = uibg.height / 2 - this.headerHeight;
    optionSection.y = contentSection.y - contentSection.height - this.disOfContentAndOptionSection;
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/_mainSceneMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c5bd2cNtixMsrSjayquVQFU', '_mainSceneMgr');
// scripts/_mainSceneMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    playerData: null,
    levelsStartPosition: cc.v2(0, 0),
    levelsHorDis: 60,
    levelsVerDis: 60,
    levelsHorNum: 5,
    levelNodePrefab: cc.Prefab,
    lockedLevelColor: cc.color,
    unlockedLevelColor: cc.color,
    currentLevelColor: cc.color,
    physicalPower: {
      get: function get() {
        return this._physicalPower;
      },
      set: function set(value) {
        this._physicalPower = value;
        this.node.getChildByName("physicalPowerLabel").getComponent(cc.Label).string = this.playerData.physicalPower.toString();
      }
    },
    // maxPhysicalPower: {
    //     get() {
    //         return this._maxPhysicalPower
    //     },
    //     set(value) {
    //         this._maxPhysicalPower = value
    //     }
    // },
    physicalPowerForChallengeCost: {
      get: function get() {
        return this._physicalPowerForChallengeCost;
      },
      set: function set(value) {
        this._physicalPowerForChallengeCost = value;
        var physicalPowerLabel = this.challengeButton.getChildByName("physicalPowerLabel");
        var commentLabel = cc.find("Canvas/commentLabel");
        var physicalPowerIcon = this.challengeButton.getChildByName("physicalPower");

        if (value == null) {
          physicalPowerIcon.active = false;
          physicalPowerLabel.active = false;
        } else {
          physicalPowerIcon.active = true;
          physicalPowerLabel.active = true;
          physicalPowerLabel.getComponent(cc.Label).string = value.toString();

          if (value <= this.physicalPower) {
            this.challengeButton.getComponent(cc.Button).interactable = true;

            if (value == 0) {
              commentLabel.getComponent(cc.Label).string = "已挑战过的关卡不会消耗体力";
            } else {
              commentLabel.getComponent(cc.Label).string = "每天挑战每个新的关卡时会消耗体力";
            }
          } else {
            this.challengeButton.getComponent(cc.Button).interactable = false;
            commentLabel.getComponent(cc.Label).string = "每天挑战每个新的关卡时会消耗体力";
          }
        }
      }
    },
    heartForChallengeCost: {
      get: function get() {
        return this._heartForChallengeCost;
      },
      set: function set(value) {
        this._heartForChallengeCost = value;
        var heartLabel = this.challengeButton.getChildByName("heartLabel");
        var heartIcon = this.challengeButton.getChildByName("heart");

        if (value == null) {
          heartLabel.active = false;
          heartIcon.active = false;
        } else {
          heartLabel.active = true;
          heartIcon.active = true;
          heartLabel.getComponent(cc.Label).string = value.toString();

          if (value <= this.heart) {
            this.challengeButton.getComponent(cc.Button).interactable = true;
          } else {
            this.challengeButton.getComponent(cc.Button).interactable = false;
          }
        }
      }
    },
    selectedLevel: {
      get: function get() {
        return this._selectedLevel;
      },
      set: function set(value) {
        this._selectedLevel = value;

        if (value != null) {
          if (value == this.playerData.currentLevel && this.playerData.physicalPowerCostedFlag == 0) {
            this.heartForChallengeCost = null;

            var temp = require("levelConfig")[value].physicalPowerCost;

            if (this.playerData.initAdWatchedFlag == 1) {
              temp = Math.round(temp / 2);
            }

            this.physicalPowerForChallengeCost = temp;
          } else if (value == this.playerData.currentLevel && this.playerData.physicalPowerCostedFlag == 1) {
            this.physicalPowerForChallengeCost = null;
            this.heartForChallengeCost = require("levelConfig")[value].heartForRetryCost;
          } else {
            this.heartForChallengeCost = null;
            this.physicalPowerForChallengeCost = 0;
          }

          if (this.levelAresNodes[value] != null) {
            this.selectedLevelAreaNode = this.levelAresNodes[value];
          }
        }
      }
    },
    selectedLevelAreaNode: {
      get: function get() {
        return this._selectedLevelAreaNode;
      },
      set: function set(value) {
        this._selectedLevelAreaNode = value;

        if (value != null) {
          if (this.selectedEffect.active == false) {
            this.selectedEffect.x = this.selectedLevelAreaNode.x;
            this.selectedEffect.y = this.selectedLevelAreaNode.y;
            this.selectedEffect.active = true;
          } else {
            cc.tween(this.selectedEffect).to(0.2, {
              x: this.selectedLevelAreaNode.x,
              y: this.selectedLevelAreaNode.y
            }).start();
          }
        } else {
          this.selectedEffect.active = false;
        }
      }
    },
    selectedEffect: cc.Node,
    levelAresNodes: {
      "default": {}
    },
    challengeButton: null,
    heartLabel: cc.Label,
    heart: {
      get: function get() {
        return this._heart;
      },
      set: function set(value) {
        this._heart = value;
        this.heartLabel.string = value.toString();
      }
    } // maxHeart: null

  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    this.playerData = require("dataMgr").playerData;
    this.lockedLevelColor = cc.color(191, 191, 191);
    this.unlockedLevelColor = cc.color(102, 102, 102);
    this.currentLevelColor = cc.color(188, 36, 36);
    this.challengeButton = this.node.getChildByName("challengeButton");
    this.playerName = this.playerData.name;
    this.physicalPower = this.playerData.physicalPower;
    this.heart = this.playerData.heart;
    require("networkMgr").delegate = this;
    var signInButton = this.node.getChildByName("signInButton");
    signInButton.on("click", function () {
      require("systemsMgr").showSystem("signInSys");
    });

    signInButton.getComponent("redPointMgr").redPointShowCondition = function () {
      var signInStatus = require("dataMgr").playerData.signInStatus;

      switch (signInStatus) {
        case 1:
          return true;

        case 2:
          return true;

        default:
          return false;
      }
    };

    var welfaryButton = this.node.getChildByName("welfaryButton");

    if (require("dataMgr").playerData.initAdWatchedFlag == 1) {
      welfaryButton.active = false;
    } else {
      welfaryButton.on("click", function () {
        require("systemsMgr").showSystem("welfarySys");
      });
      cc.tween(welfaryButton).repeatForever(cc.tween().to(0.3, {
        angle: -45
      }).to(0.3, {
        angle: 0
      }).to(0.3, {
        angle: 45
      }).to(0.3, {
        angle: 0
      }).delay(1)).start();
    }

    var addHeartButton = this.node.getChildByName("addButton_heart");
    addHeartButton.on("click", function () {
      require("systemsMgr").showSystem("addPropertyNumSys", 2);
    });
    var addPhysicalPowerButton = this.node.getChildByName("addButton_phy");
    addPhysicalPowerButton.on("click", function () {
      require("systemsMgr").showSystem("addPropertyNumSys", 1);
    });
    var mailButton = this.node.getChildByName("mailButton");
    mailButton.on("click", function () {
      require("systemsMgr").showSystem("mailSys");
    });

    mailButton.getComponent("redPointMgr").redPointShowCondition = function () {
      var mails = require("dataMgr").playerData.mails;

      var unReadNum = 0;

      for (var key in mails) {
        var oneMail = mails[key];

        if (oneMail.status == 0) {
          unReadNum += 1;
        }
      }

      if (unReadNum > 0) {
        return true;
      } else {
        return false;
      }
    };

    this.setupSection(this.playerData.currentSection);
  },
  start: function start() {},
  setupSection: function setupSection(givenSection) {
    var complete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
    this.selectedLevel = null;

    var sectionConfig = require("sectionConfig");

    var config = sectionConfig[givenSection];
    this.node.getChildByName("sectionTitleLabel").getComponent(cc.Label).string = config.sectionTitle;
    this.node.getChildByName("sectionDescripLabel").getComponent(cc.Label).string = config.sectionDescrip;
    var levels = config.levels;
    this.levelAresNodes = {};

    for (var index in levels) {
      var strForShow = parseInt(index) + 1;
      strForShow = strForShow.toString();

      if (strForShow.length == 1) {
        strForShow = "0" + strForShow;
      }

      var node = cc.instantiate(this.levelNodePrefab);
      var label = node.getComponent(cc.Label);
      label.string = strForShow;
      node.x = index % this.levelsHorNum * (this.levelsHorDis + node.width) + this.levelsStartPosition.x;
      node.y = -Math.floor(index / this.levelsHorNum) * (this.levelsVerDis + node.width) + this.levelsStartPosition.y;
      var status = this.checkLevelStatus(levels[index]);

      switch (status) {
        case 0:
          node.color = this.lockedLevelColor;
          break;

        case 1:
          node.color = this.unlockedLevelColor;
          break;

        case 2:
          node.color = this.currentLevelColor;
          break;
      }

      node.getComponent("levelAreaNodeMgr").delegate = this;
      node.getComponent("levelAreaNodeMgr").level = levels[index];
      this.levelAresNodes[levels[index]] = node;
      cc.find("Canvas/levelsArea").addChild(node);
    }

    var url = config.backgroundPath;
    var self = this;
    cc.loader.loadRes(url, cc.SpriteFrame, function (err, res) {
      self.node.getChildByName("sectionBg").getComponent(cc.Sprite).spriteFrame = res;
      complete();
    });

    if (givenSection == this.playerData.currentSection) {
      this.selectedLevel = this.playerData.currentLevel;
    }
  },
  checkSectionStatus: function checkSectionStatus(givenSection) {
    var currentSection = this.playerData.currentSection;

    if (givenSection > currentSection) {
      return 0; //locked
    } else if (givenSection < currentSection) {
      return 1; //unlocked
    } else if (givenSection == currentSection) {
      return 2; //current
    }
  },
  checkLevelStatus: function checkLevelStatus(givenLevel) {
    var sectionConfig = require("sectionConfig");

    var temp = function temp() {
      for (var key in sectionConfig) {
        var levels = sectionConfig[key].levels;

        for (var i in levels) {
          if (givenLevel == levels[i]) {
            return key;
          }
        }
      }

      return false;
    };

    var belongedSection = temp();

    if (belongedSection != false) {
      belongedSection = parseInt(belongedSection);
    } else {
      return false; // no such level
    }

    var sectionCheckResult = this.checkSectionStatus(belongedSection);

    switch (sectionCheckResult) {
      case 0:
        return 0;
      //locked 

      case 1:
        return 1;
      //unlocked

      case 2:
        var currentLevel = this.playerData.currentLevel;

        if (currentLevel == givenLevel) {
          return 2; //current
        }

        for (var index in require("sectionConfig")[belongedSection].levels) {
          var oneLevel = require("sectionConfig")[belongedSection].levels[index];

          if (oneLevel == givenLevel) {
            return 1;
          }

          if (oneLevel == currentLevel) {
            return 0;
          }
        }

    }
  },
  onClickChallengeButton: function onClickChallengeButton() {
    var gameMgr = require("gameMgr");

    this.challengeButton.getComponent(cc.Button).interactable = false;

    if (this.physicalPowerForChallengeCost == 0) {
      gameMgr.enterLevelScene(this.selectedLevel);
      return;
    }

    var temp = null;
    var commitBody = null;

    if (this.physicalPowerForChallengeCost != null) {
      temp = this.playerData.physicalPower - this.physicalPowerForChallengeCost;

      if (temp < 0) {
        return;
      }

      var flagValue = this.playerData.physicalPowerCostedFlag;

      if (this.selectedLevel == this.playerData.currentLevel && this.playerData.physicalPowerCostedFlag == 0) {
        flagValue = 1;
      }

      commitBody = {
        physicalPower: temp,
        physicalPowerCostedFlag: flagValue
      };
    }

    if (this.heartForChallengeCost != null) {
      temp = this.playerData.heart - this.heartForChallengeCost;

      if (temp < 0) {
        return;
      }

      commitBody = {
        heart: temp
      };
    }

    var self = this;

    var successCallBack = function successCallBack() {
      if (self.physicalPowerForChallengeCost != null) {
        self.playerData.physicalPower = temp;
        self.playerData.physicalPowerCostedFlag = flagValue;
      }

      if (self.heartForChallengeCost != null) {
        self.playerData.heart = temp;
      }

      gameMgr.enterLevelScene(self.selectedLevel);
    };

    require("dataMgr").commitPlayerDataToServer(commitBody, successCallBack);
  },
  onAllRetryFailed: function onAllRetryFailed() {
    this.challengeButton.getComponent(cc.Button).interactable = true;
  },
  dataMonitored: function dataMonitored(key, value) {
    if (key == "physicalPower") {
      this.physicalPower = value;
    } else if (key == "heart") {
      this.heart = value;
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/mainScene/mainSceneMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b1711iV+ldL4qhgqdK5YGYi', 'mainSceneMgr');
// scripts/mainScene/mainSceneMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    sectionNameLabelNode: cc.Node,
    levelNodes: cc.Node,
    connectLineNodes: cc.Node,
    levelNodePrefab: cc.Prefab,
    levelNodesConnectLinePrefab: cc.Prefab,
    selectedSection: null,
    physicalLabelNode: cc.Node,
    heartLabelNode: cc.Node,
    mailSysButtonNode: cc.Node,
    signInSysButtonNode: cc.Node,
    welfarySysButtonNode: cc.Node,
    addHeartButtonNode: cc.Node,
    addPhysicalPowerButtonNode: cc.Node,
    selectSectionButtonNode: cc.Node,
    levelNodeStartPosition: cc.v2(0, 0),
    levelNodesHorDis: 10,
    levelNodesVerDis: 20,
    levelNodesNumPerLine: 4,
    rotaedCopiedRadius: 300,
    isShowingNoti: false
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    this.setupData();
    this.setupUI(); //require("gameMgr")._generateLevelSceneConfig()
  },
  start: function start() {
    //require("systemsMgr").showSystem("storySys",9001,2)
    var storyId = require("dataMgr").playerData.storySysId;

    if (storyId != -1) {
      require("systemsMgr").showSystem("storySys", storyId, 2);
    }

    this.playBgm(); //test
    //require("advertisMgr").showActivityNode()
  },
  playBgm: function playBgm() {
    var self = this;

    var path = require("sectionConfig")[this.selectedSection].bgmPath;

    cc.loader.loadRes(path, function (err, res) {
      cc.audioEngine.stopAll();
      cc.audioEngine.play(res, true, 1);
    });
  },
  setupUI: function setupUI() {
    this.heartLabelNode.getComponent(cc.Label).string = require("dataMgr").playerData.heart.toString();
    this.physicalLabelNode.getComponent(cc.Label).string = require("dataMgr").playerData.physicalPower.toString();

    var systemsMgr = require("systemsMgr");

    this.mailSysButtonNode.on("click", function () {
      systemsMgr.showSystem("mailSys");
    });

    this.mailSysButtonNode.getComponent("redPointMgr").redPointShowCondition = function () {
      var mails = require("dataMgr").playerData.mails;

      var unReadNum = 0;

      for (var key in mails) {
        var oneMail = mails[key];

        if (oneMail.status == 0) {
          unReadNum += 1;
        }
      }

      if (unReadNum > 0) {
        return true;
      } else {
        return false;
      }
    };

    this.signInSysButtonNode.on("click", function () {
      systemsMgr.showSystem("signInSys");
    });

    this.signInSysButtonNode.getComponent("redPointMgr").redPointShowCondition = function () {
      var signInStatus = require("dataMgr").playerData.signInStatus;

      switch (signInStatus) {
        case 1:
          return true;

        case 2:
          return true;

        default:
          return false;
      }
    };

    this.addPhysicalPowerButtonNode.on("click", function () {
      systemsMgr.showSystem("addPropertyNumSys", 1);
    });
    this.addHeartButtonNode.on("click", function () {
      systemsMgr.showSystem("addPropertyNumSys", 2);
    });

    var flag = require("dataMgr").playerData.initAdWatchedFlag;

    if (flag == 1) {
      this.welfarySysButtonNode.active = false;
    } else {
      cc.tween(this.welfarySysButtonNode).repeatForever(cc.tween().to(0.3, {
        angle: -45
      }).to(0.3, {
        angle: 0
      }).to(0.3, {
        angle: 45
      }).to(0.3, {
        angle: 0
      }).delay(1)).start();
      this.welfarySysButtonNode.on("click", function () {
        systemsMgr.showSystem("welfarySys");
      });
    }

    this.selectSectionButtonNode.on("click", function () {
      systemsMgr.showSystem("selectSectionSys");
    });
    this.setupSectionPerformance();
  },
  setupData: function setupData() {
    this.selectedSection = require("dataMgr").playerData.currentSection;
  },
  setupSectionPerformance: function setupSectionPerformance() {
    if (this.selectedSection == null) {
      cc.log("not selected one section, can not setup section of mainScene mgr");
      return;
    }

    var textConfig = require("textConfig");

    this.levelNodes.destroyAllChildren();
    this.levelNodes.removeAllChildren();
    this.connectLineNodes.destroyAllChildren();
    this.connectLineNodes.removeAllChildren();

    var sectionConfig = require("sectionConfig");

    var config = sectionConfig[this.selectedSection];
    var sectionTitle = textConfig.getTextByIdAndLanguageType(config.sectionTitleTextId);
    var sectionDes = textConfig.getTextByIdAndLanguageType(config.sectionDescripTextId);
    var showText = sectionTitle + " " + sectionDes;
    this.sectionNameLabelNode.getComponent(cc.Label).string = showText;
    var levels = config.levels;

    for (var index in levels) {
      var oneLevel = levels[index];
      var oneLevelNode = cc.instantiate(this.levelNodePrefab);
      var mgr = oneLevelNode.getComponent("levelNodeMgr");
      mgr.level = oneLevel;
      mgr.levelNumLabelNode.getComponent(cc.Label).string = (parseInt(index) + 1).toString();
      mgr.status = this._checkLevelStatus(oneLevel);
      mgr.delegate = this;

      this._setupLevelNodePosition(oneLevelNode, index);

      this.levelNodes.addChild(oneLevelNode);
    }

    for (var index in this.levelNodes.children) {
      if (index == 0) {
        continue;
      }

      var oneNode = this.levelNodes.children[index];
      var preNode = this.levelNodes.children[index - 1];
      var connectLine = cc.instantiate(this.levelNodesConnectLinePrefab);
      var v = cc.v2(preNode.x - oneNode.x, preNode.y - oneNode.y);
      connectLine.width = v.mag();
      var degree = v.signAngle(cc.v2(1, 0)) / Math.PI * 180;
      connectLine.angle = -degree;

      var result = this._getMidPointOfTwoPoints(oneNode.position, preNode.position);

      connectLine.x = result.x;
      connectLine.y = result.y;
      this.connectLineNodes.addChild(connectLine);
    }
  },
  _setupLevelNodePosition: function _setupLevelNodePosition(givenNode, givenIndex) {
    var sectionConfig = require("sectionConfig")[this.selectedSection];

    var levelNodePositions = sectionConfig.levelNodePositions;

    if (levelNodePositions == null || levelNodePositions.length == 0) {
      //lined
      // var rowIndex = givenIndex % this.levelNodesNumPerLine
      // var colIndex = Math.floor(givenIndex / this.levelNodesNumPerLine)
      // var maxX = this.levelNodeStartPosition.x + this.levelNodesHorDis * (this.levelNodesNumPerLine - 1)
      // if (colIndex % 2 == 0) {
      //     givenNode.x = this.levelNodeStartPosition.x + rowIndex * this.levelNodesHorDis
      // }
      // else {
      //     givenNode.x = maxX - rowIndex * this.levelNodesHorDis
      // }
      // givenNode.y = this.levelNodeStartPosition.y + colIndex * this.levelNodesVerDis
      // var levelNodeStart = this.node.getChildByName("sectionNameLabel").getChildByName("levelNodeStart")
      // givenNode.x = levelNodeStart.x
      // givenNode.y = levelNodeStart.y + givenIndex * this.levelNodesVerDis
      //rotated copied
      var nodesNum = sectionConfig.levels.length;
      var angle = 2 * Math.PI / nodesNum;
      var baseVector = cc.v2(this.rotaedCopiedRadius, 0);
      var v = baseVector.rotate(-givenIndex * angle);
      givenNode.x = v.x;
      givenNode.y = v.y;
    } else {
      givenNode.x = levelNodePositions[givenIndex].x;
      givenNode.y = levelNodePositions[givenIndex].y;
    }
  },
  _getMidPointOfTwoPoints: function _getMidPointOfTwoPoints(point1, point2) {
    var v = cc.v2(point2.x - point1.x, point2.y - point1.y);
    var x = point1.x + v.x / 2;
    var y = point1.y + v.y / 2;
    return cc.v2(x, y);
  },
  _checkSectionStatus: function _checkSectionStatus(givenSection) {
    var currentSection = require("dataMgr").playerData.currentSection;

    if (typeof givenSection !== "number") {
      givenSection = parseInt(givenSection);
    }

    if (givenSection > currentSection) {
      return 0; //locked
    } else if (givenSection < currentSection) {
      return 1; //unlocked
    } else if (givenSection == currentSection) {
      return 2; //current
    }
  },
  _checkLevelStatus: function _checkLevelStatus(givneLevel) {
    var sectionKey = this._getSectionKeyByLevel(givneLevel);

    if (sectionKey == false) {
      return false; //no such level
    }

    var sectionStatus = this._checkSectionStatus(sectionKey);

    switch (sectionStatus) {
      case 0:
        return 0;
      //locked

      case 1:
        return 1;
      //unlocked

      case 2:
        var currentLevel = require("dataMgr").playerData.currentLevel;

        if (currentLevel == givneLevel) {
          return 2; //current
        }

        var sectionConfig = require("sectionConfig")[sectionKey];

        var levelsArry = sectionConfig.levels;

        if (levelsArry.indexOf(givneLevel) > levelsArry.indexOf(currentLevel)) {
          return 0; //locked
        }

        return 1;
      //unlocked
    }
  },
  _getSectionKeyByLevel: function _getSectionKeyByLevel(givenLevel) {
    var levelId = parseInt(givenLevel);

    var sectionConfig = require("sectionConfig");

    for (var key in sectionConfig) {
      var oneConfig = sectionConfig[key];
      var levelsConfig = oneConfig.levels;

      if (levelsConfig.indexOf(levelId) != -1) {
        return key;
      }
    }

    return false;
  },
  dataMonitored: function dataMonitored(key, value) {
    if (key == "physicalPower") {
      this.physicalLabelNode.getComponent(cc.Label).string = value.toString();
    } else if (key == "heart") {
      this.heartLabelNode.getComponent(cc.Label).string = value.toString();
    }

    for (var index in this.levelNodes.children) {
      var oneMgr = this.levelNodes.children[index].getComponent("levelNodeMgr");
      oneMgr.dataMonitored(key, value);
    }
  },
  update: function update(dt) {
    var notificationMgr = require("notificationMgr");

    var notiArry = notificationMgr.noties;

    if (notiArry.length > 0 && this.isShowingNoti == false) {
      this.isShowingNoti = true;
      var self = this;

      var temp = function temp() {
        if (notiArry.length == 0) {
          self.isShowingNoti = false;
          return;
        }

        var oneStr = notiArry[0];
        notificationMgr.showNoti(oneStr);
        notiArry.splice(0, 1);
        cc.tween(self.node).delay(0.3).call(function () {
          temp();
        });
      };

      temp();
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/systems/mailSys/mailSysMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '465278Wd2tOJrFKJYgx+b6s', 'mailSysMgr');
// scripts/systems/mailSys/mailSysMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    uibg: cc.Node,
    closeButtonNode: cc.Node,
    tagSection: cc.Node,
    mailSection: cc.Node,
    notiSection: cc.Node,
    mailSectionContentNode: cc.Node,
    mailSectionEmptyLabelNode: cc.Node,
    mailSectionPrefab: cc.Prefab,
    tagSectionPrefab: cc.Prefab,
    selectedTagEffectPrefab: cc.Prefab,
    opendMailPrefab: cc.Prefab,
    tags: null,
    mailsByTag: {
      "default": {}
    },
    unReadedMailNums: {
      "default": {}
    },
    selectedTag: {
      get: function get() {
        return this._selectedTag;
      },
      set: function set(value) {
        this._selectedTag = value;
        this.setupMailSection();
        this.setupNotiSection();
      }
    },
    selectedTagNode: {
      get: function get() {
        return this._selectedTagNode;
      },
      set: function set(value) {
        this._selectedTagNode = value;

        if (this.selectedTagEffect.parent == null) {
          this.selectedTagEffect.x = this.selectedTagNode.x;
          this.selectedTagEffect.y = this.selectedTagNode.y;
          this.tagSection.addChild(this.selectedTagEffect, 0);
        } else {
          var targetY = this.selectedTagNode.y;
          cc.tween(this.selectedTagEffect).to(0.1, {
            y: targetY
          }).start();
        }
      }
    },
    selectedTagEffect: {
      get: function get() {
        if (this._selectedTagEffect == null) {
          var effect = cc.instantiate(this.selectedTagEffectPrefab);
          this._selectedTagEffect = effect;
        }

        return this._selectedTagEffect;
      },
      set: function set(value) {
        this._selectedTagEffect = value;
      }
    },
    tagSectionStartY: -86.345,
    tagSectionDis: 120,
    mailSectionStartPosition: cc.v2(-125.788, 373.356),
    mailSectionNodeDis: 32,
    mailSectionNodeReadedColor: {
      get: function get() {
        if (this._mailSectionNodeReadedColor == null) {
          this._mailSectionNodeReadedColor = cc.color(102, 102, 102);
        }

        return this._mailSectionNodeReadedColor;
      },
      set: function set(value) {
        this._mailSectionNodeReadedColor = value;
      }
    },
    sysName: "mailSys"
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    var self = this;
    this.closeButtonNode.on("click", function () {
      require("systemsMgr").closeSystem(self.sysName);
    });
    this.setupData();
    this.setupUI();
  },
  start: function start() {},
  setupTagSection: function setupTagSection() {
    var textConfig = require("textConfig");

    for (var index in this.tags) {
      var oneTag = this.tags[index];

      var tagName = require("mailSysConfig")[oneTag].tagNameTextId;

      tagName = textConfig.getTextByIdAndLanguageType(tagName);
      var node = cc.instantiate(this.tagSectionPrefab);
      node.getComponent(cc.Label).string = tagName;

      node.getComponent(cc.Label)._forceUpdateRenderData();

      var self = this;

      var bindFunction = function bindFunction(givenNode, givenTag) {
        givenNode.on("click", function () {
          if (self.selectedTag != givenTag) {
            self.selectedTag = givenTag;
          }

          if (self.selectedTagNode != givenNode) {
            self.selectedTagNode = givenNode;
          }
        });

        givenNode.getComponent("redPointMgr").redPointShowCondition = function () {
          var mails = require("dataMgr").playerData.mails;

          var unReadNum = 0;

          for (var key in mails) {
            var oneMail = mails[key];

            if (oneMail.tag == givenTag && oneMail.status == 0) {
              unReadNum += 1;
            }
          }

          if (unReadNum > 0) {
            return true;
          } else {
            return false;
          }
        };
      };

      bindFunction(node, oneTag);
      node.y = this.tagSectionStartY - index * this.tagSectionDis;
      node.name = oneTag;
      this.tagSection.addChild(node, 1);

      if (index == 0) {
        this.selectedTag = oneTag;
        this.selectedTagNode = node;
      }
    }
  },
  setupMailSection: function setupMailSection() {
    var textConfig = require("textConfig");

    var tagMails = this.mailsByTag[this.selectedTag];
    var mailIdsArry = Object.keys(tagMails);
    this.mailSectionContentNode.destroyAllChildren();

    if (mailIdsArry.length == 0) {
      this.mailSectionEmptyLabelNode.active = true;
      this.mailSectionEmptyLabelNode.getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(146);
      this.mailSectionContentNode.height = 0;
      return;
    }

    this.mailSectionEmptyLabelNode.active = false;
    var self = this;

    var sortFunction = function sortFunction(mailId1, mailId2) {
      var mail1 = self.mailsByTag[self.selectedTag][mailId1];
      var mail2 = self.mailsByTag[self.selectedTag][mailId2];

      if (mail1.status == 0 && mail2.status == 1) {
        return -1;
      } else if (mail1.status == 1 && mail2.status == 0) {
        return 1;
      } else {
        var timeStamp1 = mail1.timeStamp;
        var timeStamp2 = mail2.timeStamp;

        if (timeStamp1 < timeStamp2) {
          return 1;
        } else {
          return -1;
        }
      }
    };

    mailIdsArry = mailIdsArry.sort(sortFunction);

    var mailConfig = require("mailConfig");

    var totalHeight = 0;

    for (var index in mailIdsArry) {
      var mailId = mailIdsArry[index];

      var mail = require("dataMgr").playerData.mails[mailId];

      var node = cc.instantiate(this.mailSectionPrefab);
      var unReadIconNode = node.getChildByName("icon_unread");
      var readedIconNode = node.getChildByName("icon_readed");
      var titleLabelNode = node.getChildByName("titleLabel");
      var seperateLineNode = node.getChildByName("seperateLine");

      if (mail.status == 1) {
        unReadIconNode.active = false;
        readedIconNode.active = true;
        titleLabelNode.color = this.mailSectionNodeReadedColor;
      }

      var titleStr = textConfig.getTextByIdAndLanguageType(mailConfig[mailId].titleTextId);
      titleLabelNode.getComponent(cc.Label).string = titleStr;
      seperateLineNode.y = -titleLabelNode.height;
      node.y = -totalHeight;
      var nodeWidth = titleLabelNode.x + titleLabelNode.width / 2 - (unReadIconNode.x - unReadIconNode.width / 2);
      var nodeHeight = titleLabelNode.height;
      node.width = nodeWidth;
      node.height = nodeHeight;
      node.name = mailId.toString();
      totalHeight = totalHeight + titleLabelNode.height + 2;

      if (index != mailIdsArry.length - 1) {
        totalHeight += this.mailSectionNodeDis;
      }

      var self = this;

      var bindFunction = function bindFunction(givenNode, givenMailId) {
        givenNode.on("click", function () {
          self.openOneMail(givenMailId, givenNode);
        });
      };

      bindFunction(node, mailId);
      this.mailSectionContentNode.addChild(node);
    }

    var minHeight = this.mailSectionContentNode.height;

    if (totalHeight > minHeight) {
      this.mailSectionContentNode.height = totalHeight;
    }
  },
  setupNotiSection: function setupNotiSection() {
    var textConfig = require("textConfig");

    var unReadMailNum = this.unReadedMailNums[this.selectedTag];

    if (unReadMailNum > 0) {
      var str = textConfig.getTextByIdAndLanguageType(129);
      this.notiSection.getChildByName("notiLabel").getComponent(cc.Label).string = str;
      return;
    }

    var mailConditionIndex = require("dataMgr").playerData.mailConditionIndex;

    var index = mailConditionIndex[this.selectedTag];

    if (index == -1) {
      this.notiSection.getChildByName("notiLabel").getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(130);
      return;
    }

    var mailSysConfig = require("mailSysConfig");

    var element = mailSysConfig[this.selectedTag].conditions[index];

    if (element.conditionType == 1) {
      var level = element.conditionPara;

      var result = this._getSectionAndLevelNumOfSection(level);

      if (result != false) {
        var section = result[0];
        var levelNumOfSection = result[1]; // var str  = "通关 " + section.toString() + " - " + levelNumOfSection.toString()
        // str = str + " ，会有新的邮件，加油吧少年！"
        // this.notiSection.getChildByName("notiLabel").getComponent(cc.Label).string = str

        var str = textConfig.getFormatedString(131, [section.toString(), levelNumOfSection.toString()]);
        this.notiSection.getChildByName("notiLabel").getComponent(cc.Label).string = str;
      }
    } else if (element.conditionType == 2) {
      //get minum step of one level
      var levelId = element.conditionPara.levelId;
      var minStepNum = element.conditionPara.minStepNum;

      var result = this._getSectionAndLevelNumOfSection(levelId);

      if (result != false) {
        var section = result[0];
        var level = result[1]; // var str = "在 " + section.toString() + " - " + level.toString()
        // str = str + " 用最多 " + minStepNum + " 步通关，会有新的邮件，加油吧少年！"

        var str = textConfig.getFormatedString(132, [section.toString(), level.toString(), minStepNum.toString()]);
        this.notiSection.getChildByName("notiLabel").getComponent(cc.Label).string = str;
      }
    }
  },
  _getSectionAndLevelNumOfSection: function _getSectionAndLevelNumOfSection(givenLevelId) {
    var section = null;
    var levelNumOfSection = null;

    var sectionConfig = require("sectionConfig");

    for (var key in sectionConfig) {
      var levels = sectionConfig[key].levels;
      var index = levels.indexOf(givenLevelId);

      if (index != -1) {
        section = key;
        levelNumOfSection = index + 1;
        return [section, levelNumOfSection];
      }
    }

    return false;
  },
  setupData: function setupData() {
    var mails = require("dataMgr").playerData.mails;

    this.tags = Object.keys(require("mailSysConfig"));

    for (var index in this.tags) {
      var oneTag = this.tags[index];
      this.mailsByTag[oneTag] = {};
      this.unReadedMailNums[oneTag] = 0;

      for (var key in mails) {
        var oneMail = mails[key];

        if (oneMail.tag == oneTag) {
          this.mailsByTag[oneTag][key] = oneMail;

          if (oneMail.stauts == 0) {
            this.unReadedMailNums[oneTag] += 1;
          }
        }
      }
    }
  },
  setupUI: function setupUI() {
    this.setupTagSection();
    this.setupMailSection();
    this.setupNotiSection();
  },
  _insertOneMail: function _insertOneMail(mailId, mail) {
    if (mail.tag == this.selectedTag) {
      this.setupMailSection();
      this.setupNotiSection();
    }
  },
  openOneMail: function openOneMail(givenMailId, givenNode) {
    var node = cc.instantiate(this.opendMailPrefab);
    var mgr = node.getComponent("mailSysMailMgr");
    mgr.mailId = givenMailId;
    mgr.relatedMailSectionNode = givenNode;
    mgr.relatedMailSysMgr = this;
    this.node.addChild(node);
  },
  setOneMailReaded: function setOneMailReaded(mailId, indexOfOptions) {
    var complete = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};
    var relatedMailSectionNode = arguments.length > 3 ? arguments[3] : undefined;

    var mail = require("dataMgr").playerData.mails[mailId];

    if (mail.status == 1) {
      cc.log("this mail is already readed");
      return;
    }

    var networkMgr = require("networkMgr");

    var messageObj = networkMgr.makeMessageObj("mailModule", "readMailMessageType");
    messageObj.message.playerId = require("dataMgr").playerData.id;
    messageObj.message.mailId = mailId;
    messageObj.message.selectedOptionIndex = indexOfOptions;
    var self = this;

    messageObj.successCallBack = function (xhr) {
      var response = xhr.responseText;
      response = JSON.parse(response);

      if (response.type == "success") {
        mail.status = 1;
        mail.selectedOptionIndex = indexOfOptions;
        relatedMailSectionNode.getChildByName("icon_readed").active = true;
        relatedMailSectionNode.getChildByName("icon_unread").active = false;
        relatedMailSectionNode.getChildByName("titleLabel").color = self.mailSectionNodeReadedColor;
        self.unReadedMailNums[mail.tag] -= 1; //self.setupRedPoint()

        self.setupNotiSection();
        complete();
      }
    };

    networkMgr.sendMessageByMsgObj(messageObj);
  },
  dataMonitored: function dataMonitored(key, value) {
    var mailConfig = require("mailConfig");

    if (Object.keys(mailConfig).indexOf(key) != -1) {
      this.setupData();

      this._insertOneMail(key, value);
    }
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL3N5c3RlbXMvbWFpbFN5cy9tYWlsU3lzTWdyLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwidWliZyIsIk5vZGUiLCJjbG9zZUJ1dHRvbk5vZGUiLCJ0YWdTZWN0aW9uIiwibWFpbFNlY3Rpb24iLCJub3RpU2VjdGlvbiIsIm1haWxTZWN0aW9uQ29udGVudE5vZGUiLCJtYWlsU2VjdGlvbkVtcHR5TGFiZWxOb2RlIiwibWFpbFNlY3Rpb25QcmVmYWIiLCJQcmVmYWIiLCJ0YWdTZWN0aW9uUHJlZmFiIiwic2VsZWN0ZWRUYWdFZmZlY3RQcmVmYWIiLCJvcGVuZE1haWxQcmVmYWIiLCJ0YWdzIiwibWFpbHNCeVRhZyIsInVuUmVhZGVkTWFpbE51bXMiLCJzZWxlY3RlZFRhZyIsImdldCIsIl9zZWxlY3RlZFRhZyIsInNldCIsInZhbHVlIiwic2V0dXBNYWlsU2VjdGlvbiIsInNldHVwTm90aVNlY3Rpb24iLCJzZWxlY3RlZFRhZ05vZGUiLCJfc2VsZWN0ZWRUYWdOb2RlIiwic2VsZWN0ZWRUYWdFZmZlY3QiLCJwYXJlbnQiLCJ4IiwieSIsImFkZENoaWxkIiwidGFyZ2V0WSIsInR3ZWVuIiwidG8iLCJzdGFydCIsIl9zZWxlY3RlZFRhZ0VmZmVjdCIsImVmZmVjdCIsImluc3RhbnRpYXRlIiwidGFnU2VjdGlvblN0YXJ0WSIsInRhZ1NlY3Rpb25EaXMiLCJtYWlsU2VjdGlvblN0YXJ0UG9zaXRpb24iLCJ2MiIsIm1haWxTZWN0aW9uTm9kZURpcyIsIm1haWxTZWN0aW9uTm9kZVJlYWRlZENvbG9yIiwiX21haWxTZWN0aW9uTm9kZVJlYWRlZENvbG9yIiwiY29sb3IiLCJzeXNOYW1lIiwib25Mb2FkIiwic2VsZiIsIm9uIiwicmVxdWlyZSIsImNsb3NlU3lzdGVtIiwic2V0dXBEYXRhIiwic2V0dXBVSSIsInNldHVwVGFnU2VjdGlvbiIsInRleHRDb25maWciLCJpbmRleCIsIm9uZVRhZyIsInRhZ05hbWUiLCJ0YWdOYW1lVGV4dElkIiwiZ2V0VGV4dEJ5SWRBbmRMYW5ndWFnZVR5cGUiLCJub2RlIiwiZ2V0Q29tcG9uZW50IiwiTGFiZWwiLCJzdHJpbmciLCJfZm9yY2VVcGRhdGVSZW5kZXJEYXRhIiwiYmluZEZ1bmN0aW9uIiwiZ2l2ZW5Ob2RlIiwiZ2l2ZW5UYWciLCJyZWRQb2ludFNob3dDb25kaXRpb24iLCJtYWlscyIsInBsYXllckRhdGEiLCJ1blJlYWROdW0iLCJrZXkiLCJvbmVNYWlsIiwidGFnIiwic3RhdHVzIiwibmFtZSIsInRhZ01haWxzIiwibWFpbElkc0FycnkiLCJPYmplY3QiLCJrZXlzIiwiZGVzdHJveUFsbENoaWxkcmVuIiwibGVuZ3RoIiwiYWN0aXZlIiwiaGVpZ2h0Iiwic29ydEZ1bmN0aW9uIiwibWFpbElkMSIsIm1haWxJZDIiLCJtYWlsMSIsIm1haWwyIiwidGltZVN0YW1wMSIsInRpbWVTdGFtcCIsInRpbWVTdGFtcDIiLCJzb3J0IiwibWFpbENvbmZpZyIsInRvdGFsSGVpZ2h0IiwibWFpbElkIiwibWFpbCIsInVuUmVhZEljb25Ob2RlIiwiZ2V0Q2hpbGRCeU5hbWUiLCJyZWFkZWRJY29uTm9kZSIsInRpdGxlTGFiZWxOb2RlIiwic2VwZXJhdGVMaW5lTm9kZSIsInRpdGxlU3RyIiwidGl0bGVUZXh0SWQiLCJub2RlV2lkdGgiLCJ3aWR0aCIsIm5vZGVIZWlnaHQiLCJ0b1N0cmluZyIsImdpdmVuTWFpbElkIiwib3Blbk9uZU1haWwiLCJtaW5IZWlnaHQiLCJ1blJlYWRNYWlsTnVtIiwic3RyIiwibWFpbENvbmRpdGlvbkluZGV4IiwibWFpbFN5c0NvbmZpZyIsImVsZW1lbnQiLCJjb25kaXRpb25zIiwiY29uZGl0aW9uVHlwZSIsImxldmVsIiwiY29uZGl0aW9uUGFyYSIsInJlc3VsdCIsIl9nZXRTZWN0aW9uQW5kTGV2ZWxOdW1PZlNlY3Rpb24iLCJzZWN0aW9uIiwibGV2ZWxOdW1PZlNlY3Rpb24iLCJnZXRGb3JtYXRlZFN0cmluZyIsImxldmVsSWQiLCJtaW5TdGVwTnVtIiwiZ2l2ZW5MZXZlbElkIiwic2VjdGlvbkNvbmZpZyIsImxldmVscyIsImluZGV4T2YiLCJzdGF1dHMiLCJfaW5zZXJ0T25lTWFpbCIsIm1nciIsInJlbGF0ZWRNYWlsU2VjdGlvbk5vZGUiLCJyZWxhdGVkTWFpbFN5c01nciIsInNldE9uZU1haWxSZWFkZWQiLCJpbmRleE9mT3B0aW9ucyIsImNvbXBsZXRlIiwibG9nIiwibmV0d29ya01nciIsIm1lc3NhZ2VPYmoiLCJtYWtlTWVzc2FnZU9iaiIsIm1lc3NhZ2UiLCJwbGF5ZXJJZCIsImlkIiwic2VsZWN0ZWRPcHRpb25JbmRleCIsInN1Y2Nlc3NDYWxsQmFjayIsInhociIsInJlc3BvbnNlIiwicmVzcG9uc2VUZXh0IiwiSlNPTiIsInBhcnNlIiwidHlwZSIsInNlbmRNZXNzYWdlQnlNc2dPYmoiLCJkYXRhTW9uaXRvcmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUdMQyxFQUFBQSxVQUFVLEVBQUU7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsSUFBQUEsSUFBSSxFQUFFSixFQUFFLENBQUNLLElBaEJEO0FBaUJSQyxJQUFBQSxlQUFlLEVBQUVOLEVBQUUsQ0FBQ0ssSUFqQlo7QUFrQlJFLElBQUFBLFVBQVUsRUFBRVAsRUFBRSxDQUFDSyxJQWxCUDtBQW1CUkcsSUFBQUEsV0FBVyxFQUFFUixFQUFFLENBQUNLLElBbkJSO0FBb0JSSSxJQUFBQSxXQUFXLEVBQUVULEVBQUUsQ0FBQ0ssSUFwQlI7QUFxQlJLLElBQUFBLHNCQUFzQixFQUFFVixFQUFFLENBQUNLLElBckJuQjtBQXNCUk0sSUFBQUEseUJBQXlCLEVBQUVYLEVBQUUsQ0FBQ0ssSUF0QnRCO0FBd0JSTyxJQUFBQSxpQkFBaUIsRUFBRVosRUFBRSxDQUFDYSxNQXhCZDtBQXlCUkMsSUFBQUEsZ0JBQWdCLEVBQUVkLEVBQUUsQ0FBQ2EsTUF6QmI7QUEwQlJFLElBQUFBLHVCQUF1QixFQUFFZixFQUFFLENBQUNhLE1BMUJwQjtBQTJCUkcsSUFBQUEsZUFBZSxFQUFFaEIsRUFBRSxDQUFDYSxNQTNCWjtBQTRCUkksSUFBQUEsSUFBSSxFQUFFLElBNUJFO0FBNkJSQyxJQUFBQSxVQUFVLEVBQUU7QUFDUixpQkFBUztBQURELEtBN0JKO0FBaUNSQyxJQUFBQSxnQkFBZ0IsRUFBRTtBQUNkLGlCQUFTO0FBREssS0FqQ1Y7QUFxQ1JDLElBQUFBLFdBQVcsRUFBRTtBQUNUQyxNQUFBQSxHQURTLGlCQUNIO0FBQ0YsZUFBTyxLQUFLQyxZQUFaO0FBQ0gsT0FIUTtBQUlUQyxNQUFBQSxHQUpTLGVBSUxDLEtBSkssRUFJRTtBQUNQLGFBQUtGLFlBQUwsR0FBb0JFLEtBQXBCO0FBQ0EsYUFBS0MsZ0JBQUw7QUFDQSxhQUFLQyxnQkFBTDtBQUNIO0FBUlEsS0FyQ0w7QUErQ1JDLElBQUFBLGVBQWUsRUFBRTtBQUNiTixNQUFBQSxHQURhLGlCQUNSO0FBQ0QsZUFBTyxLQUFLTyxnQkFBWjtBQUNILE9BSFk7QUFJYkwsTUFBQUEsR0FKYSxlQUlUQyxLQUpTLEVBSUY7QUFDUCxhQUFLSSxnQkFBTCxHQUF3QkosS0FBeEI7O0FBQ0EsWUFBSSxLQUFLSyxpQkFBTCxDQUF1QkMsTUFBdkIsSUFBaUMsSUFBckMsRUFBMkM7QUFDdkMsZUFBS0QsaUJBQUwsQ0FBdUJFLENBQXZCLEdBQTJCLEtBQUtKLGVBQUwsQ0FBcUJJLENBQWhEO0FBQ0EsZUFBS0YsaUJBQUwsQ0FBdUJHLENBQXZCLEdBQTJCLEtBQUtMLGVBQUwsQ0FBcUJLLENBQWhEO0FBQ0EsZUFBS3pCLFVBQUwsQ0FBZ0IwQixRQUFoQixDQUF5QixLQUFLSixpQkFBOUIsRUFBZ0QsQ0FBaEQ7QUFDSCxTQUpELE1BS0s7QUFDRCxjQUFJSyxPQUFPLEdBQUcsS0FBS1AsZUFBTCxDQUFxQkssQ0FBbkM7QUFDQWhDLFVBQUFBLEVBQUUsQ0FBQ21DLEtBQUgsQ0FBUyxLQUFLTixpQkFBZCxFQUNLTyxFQURMLENBQ1EsR0FEUixFQUNZO0FBQUNKLFlBQUFBLENBQUMsRUFBRUU7QUFBSixXQURaLEVBRUtHLEtBRkw7QUFHSDtBQUNKO0FBakJZLEtBL0NUO0FBa0VSUixJQUFBQSxpQkFBaUIsRUFBRTtBQUNmUixNQUFBQSxHQURlLGlCQUNUO0FBQ0YsWUFBSSxLQUFLaUIsa0JBQUwsSUFBMkIsSUFBL0IsRUFBcUM7QUFDakMsY0FBSUMsTUFBTSxHQUFHdkMsRUFBRSxDQUFDd0MsV0FBSCxDQUFlLEtBQUt6Qix1QkFBcEIsQ0FBYjtBQUNBLGVBQUt1QixrQkFBTCxHQUEwQkMsTUFBMUI7QUFDSDs7QUFDRCxlQUFPLEtBQUtELGtCQUFaO0FBQ0gsT0FQYztBQVFmZixNQUFBQSxHQVJlLGVBUVhDLEtBUlcsRUFRSjtBQUNQLGFBQUtjLGtCQUFMLEdBQTBCZCxLQUExQjtBQUNIO0FBVmMsS0FsRVg7QUE4RVJpQixJQUFBQSxnQkFBZ0IsRUFBRSxDQUFDLE1BOUVYO0FBK0VSQyxJQUFBQSxhQUFhLEVBQUUsR0EvRVA7QUFrRlJDLElBQUFBLHdCQUF3QixFQUFFM0MsRUFBRSxDQUFDNEMsRUFBSCxDQUFNLENBQUMsT0FBUCxFQUFlLE9BQWYsQ0FsRmxCO0FBbUZSQyxJQUFBQSxrQkFBa0IsRUFBRSxFQW5GWjtBQW9GUkMsSUFBQUEsMEJBQTBCLEVBQUU7QUFDeEJ6QixNQUFBQSxHQUR3QixpQkFDbEI7QUFDRixZQUFJLEtBQUswQiwyQkFBTCxJQUFvQyxJQUF4QyxFQUE4QztBQUMxQyxlQUFLQSwyQkFBTCxHQUFtQy9DLEVBQUUsQ0FBQ2dELEtBQUgsQ0FBUyxHQUFULEVBQWEsR0FBYixFQUFpQixHQUFqQixDQUFuQztBQUNIOztBQUNELGVBQU8sS0FBS0QsMkJBQVo7QUFDSCxPQU51QjtBQU94QnhCLE1BQUFBLEdBUHdCLGVBT3BCQyxLQVBvQixFQU9iO0FBQ1AsYUFBS3VCLDJCQUFMLEdBQW1DdkIsS0FBbkM7QUFDSDtBQVR1QixLQXBGcEI7QUFnR1J5QixJQUFBQSxPQUFPLEVBQUU7QUFoR0QsR0FIUDtBQXVHTDtBQUVBQyxFQUFBQSxNQXpHSyxvQkF5R0s7QUFDTixRQUFJQyxJQUFJLEdBQUcsSUFBWDtBQUNBLFNBQUs3QyxlQUFMLENBQXFCOEMsRUFBckIsQ0FBd0IsT0FBeEIsRUFBZ0MsWUFBVTtBQUN0Q0MsTUFBQUEsT0FBTyxDQUFDLFlBQUQsQ0FBUCxDQUFzQkMsV0FBdEIsQ0FBa0NILElBQUksQ0FBQ0YsT0FBdkM7QUFDSCxLQUZEO0FBR0EsU0FBS00sU0FBTDtBQUNBLFNBQUtDLE9BQUw7QUFDSCxHQWhISTtBQWtITG5CLEVBQUFBLEtBbEhLLG1CQWtISSxDQUVSLENBcEhJO0FBc0hMb0IsRUFBQUEsZUF0SEssNkJBc0hhO0FBQ2QsUUFBSUMsVUFBVSxHQUFHTCxPQUFPLENBQUMsWUFBRCxDQUF4Qjs7QUFDQSxTQUFLLElBQUlNLEtBQVQsSUFBa0IsS0FBSzFDLElBQXZCLEVBQTZCO0FBQ3pCLFVBQUkyQyxNQUFNLEdBQUcsS0FBSzNDLElBQUwsQ0FBVTBDLEtBQVYsQ0FBYjs7QUFDQSxVQUFJRSxPQUFPLEdBQUdSLE9BQU8sQ0FBQyxlQUFELENBQVAsQ0FBeUJPLE1BQXpCLEVBQWlDRSxhQUEvQzs7QUFDQUQsTUFBQUEsT0FBTyxHQUFHSCxVQUFVLENBQUNLLDBCQUFYLENBQXNDRixPQUF0QyxDQUFWO0FBQ0EsVUFBSUcsSUFBSSxHQUFHaEUsRUFBRSxDQUFDd0MsV0FBSCxDQUFlLEtBQUsxQixnQkFBcEIsQ0FBWDtBQUNBa0QsTUFBQUEsSUFBSSxDQUFDQyxZQUFMLENBQWtCakUsRUFBRSxDQUFDa0UsS0FBckIsRUFBNEJDLE1BQTVCLEdBQXFDTixPQUFyQzs7QUFDQUcsTUFBQUEsSUFBSSxDQUFDQyxZQUFMLENBQWtCakUsRUFBRSxDQUFDa0UsS0FBckIsRUFBNEJFLHNCQUE1Qjs7QUFDQSxVQUFJakIsSUFBSSxHQUFHLElBQVg7O0FBQ0EsVUFBSWtCLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVNDLFNBQVQsRUFBb0JDLFFBQXBCLEVBQThCO0FBQzdDRCxRQUFBQSxTQUFTLENBQUNsQixFQUFWLENBQWEsT0FBYixFQUFxQixZQUFVO0FBQzNCLGNBQUlELElBQUksQ0FBQy9CLFdBQUwsSUFBb0JtRCxRQUF4QixFQUFrQztBQUM5QnBCLFlBQUFBLElBQUksQ0FBQy9CLFdBQUwsR0FBbUJtRCxRQUFuQjtBQUNIOztBQUNELGNBQUlwQixJQUFJLENBQUN4QixlQUFMLElBQXdCMkMsU0FBNUIsRUFBdUM7QUFDbkNuQixZQUFBQSxJQUFJLENBQUN4QixlQUFMLEdBQXVCMkMsU0FBdkI7QUFDSDtBQUNKLFNBUEQ7O0FBUUFBLFFBQUFBLFNBQVMsQ0FBQ0wsWUFBVixDQUF1QixhQUF2QixFQUFzQ08scUJBQXRDLEdBQThELFlBQVU7QUFDcEUsY0FBSUMsS0FBSyxHQUFHcEIsT0FBTyxDQUFDLFNBQUQsQ0FBUCxDQUFtQnFCLFVBQW5CLENBQThCRCxLQUExQzs7QUFDQSxjQUFJRSxTQUFTLEdBQUcsQ0FBaEI7O0FBQ0EsZUFBSyxJQUFJQyxHQUFULElBQWdCSCxLQUFoQixFQUF1QjtBQUNuQixnQkFBSUksT0FBTyxHQUFHSixLQUFLLENBQUNHLEdBQUQsQ0FBbkI7O0FBQ0EsZ0JBQUlDLE9BQU8sQ0FBQ0MsR0FBUixJQUFlUCxRQUFmLElBQTJCTSxPQUFPLENBQUNFLE1BQVIsSUFBa0IsQ0FBakQsRUFBb0Q7QUFDaERKLGNBQUFBLFNBQVMsSUFBSSxDQUFiO0FBQ0g7QUFDSjs7QUFDRCxjQUFJQSxTQUFTLEdBQUcsQ0FBaEIsRUFBbUI7QUFDZixtQkFBTyxJQUFQO0FBQ0gsV0FGRCxNQUdLO0FBQ0QsbUJBQU8sS0FBUDtBQUNIO0FBQ0osU0FmRDtBQWdCSCxPQXpCRDs7QUEwQkFOLE1BQUFBLFlBQVksQ0FBQ0wsSUFBRCxFQUFNSixNQUFOLENBQVo7QUFFQUksTUFBQUEsSUFBSSxDQUFDaEMsQ0FBTCxHQUFTLEtBQUtTLGdCQUFMLEdBQXdCa0IsS0FBSyxHQUFHLEtBQUtqQixhQUE5QztBQUNBc0IsTUFBQUEsSUFBSSxDQUFDZ0IsSUFBTCxHQUFZcEIsTUFBWjtBQUNBLFdBQUtyRCxVQUFMLENBQWdCMEIsUUFBaEIsQ0FBeUIrQixJQUF6QixFQUE4QixDQUE5Qjs7QUFDQSxVQUFJTCxLQUFLLElBQUksQ0FBYixFQUFnQjtBQUNaLGFBQUt2QyxXQUFMLEdBQW1Cd0MsTUFBbkI7QUFDQSxhQUFLakMsZUFBTCxHQUF1QnFDLElBQXZCO0FBQ0g7QUFDSjtBQUNKLEdBcEtJO0FBc0tMdkMsRUFBQUEsZ0JBdEtLLDhCQXNLYztBQUNmLFFBQUlpQyxVQUFVLEdBQUdMLE9BQU8sQ0FBQyxZQUFELENBQXhCOztBQUNBLFFBQUk0QixRQUFRLEdBQUcsS0FBSy9ELFVBQUwsQ0FBZ0IsS0FBS0UsV0FBckIsQ0FBZjtBQUNBLFFBQUk4RCxXQUFXLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxRQUFaLENBQWxCO0FBQ0EsU0FBS3ZFLHNCQUFMLENBQTRCMkUsa0JBQTVCOztBQUNBLFFBQUlILFdBQVcsQ0FBQ0ksTUFBWixJQUFzQixDQUExQixFQUE2QjtBQUN6QixXQUFLM0UseUJBQUwsQ0FBK0I0RSxNQUEvQixHQUF3QyxJQUF4QztBQUNBLFdBQUs1RSx5QkFBTCxDQUErQnNELFlBQS9CLENBQTRDakUsRUFBRSxDQUFDa0UsS0FBL0MsRUFBc0RDLE1BQXRELEdBQStEVCxVQUFVLENBQUNLLDBCQUFYLENBQXNDLEdBQXRDLENBQS9EO0FBQ0EsV0FBS3JELHNCQUFMLENBQTRCOEUsTUFBNUIsR0FBcUMsQ0FBckM7QUFDQTtBQUNIOztBQUVELFNBQUs3RSx5QkFBTCxDQUErQjRFLE1BQS9CLEdBQXdDLEtBQXhDO0FBQ0EsUUFBSXBDLElBQUksR0FBRyxJQUFYOztBQUNBLFFBQUlzQyxZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFTQyxPQUFULEVBQWtCQyxPQUFsQixFQUEyQjtBQUMxQyxVQUFJQyxLQUFLLEdBQUd6QyxJQUFJLENBQUNqQyxVQUFMLENBQWdCaUMsSUFBSSxDQUFDL0IsV0FBckIsRUFBa0NzRSxPQUFsQyxDQUFaO0FBQ0EsVUFBSUcsS0FBSyxHQUFHMUMsSUFBSSxDQUFDakMsVUFBTCxDQUFnQmlDLElBQUksQ0FBQy9CLFdBQXJCLEVBQWtDdUUsT0FBbEMsQ0FBWjs7QUFDQSxVQUFJQyxLQUFLLENBQUNiLE1BQU4sSUFBZ0IsQ0FBaEIsSUFBcUJjLEtBQUssQ0FBQ2QsTUFBTixJQUFnQixDQUF6QyxFQUE0QztBQUN4QyxlQUFPLENBQUMsQ0FBUjtBQUNILE9BRkQsTUFHSyxJQUFJYSxLQUFLLENBQUNiLE1BQU4sSUFBZ0IsQ0FBaEIsSUFBcUJjLEtBQUssQ0FBQ2QsTUFBTixJQUFnQixDQUF6QyxFQUE0QztBQUM3QyxlQUFPLENBQVA7QUFDSCxPQUZJLE1BR0E7QUFDRCxZQUFJZSxVQUFVLEdBQUdGLEtBQUssQ0FBQ0csU0FBdkI7QUFDQSxZQUFJQyxVQUFVLEdBQUdILEtBQUssQ0FBQ0UsU0FBdkI7O0FBQ0EsWUFBSUQsVUFBVSxHQUFHRSxVQUFqQixFQUE2QjtBQUN6QixpQkFBTyxDQUFQO0FBQ0gsU0FGRCxNQUdLO0FBQ0QsaUJBQU8sQ0FBQyxDQUFSO0FBQ0g7QUFDSjtBQUNKLEtBbkJEOztBQW9CQWQsSUFBQUEsV0FBVyxHQUFHQSxXQUFXLENBQUNlLElBQVosQ0FBaUJSLFlBQWpCLENBQWQ7O0FBQ0EsUUFBSVMsVUFBVSxHQUFHN0MsT0FBTyxDQUFDLFlBQUQsQ0FBeEI7O0FBQ0EsUUFBSThDLFdBQVcsR0FBRyxDQUFsQjs7QUFDQSxTQUFLLElBQUl4QyxLQUFULElBQWtCdUIsV0FBbEIsRUFBK0I7QUFDM0IsVUFBSWtCLE1BQU0sR0FBR2xCLFdBQVcsQ0FBQ3ZCLEtBQUQsQ0FBeEI7O0FBQ0EsVUFBSTBDLElBQUksR0FBR2hELE9BQU8sQ0FBQyxTQUFELENBQVAsQ0FBbUJxQixVQUFuQixDQUE4QkQsS0FBOUIsQ0FBb0MyQixNQUFwQyxDQUFYOztBQUNBLFVBQUlwQyxJQUFJLEdBQUdoRSxFQUFFLENBQUN3QyxXQUFILENBQWUsS0FBSzVCLGlCQUFwQixDQUFYO0FBQ0EsVUFBSTBGLGNBQWMsR0FBR3RDLElBQUksQ0FBQ3VDLGNBQUwsQ0FBb0IsYUFBcEIsQ0FBckI7QUFDQSxVQUFJQyxjQUFjLEdBQUd4QyxJQUFJLENBQUN1QyxjQUFMLENBQW9CLGFBQXBCLENBQXJCO0FBQ0EsVUFBSUUsY0FBYyxHQUFHekMsSUFBSSxDQUFDdUMsY0FBTCxDQUFvQixZQUFwQixDQUFyQjtBQUNBLFVBQUlHLGdCQUFnQixHQUFHMUMsSUFBSSxDQUFDdUMsY0FBTCxDQUFvQixjQUFwQixDQUF2Qjs7QUFFQSxVQUFJRixJQUFJLENBQUN0QixNQUFMLElBQWUsQ0FBbkIsRUFBc0I7QUFDbEJ1QixRQUFBQSxjQUFjLENBQUNmLE1BQWYsR0FBd0IsS0FBeEI7QUFDQWlCLFFBQUFBLGNBQWMsQ0FBQ2pCLE1BQWYsR0FBd0IsSUFBeEI7QUFDQWtCLFFBQUFBLGNBQWMsQ0FBQ3pELEtBQWYsR0FBdUIsS0FBS0YsMEJBQTVCO0FBQ0g7O0FBQ0QsVUFBSTZELFFBQVEsR0FBR2pELFVBQVUsQ0FBQ0ssMEJBQVgsQ0FBc0NtQyxVQUFVLENBQUNFLE1BQUQsQ0FBVixDQUFtQlEsV0FBekQsQ0FBZjtBQUNBSCxNQUFBQSxjQUFjLENBQUN4QyxZQUFmLENBQTRCakUsRUFBRSxDQUFDa0UsS0FBL0IsRUFBc0NDLE1BQXRDLEdBQStDd0MsUUFBL0M7QUFDQUQsTUFBQUEsZ0JBQWdCLENBQUMxRSxDQUFqQixHQUFxQixDQUFDeUUsY0FBYyxDQUFDakIsTUFBckM7QUFDQXhCLE1BQUFBLElBQUksQ0FBQ2hDLENBQUwsR0FBUyxDQUFDbUUsV0FBVjtBQUNBLFVBQUlVLFNBQVMsR0FBR0osY0FBYyxDQUFDMUUsQ0FBZixHQUFtQjBFLGNBQWMsQ0FBQ0ssS0FBZixHQUF1QixDQUExQyxJQUErQ1IsY0FBYyxDQUFDdkUsQ0FBZixHQUFtQnVFLGNBQWMsQ0FBQ1EsS0FBZixHQUF1QixDQUF6RixDQUFoQjtBQUNBLFVBQUlDLFVBQVUsR0FBR04sY0FBYyxDQUFDakIsTUFBaEM7QUFDQXhCLE1BQUFBLElBQUksQ0FBQzhDLEtBQUwsR0FBYUQsU0FBYjtBQUNBN0MsTUFBQUEsSUFBSSxDQUFDd0IsTUFBTCxHQUFjdUIsVUFBZDtBQUNBL0MsTUFBQUEsSUFBSSxDQUFDZ0IsSUFBTCxHQUFZb0IsTUFBTSxDQUFDWSxRQUFQLEVBQVo7QUFDQWIsTUFBQUEsV0FBVyxHQUFHQSxXQUFXLEdBQUdNLGNBQWMsQ0FBQ2pCLE1BQTdCLEdBQXNDLENBQXBEOztBQUNBLFVBQUk3QixLQUFLLElBQUl1QixXQUFXLENBQUNJLE1BQVosR0FBcUIsQ0FBbEMsRUFBcUM7QUFDakNhLFFBQUFBLFdBQVcsSUFBSSxLQUFLdEQsa0JBQXBCO0FBQ0g7O0FBQ0QsVUFBSU0sSUFBSSxHQUFHLElBQVg7O0FBQ0EsVUFBSWtCLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVNDLFNBQVQsRUFBb0IyQyxXQUFwQixFQUFpQztBQUNoRDNDLFFBQUFBLFNBQVMsQ0FBQ2xCLEVBQVYsQ0FBYSxPQUFiLEVBQXFCLFlBQVU7QUFDM0JELFVBQUFBLElBQUksQ0FBQytELFdBQUwsQ0FBaUJELFdBQWpCLEVBQTZCM0MsU0FBN0I7QUFDSCxTQUZEO0FBR0gsT0FKRDs7QUFLQUQsTUFBQUEsWUFBWSxDQUFDTCxJQUFELEVBQU1vQyxNQUFOLENBQVo7QUFDQSxXQUFLMUYsc0JBQUwsQ0FBNEJ1QixRQUE1QixDQUFxQytCLElBQXJDO0FBQ0g7O0FBQ0QsUUFBSW1ELFNBQVMsR0FBRyxLQUFLekcsc0JBQUwsQ0FBNEI4RSxNQUE1Qzs7QUFDQSxRQUFJVyxXQUFXLEdBQUdnQixTQUFsQixFQUE2QjtBQUN6QixXQUFLekcsc0JBQUwsQ0FBNEI4RSxNQUE1QixHQUFxQ1csV0FBckM7QUFDSDtBQUNKLEdBblBJO0FBcVBMekUsRUFBQUEsZ0JBclBLLDhCQXFQYztBQUNmLFFBQUlnQyxVQUFVLEdBQUdMLE9BQU8sQ0FBQyxZQUFELENBQXhCOztBQUNBLFFBQUkrRCxhQUFhLEdBQUcsS0FBS2pHLGdCQUFMLENBQXNCLEtBQUtDLFdBQTNCLENBQXBCOztBQUNBLFFBQUlnRyxhQUFhLEdBQUcsQ0FBcEIsRUFBdUI7QUFDbkIsVUFBSUMsR0FBRyxHQUFHM0QsVUFBVSxDQUFDSywwQkFBWCxDQUFzQyxHQUF0QyxDQUFWO0FBQ0EsV0FBS3RELFdBQUwsQ0FBaUI4RixjQUFqQixDQUFnQyxXQUFoQyxFQUE2Q3RDLFlBQTdDLENBQTBEakUsRUFBRSxDQUFDa0UsS0FBN0QsRUFBb0VDLE1BQXBFLEdBQTZFa0QsR0FBN0U7QUFDQTtBQUNIOztBQUVELFFBQUlDLGtCQUFrQixHQUFHakUsT0FBTyxDQUFDLFNBQUQsQ0FBUCxDQUFtQnFCLFVBQW5CLENBQThCNEMsa0JBQXZEOztBQUNBLFFBQUkzRCxLQUFLLEdBQUcyRCxrQkFBa0IsQ0FBQyxLQUFLbEcsV0FBTixDQUE5Qjs7QUFDQSxRQUFJdUMsS0FBSyxJQUFJLENBQUMsQ0FBZCxFQUFpQjtBQUNiLFdBQUtsRCxXQUFMLENBQWlCOEYsY0FBakIsQ0FBZ0MsV0FBaEMsRUFBNkN0QyxZQUE3QyxDQUEwRGpFLEVBQUUsQ0FBQ2tFLEtBQTdELEVBQW9FQyxNQUFwRSxHQUE2RVQsVUFBVSxDQUFDSywwQkFBWCxDQUFzQyxHQUF0QyxDQUE3RTtBQUNBO0FBQ0g7O0FBQ0QsUUFBSXdELGFBQWEsR0FBR2xFLE9BQU8sQ0FBQyxlQUFELENBQTNCOztBQUNBLFFBQUltRSxPQUFPLEdBQUdELGFBQWEsQ0FBQyxLQUFLbkcsV0FBTixDQUFiLENBQWdDcUcsVUFBaEMsQ0FBMkM5RCxLQUEzQyxDQUFkOztBQUVBLFFBQUk2RCxPQUFPLENBQUNFLGFBQVIsSUFBeUIsQ0FBN0IsRUFBZ0M7QUFDNUIsVUFBSUMsS0FBSyxHQUFHSCxPQUFPLENBQUNJLGFBQXBCOztBQUNBLFVBQUlDLE1BQU0sR0FBRyxLQUFLQywrQkFBTCxDQUFxQ0gsS0FBckMsQ0FBYjs7QUFDQSxVQUFJRSxNQUFNLElBQUksS0FBZCxFQUFxQjtBQUNqQixZQUFJRSxPQUFPLEdBQUdGLE1BQU0sQ0FBQyxDQUFELENBQXBCO0FBQ0EsWUFBSUcsaUJBQWlCLEdBQUdILE1BQU0sQ0FBQyxDQUFELENBQTlCLENBRmlCLENBR2pCO0FBQ0E7QUFDQTs7QUFDQSxZQUFJUixHQUFHLEdBQUczRCxVQUFVLENBQUN1RSxpQkFBWCxDQUE2QixHQUE3QixFQUFpQyxDQUFDRixPQUFPLENBQUNmLFFBQVIsRUFBRCxFQUFvQmdCLGlCQUFpQixDQUFDaEIsUUFBbEIsRUFBcEIsQ0FBakMsQ0FBVjtBQUNBLGFBQUt2RyxXQUFMLENBQWlCOEYsY0FBakIsQ0FBZ0MsV0FBaEMsRUFBNkN0QyxZQUE3QyxDQUEwRGpFLEVBQUUsQ0FBQ2tFLEtBQTdELEVBQW9FQyxNQUFwRSxHQUE2RWtELEdBQTdFO0FBQ0g7QUFDSixLQVpELE1BY0ssSUFBSUcsT0FBTyxDQUFDRSxhQUFSLElBQXlCLENBQTdCLEVBQWdDO0FBQ2pDO0FBQ0EsVUFBSVEsT0FBTyxHQUFHVixPQUFPLENBQUNJLGFBQVIsQ0FBc0JNLE9BQXBDO0FBQ0EsVUFBSUMsVUFBVSxHQUFHWCxPQUFPLENBQUNJLGFBQVIsQ0FBc0JPLFVBQXZDOztBQUVBLFVBQUlOLE1BQU0sR0FBRyxLQUFLQywrQkFBTCxDQUFxQ0ksT0FBckMsQ0FBYjs7QUFDQSxVQUFJTCxNQUFNLElBQUksS0FBZCxFQUFxQjtBQUNqQixZQUFJRSxPQUFPLEdBQUdGLE1BQU0sQ0FBQyxDQUFELENBQXBCO0FBQ0EsWUFBSUYsS0FBSyxHQUFHRSxNQUFNLENBQUMsQ0FBRCxDQUFsQixDQUZpQixDQUlqQjtBQUNBOztBQUNBLFlBQUlSLEdBQUcsR0FBRzNELFVBQVUsQ0FBQ3VFLGlCQUFYLENBQTZCLEdBQTdCLEVBQWlDLENBQUNGLE9BQU8sQ0FBQ2YsUUFBUixFQUFELEVBQXFCVyxLQUFLLENBQUNYLFFBQU4sRUFBckIsRUFBdUNtQixVQUFVLENBQUNuQixRQUFYLEVBQXZDLENBQWpDLENBQVY7QUFDQSxhQUFLdkcsV0FBTCxDQUFpQjhGLGNBQWpCLENBQWdDLFdBQWhDLEVBQTZDdEMsWUFBN0MsQ0FBMERqRSxFQUFFLENBQUNrRSxLQUE3RCxFQUFvRUMsTUFBcEUsR0FBNkVrRCxHQUE3RTtBQUNIO0FBQ0o7QUFDSixHQXJTSTtBQXNTTFMsRUFBQUEsK0JBdFNLLDJDQXNTMkJNLFlBdFMzQixFQXNTeUM7QUFDMUMsUUFBSUwsT0FBTyxHQUFHLElBQWQ7QUFDQSxRQUFJQyxpQkFBaUIsR0FBRyxJQUF4Qjs7QUFDQSxRQUFJSyxhQUFhLEdBQUdoRixPQUFPLENBQUMsZUFBRCxDQUEzQjs7QUFDQSxTQUFLLElBQUl1QixHQUFULElBQWdCeUQsYUFBaEIsRUFBK0I7QUFDM0IsVUFBSUMsTUFBTSxHQUFHRCxhQUFhLENBQUN6RCxHQUFELENBQWIsQ0FBbUIwRCxNQUFoQztBQUNBLFVBQUkzRSxLQUFLLEdBQUcyRSxNQUFNLENBQUNDLE9BQVAsQ0FBZUgsWUFBZixDQUFaOztBQUNBLFVBQUl6RSxLQUFLLElBQUksQ0FBQyxDQUFkLEVBQWlCO0FBQ2JvRSxRQUFBQSxPQUFPLEdBQUduRCxHQUFWO0FBQ0FvRCxRQUFBQSxpQkFBaUIsR0FBR3JFLEtBQUssR0FBRyxDQUE1QjtBQUNBLGVBQU8sQ0FBQ29FLE9BQUQsRUFBVUMsaUJBQVYsQ0FBUDtBQUNIO0FBQ0o7O0FBQ0QsV0FBTyxLQUFQO0FBQ0gsR0FwVEk7QUFzVEx6RSxFQUFBQSxTQXRUSyx1QkFzVE87QUFDUixRQUFJa0IsS0FBSyxHQUFHcEIsT0FBTyxDQUFDLFNBQUQsQ0FBUCxDQUFtQnFCLFVBQW5CLENBQThCRCxLQUExQzs7QUFDQSxTQUFLeEQsSUFBTCxHQUFZa0UsTUFBTSxDQUFDQyxJQUFQLENBQVkvQixPQUFPLENBQUMsZUFBRCxDQUFuQixDQUFaOztBQUNBLFNBQUssSUFBSU0sS0FBVCxJQUFrQixLQUFLMUMsSUFBdkIsRUFBNkI7QUFDekIsVUFBSTJDLE1BQU0sR0FBRyxLQUFLM0MsSUFBTCxDQUFVMEMsS0FBVixDQUFiO0FBQ0EsV0FBS3pDLFVBQUwsQ0FBZ0IwQyxNQUFoQixJQUEwQixFQUExQjtBQUNBLFdBQUt6QyxnQkFBTCxDQUFzQnlDLE1BQXRCLElBQWdDLENBQWhDOztBQUNBLFdBQUssSUFBSWdCLEdBQVQsSUFBZ0JILEtBQWhCLEVBQXVCO0FBQ25CLFlBQUlJLE9BQU8sR0FBR0osS0FBSyxDQUFDRyxHQUFELENBQW5COztBQUNBLFlBQUlDLE9BQU8sQ0FBQ0MsR0FBUixJQUFlbEIsTUFBbkIsRUFBMkI7QUFDdkIsZUFBSzFDLFVBQUwsQ0FBZ0IwQyxNQUFoQixFQUF3QmdCLEdBQXhCLElBQStCQyxPQUEvQjs7QUFDQSxjQUFJQSxPQUFPLENBQUMyRCxNQUFSLElBQWtCLENBQXRCLEVBQXlCO0FBQ3JCLGlCQUFLckgsZ0JBQUwsQ0FBc0J5QyxNQUF0QixLQUFpQyxDQUFqQztBQUNIO0FBQ0o7QUFDSjtBQUNKO0FBQ0osR0F2VUk7QUF5VUxKLEVBQUFBLE9BelVLLHFCQXlVSztBQUNOLFNBQUtDLGVBQUw7QUFDQSxTQUFLaEMsZ0JBQUw7QUFDQSxTQUFLQyxnQkFBTDtBQUNILEdBN1VJO0FBK1VMK0csRUFBQUEsY0EvVUssMEJBK1VVckMsTUEvVVYsRUErVWtCQyxJQS9VbEIsRUErVXVCO0FBQ3hCLFFBQUlBLElBQUksQ0FBQ3ZCLEdBQUwsSUFBWSxLQUFLMUQsV0FBckIsRUFBa0M7QUFDOUIsV0FBS0ssZ0JBQUw7QUFDQSxXQUFLQyxnQkFBTDtBQUNIO0FBQ0osR0FwVkk7QUFzVkx3RixFQUFBQSxXQXRWSyx1QkFzVk9ELFdBdFZQLEVBc1ZtQjNDLFNBdFZuQixFQXNWOEI7QUFDL0IsUUFBSU4sSUFBSSxHQUFHaEUsRUFBRSxDQUFDd0MsV0FBSCxDQUFlLEtBQUt4QixlQUFwQixDQUFYO0FBQ0EsUUFBSTBILEdBQUcsR0FBRzFFLElBQUksQ0FBQ0MsWUFBTCxDQUFrQixnQkFBbEIsQ0FBVjtBQUNBeUUsSUFBQUEsR0FBRyxDQUFDdEMsTUFBSixHQUFhYSxXQUFiO0FBQ0F5QixJQUFBQSxHQUFHLENBQUNDLHNCQUFKLEdBQTZCckUsU0FBN0I7QUFDQW9FLElBQUFBLEdBQUcsQ0FBQ0UsaUJBQUosR0FBd0IsSUFBeEI7QUFDQSxTQUFLNUUsSUFBTCxDQUFVL0IsUUFBVixDQUFtQitCLElBQW5CO0FBQ0gsR0E3Vkk7QUE4Vkw2RSxFQUFBQSxnQkE5VkssNEJBOFZZekMsTUE5VlosRUE4Vm1CMEMsY0E5Vm5CLEVBOFZtRjtBQUFBLFFBQWhEQyxRQUFnRCx1RUFBckMsWUFBVSxDQUFFLENBQXlCO0FBQUEsUUFBeEJKLHNCQUF3Qjs7QUFDcEYsUUFBSXRDLElBQUksR0FBR2hELE9BQU8sQ0FBQyxTQUFELENBQVAsQ0FBbUJxQixVQUFuQixDQUE4QkQsS0FBOUIsQ0FBb0MyQixNQUFwQyxDQUFYOztBQUNBLFFBQUlDLElBQUksQ0FBQ3RCLE1BQUwsSUFBZSxDQUFuQixFQUFzQjtBQUNsQi9FLE1BQUFBLEVBQUUsQ0FBQ2dKLEdBQUgsQ0FBTyw2QkFBUDtBQUNBO0FBQ0g7O0FBQ0QsUUFBSUMsVUFBVSxHQUFHNUYsT0FBTyxDQUFDLFlBQUQsQ0FBeEI7O0FBQ0EsUUFBSTZGLFVBQVUsR0FBR0QsVUFBVSxDQUFDRSxjQUFYLENBQTBCLFlBQTFCLEVBQXVDLHFCQUF2QyxDQUFqQjtBQUNBRCxJQUFBQSxVQUFVLENBQUNFLE9BQVgsQ0FBbUJDLFFBQW5CLEdBQThCaEcsT0FBTyxDQUFDLFNBQUQsQ0FBUCxDQUFtQnFCLFVBQW5CLENBQThCNEUsRUFBNUQ7QUFDQUosSUFBQUEsVUFBVSxDQUFDRSxPQUFYLENBQW1CaEQsTUFBbkIsR0FBNEJBLE1BQTVCO0FBQ0E4QyxJQUFBQSxVQUFVLENBQUNFLE9BQVgsQ0FBbUJHLG1CQUFuQixHQUF5Q1QsY0FBekM7QUFDQSxRQUFJM0YsSUFBSSxHQUFHLElBQVg7O0FBQ0ErRixJQUFBQSxVQUFVLENBQUNNLGVBQVgsR0FBNkIsVUFBU0MsR0FBVCxFQUFjO0FBQ3ZDLFVBQUlDLFFBQVEsR0FBR0QsR0FBRyxDQUFDRSxZQUFuQjtBQUNBRCxNQUFBQSxRQUFRLEdBQUdFLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxRQUFYLENBQVg7O0FBQ0EsVUFBSUEsUUFBUSxDQUFDSSxJQUFULElBQWlCLFNBQXJCLEVBQWdDO0FBQzVCekQsUUFBQUEsSUFBSSxDQUFDdEIsTUFBTCxHQUFjLENBQWQ7QUFDQXNCLFFBQUFBLElBQUksQ0FBQ2tELG1CQUFMLEdBQTJCVCxjQUEzQjtBQUNBSCxRQUFBQSxzQkFBc0IsQ0FBQ3BDLGNBQXZCLENBQXNDLGFBQXRDLEVBQXFEaEIsTUFBckQsR0FBOEQsSUFBOUQ7QUFDQW9ELFFBQUFBLHNCQUFzQixDQUFDcEMsY0FBdkIsQ0FBc0MsYUFBdEMsRUFBcURoQixNQUFyRCxHQUE4RCxLQUE5RDtBQUNBb0QsUUFBQUEsc0JBQXNCLENBQUNwQyxjQUF2QixDQUFzQyxZQUF0QyxFQUFvRHZELEtBQXBELEdBQTRERyxJQUFJLENBQUNMLDBCQUFqRTtBQUNBSyxRQUFBQSxJQUFJLENBQUNoQyxnQkFBTCxDQUFzQmtGLElBQUksQ0FBQ3ZCLEdBQTNCLEtBQW1DLENBQW5DLENBTjRCLENBTzVCOztBQUNBM0IsUUFBQUEsSUFBSSxDQUFDekIsZ0JBQUw7QUFDQXFILFFBQUFBLFFBQVE7QUFDWDtBQUNKLEtBZEQ7O0FBZUFFLElBQUFBLFVBQVUsQ0FBQ2MsbUJBQVgsQ0FBK0JiLFVBQS9CO0FBQ0gsR0ExWEk7QUE0WExjLEVBQUFBLGFBNVhLLHlCQTRYU3BGLEdBNVhULEVBNFhhcEQsS0E1WGIsRUE0WG9CO0FBQ3JCLFFBQUkwRSxVQUFVLEdBQUc3QyxPQUFPLENBQUMsWUFBRCxDQUF4Qjs7QUFDQSxRQUFJOEIsTUFBTSxDQUFDQyxJQUFQLENBQVljLFVBQVosRUFBd0JxQyxPQUF4QixDQUFnQzNELEdBQWhDLEtBQXdDLENBQUMsQ0FBN0MsRUFBZ0Q7QUFDNUMsV0FBS3JCLFNBQUw7O0FBQ0EsV0FBS2tGLGNBQUwsQ0FBb0I3RCxHQUFwQixFQUF3QnBELEtBQXhCO0FBQ0g7QUFDSixHQWxZSSxDQW1ZTDs7QUFuWUssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGVhcm4gY2MuQ2xhc3M6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvY2xhc3MuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHA6Ly9kb2NzLmNvY29zMmQteC5vcmcvY3JlYXRvci9tYW51YWwvZW4vc2NyaXB0aW5nL2NsYXNzLmh0bWxcbi8vIExlYXJuIEF0dHJpYnV0ZTpcbi8vICAtIFtDaGluZXNlXSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL3poL3NjcmlwdGluZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1sXG4vLyAgLSBbRW5nbGlzaF0gaHR0cDovL2RvY3MuY29jb3MyZC14Lm9yZy9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxuLy8gTGVhcm4gbGlmZS1jeWNsZSBjYWxsYmFja3M6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHBzOi8vd3d3LmNvY29zMmQteC5vcmcvZG9jcy9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxuXG5jYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICAvLyBmb286IHtcbiAgICAgICAgLy8gICAgIC8vIEFUVFJJQlVURVM6XG4gICAgICAgIC8vICAgICBkZWZhdWx0OiBudWxsLCAgICAgICAgLy8gVGhlIGRlZmF1bHQgdmFsdWUgd2lsbCBiZSB1c2VkIG9ubHkgd2hlbiB0aGUgY29tcG9uZW50IGF0dGFjaGluZ1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGEgbm9kZSBmb3IgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgLy8gICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lLCAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0eXBlb2YgZGVmYXVsdFxuICAgICAgICAvLyAgICAgc2VyaWFsaXphYmxlOiB0cnVlLCAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHRydWVcbiAgICAgICAgLy8gfSxcbiAgICAgICAgLy8gYmFyOiB7XG4gICAgICAgIC8vICAgICBnZXQgKCkge1xuICAgICAgICAvLyAgICAgICAgIHJldHVybiB0aGlzLl9iYXI7XG4gICAgICAgIC8vICAgICB9LFxuICAgICAgICAvLyAgICAgc2V0ICh2YWx1ZSkge1xuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2JhciA9IHZhbHVlO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9LFxuICAgICAgICB1aWJnOiBjYy5Ob2RlLFxuICAgICAgICBjbG9zZUJ1dHRvbk5vZGU6IGNjLk5vZGUsXG4gICAgICAgIHRhZ1NlY3Rpb246IGNjLk5vZGUsXG4gICAgICAgIG1haWxTZWN0aW9uOiBjYy5Ob2RlLFxuICAgICAgICBub3RpU2VjdGlvbjogY2MuTm9kZSxcbiAgICAgICAgbWFpbFNlY3Rpb25Db250ZW50Tm9kZTogY2MuTm9kZSxcbiAgICAgICAgbWFpbFNlY3Rpb25FbXB0eUxhYmVsTm9kZTogY2MuTm9kZSxcblxuICAgICAgICBtYWlsU2VjdGlvblByZWZhYjogY2MuUHJlZmFiLFxuICAgICAgICB0YWdTZWN0aW9uUHJlZmFiOiBjYy5QcmVmYWIsXG4gICAgICAgIHNlbGVjdGVkVGFnRWZmZWN0UHJlZmFiOiBjYy5QcmVmYWIsXG4gICAgICAgIG9wZW5kTWFpbFByZWZhYjogY2MuUHJlZmFiLFxuICAgICAgICB0YWdzOiBudWxsLFxuICAgICAgICBtYWlsc0J5VGFnOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiB7fVxuICAgICAgICB9LFxuXG4gICAgICAgIHVuUmVhZGVkTWFpbE51bXM6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHt9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2VsZWN0ZWRUYWc6IHtcbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWRUYWdcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0ZWRUYWcgPSB2YWx1ZVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBNYWlsU2VjdGlvbigpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR1cE5vdGlTZWN0aW9uKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0ZWRUYWdOb2RlOiB7XG4gICAgICAgICAgICBnZXQoKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWRUYWdOb2RlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0ZWRUYWdOb2RlID0gdmFsdWVcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFRhZ0VmZmVjdC5wYXJlbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkVGFnRWZmZWN0LnggPSB0aGlzLnNlbGVjdGVkVGFnTm9kZS54XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUYWdFZmZlY3QueSA9IHRoaXMuc2VsZWN0ZWRUYWdOb2RlLnlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YWdTZWN0aW9uLmFkZENoaWxkKHRoaXMuc2VsZWN0ZWRUYWdFZmZlY3QsMClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRZID0gdGhpcy5zZWxlY3RlZFRhZ05vZGUueVxuICAgICAgICAgICAgICAgICAgICBjYy50d2Vlbih0aGlzLnNlbGVjdGVkVGFnRWZmZWN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRvKDAuMSx7eTogdGFyZ2V0WX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3RhcnQoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0ZWRUYWdFZmZlY3Q6IHtcbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc2VsZWN0ZWRUYWdFZmZlY3QgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWZmZWN0ID0gY2MuaW5zdGFudGlhdGUodGhpcy5zZWxlY3RlZFRhZ0VmZmVjdFByZWZhYilcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0ZWRUYWdFZmZlY3QgPSBlZmZlY3RcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkVGFnRWZmZWN0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0ZWRUYWdFZmZlY3QgPSB2YWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0YWdTZWN0aW9uU3RhcnRZOiAtODYuMzQ1LFxuICAgICAgICB0YWdTZWN0aW9uRGlzOiAxMjAsXG5cblxuICAgICAgICBtYWlsU2VjdGlvblN0YXJ0UG9zaXRpb246IGNjLnYyKC0xMjUuNzg4LDM3My4zNTYpLFxuICAgICAgICBtYWlsU2VjdGlvbk5vZGVEaXM6IDMyLFxuICAgICAgICBtYWlsU2VjdGlvbk5vZGVSZWFkZWRDb2xvcjoge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tYWlsU2VjdGlvbk5vZGVSZWFkZWRDb2xvciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21haWxTZWN0aW9uTm9kZVJlYWRlZENvbG9yID0gY2MuY29sb3IoMTAyLDEwMiwxMDIpXG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbWFpbFNlY3Rpb25Ob2RlUmVhZGVkQ29sb3JcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYWlsU2VjdGlvbk5vZGVSZWFkZWRDb2xvciA9IHZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3lzTmFtZTogXCJtYWlsU3lzXCJcbiAgICAgICAgXG4gICAgfSxcblxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxuXG4gICAgb25Mb2FkICgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgICAgIHRoaXMuY2xvc2VCdXR0b25Ob2RlLm9uKFwiY2xpY2tcIixmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmVxdWlyZShcInN5c3RlbXNNZ3JcIikuY2xvc2VTeXN0ZW0oc2VsZi5zeXNOYW1lKVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLnNldHVwRGF0YSgpXG4gICAgICAgIHRoaXMuc2V0dXBVSSgpXG4gICAgfSxcblxuICAgIHN0YXJ0ICgpIHtcblxuICAgIH0sXG5cbiAgICBzZXR1cFRhZ1NlY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ZXh0Q29uZmlnID0gcmVxdWlyZShcInRleHRDb25maWdcIilcbiAgICAgICAgZm9yICh2YXIgaW5kZXggaW4gdGhpcy50YWdzKSB7XG4gICAgICAgICAgICB2YXIgb25lVGFnID0gdGhpcy50YWdzW2luZGV4XVxuICAgICAgICAgICAgdmFyIHRhZ05hbWUgPSByZXF1aXJlKFwibWFpbFN5c0NvbmZpZ1wiKVtvbmVUYWddLnRhZ05hbWVUZXh0SWRcbiAgICAgICAgICAgIHRhZ05hbWUgPSB0ZXh0Q29uZmlnLmdldFRleHRCeUlkQW5kTGFuZ3VhZ2VUeXBlKHRhZ05hbWUpXG4gICAgICAgICAgICB2YXIgbm9kZSA9IGNjLmluc3RhbnRpYXRlKHRoaXMudGFnU2VjdGlvblByZWZhYilcbiAgICAgICAgICAgIG5vZGUuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSB0YWdOYW1lXG4gICAgICAgICAgICBub2RlLmdldENvbXBvbmVudChjYy5MYWJlbCkuX2ZvcmNlVXBkYXRlUmVuZGVyRGF0YSgpXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXNcbiAgICAgICAgICAgIHZhciBiaW5kRnVuY3Rpb24gPSBmdW5jdGlvbihnaXZlbk5vZGUsIGdpdmVuVGFnKSB7XG4gICAgICAgICAgICAgICAgZ2l2ZW5Ob2RlLm9uKFwiY2xpY2tcIixmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZFRhZyAhPSBnaXZlblRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RlZFRhZyA9IGdpdmVuVGFnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWRUYWdOb2RlICE9IGdpdmVuTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RlZFRhZ05vZGUgPSBnaXZlbk5vZGVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgZ2l2ZW5Ob2RlLmdldENvbXBvbmVudChcInJlZFBvaW50TWdyXCIpLnJlZFBvaW50U2hvd0NvbmRpdGlvbiA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYWlscyA9IHJlcXVpcmUoXCJkYXRhTWdyXCIpLnBsYXllckRhdGEubWFpbHNcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVuUmVhZE51bSA9IDBcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG1haWxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb25lTWFpbCA9IG1haWxzW2tleV1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbmVNYWlsLnRhZyA9PSBnaXZlblRhZyAmJiBvbmVNYWlsLnN0YXR1cyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5SZWFkTnVtICs9IDFcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodW5SZWFkTnVtID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmluZEZ1bmN0aW9uKG5vZGUsb25lVGFnKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBub2RlLnkgPSB0aGlzLnRhZ1NlY3Rpb25TdGFydFkgLSBpbmRleCAqIHRoaXMudGFnU2VjdGlvbkRpc1xuICAgICAgICAgICAgbm9kZS5uYW1lID0gb25lVGFnXG4gICAgICAgICAgICB0aGlzLnRhZ1NlY3Rpb24uYWRkQ2hpbGQobm9kZSwxKVxuICAgICAgICAgICAgaWYgKGluZGV4ID09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkVGFnID0gb25lVGFnXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRhZ05vZGUgPSBub2RlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc2V0dXBNYWlsU2VjdGlvbigpIHtcbiAgICAgICAgdmFyIHRleHRDb25maWcgPSByZXF1aXJlKFwidGV4dENvbmZpZ1wiKVxuICAgICAgICB2YXIgdGFnTWFpbHMgPSB0aGlzLm1haWxzQnlUYWdbdGhpcy5zZWxlY3RlZFRhZ11cbiAgICAgICAgdmFyIG1haWxJZHNBcnJ5ID0gT2JqZWN0LmtleXModGFnTWFpbHMpXG4gICAgICAgIHRoaXMubWFpbFNlY3Rpb25Db250ZW50Tm9kZS5kZXN0cm95QWxsQ2hpbGRyZW4oKVxuICAgICAgICBpZiAobWFpbElkc0FycnkubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHRoaXMubWFpbFNlY3Rpb25FbXB0eUxhYmVsTm9kZS5hY3RpdmUgPSB0cnVlXG4gICAgICAgICAgICB0aGlzLm1haWxTZWN0aW9uRW1wdHlMYWJlbE5vZGUuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSB0ZXh0Q29uZmlnLmdldFRleHRCeUlkQW5kTGFuZ3VhZ2VUeXBlKDE0NilcbiAgICAgICAgICAgIHRoaXMubWFpbFNlY3Rpb25Db250ZW50Tm9kZS5oZWlnaHQgPSAwXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5tYWlsU2VjdGlvbkVtcHR5TGFiZWxOb2RlLmFjdGl2ZSA9IGZhbHNlXG4gICAgICAgIHZhciBzZWxmID0gdGhpc1xuICAgICAgICB2YXIgc29ydEZ1bmN0aW9uID0gZnVuY3Rpb24obWFpbElkMSwgbWFpbElkMikge1xuICAgICAgICAgICAgdmFyIG1haWwxID0gc2VsZi5tYWlsc0J5VGFnW3NlbGYuc2VsZWN0ZWRUYWddW21haWxJZDFdXG4gICAgICAgICAgICB2YXIgbWFpbDIgPSBzZWxmLm1haWxzQnlUYWdbc2VsZi5zZWxlY3RlZFRhZ11bbWFpbElkMl1cbiAgICAgICAgICAgIGlmIChtYWlsMS5zdGF0dXMgPT0gMCAmJiBtYWlsMi5zdGF0dXMgPT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWFpbDEuc3RhdHVzID09IDEgJiYgbWFpbDIuc3RhdHVzID09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHRpbWVTdGFtcDEgPSBtYWlsMS50aW1lU3RhbXBcbiAgICAgICAgICAgICAgICB2YXIgdGltZVN0YW1wMiA9IG1haWwyLnRpbWVTdGFtcFxuICAgICAgICAgICAgICAgIGlmICh0aW1lU3RhbXAxIDwgdGltZVN0YW1wMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1haWxJZHNBcnJ5ID0gbWFpbElkc0Fycnkuc29ydChzb3J0RnVuY3Rpb24pXG4gICAgICAgIHZhciBtYWlsQ29uZmlnID0gcmVxdWlyZShcIm1haWxDb25maWdcIilcbiAgICAgICAgdmFyIHRvdGFsSGVpZ2h0ID0gMFxuICAgICAgICBmb3IgKHZhciBpbmRleCBpbiBtYWlsSWRzQXJyeSkge1xuICAgICAgICAgICAgdmFyIG1haWxJZCA9IG1haWxJZHNBcnJ5W2luZGV4XVxuICAgICAgICAgICAgdmFyIG1haWwgPSByZXF1aXJlKFwiZGF0YU1nclwiKS5wbGF5ZXJEYXRhLm1haWxzW21haWxJZF1cbiAgICAgICAgICAgIHZhciBub2RlID0gY2MuaW5zdGFudGlhdGUodGhpcy5tYWlsU2VjdGlvblByZWZhYilcbiAgICAgICAgICAgIHZhciB1blJlYWRJY29uTm9kZSA9IG5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJpY29uX3VucmVhZFwiKVxuICAgICAgICAgICAgdmFyIHJlYWRlZEljb25Ob2RlID0gbm9kZS5nZXRDaGlsZEJ5TmFtZShcImljb25fcmVhZGVkXCIpXG4gICAgICAgICAgICB2YXIgdGl0bGVMYWJlbE5vZGUgPSBub2RlLmdldENoaWxkQnlOYW1lKFwidGl0bGVMYWJlbFwiKVxuICAgICAgICAgICAgdmFyIHNlcGVyYXRlTGluZU5vZGUgPSBub2RlLmdldENoaWxkQnlOYW1lKFwic2VwZXJhdGVMaW5lXCIpXG5cbiAgICAgICAgICAgIGlmIChtYWlsLnN0YXR1cyA9PSAxKSB7XG4gICAgICAgICAgICAgICAgdW5SZWFkSWNvbk5vZGUuYWN0aXZlID0gZmFsc2VcbiAgICAgICAgICAgICAgICByZWFkZWRJY29uTm9kZS5hY3RpdmUgPSB0cnVlXG4gICAgICAgICAgICAgICAgdGl0bGVMYWJlbE5vZGUuY29sb3IgPSB0aGlzLm1haWxTZWN0aW9uTm9kZVJlYWRlZENvbG9yXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGl0bGVTdHIgPSB0ZXh0Q29uZmlnLmdldFRleHRCeUlkQW5kTGFuZ3VhZ2VUeXBlKG1haWxDb25maWdbbWFpbElkXS50aXRsZVRleHRJZClcbiAgICAgICAgICAgIHRpdGxlTGFiZWxOb2RlLmdldENvbXBvbmVudChjYy5MYWJlbCkuc3RyaW5nID0gdGl0bGVTdHJcbiAgICAgICAgICAgIHNlcGVyYXRlTGluZU5vZGUueSA9IC10aXRsZUxhYmVsTm9kZS5oZWlnaHRcbiAgICAgICAgICAgIG5vZGUueSA9IC10b3RhbEhlaWdodFxuICAgICAgICAgICAgdmFyIG5vZGVXaWR0aCA9IHRpdGxlTGFiZWxOb2RlLnggKyB0aXRsZUxhYmVsTm9kZS53aWR0aCAvIDIgLSAodW5SZWFkSWNvbk5vZGUueCAtIHVuUmVhZEljb25Ob2RlLndpZHRoIC8gMilcbiAgICAgICAgICAgIHZhciBub2RlSGVpZ2h0ID0gdGl0bGVMYWJlbE5vZGUuaGVpZ2h0XG4gICAgICAgICAgICBub2RlLndpZHRoID0gbm9kZVdpZHRoXG4gICAgICAgICAgICBub2RlLmhlaWdodCA9IG5vZGVIZWlnaHRcbiAgICAgICAgICAgIG5vZGUubmFtZSA9IG1haWxJZC50b1N0cmluZygpXG4gICAgICAgICAgICB0b3RhbEhlaWdodCA9IHRvdGFsSGVpZ2h0ICsgdGl0bGVMYWJlbE5vZGUuaGVpZ2h0ICsgMlxuICAgICAgICAgICAgaWYgKGluZGV4ICE9IG1haWxJZHNBcnJ5Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICB0b3RhbEhlaWdodCArPSB0aGlzLm1haWxTZWN0aW9uTm9kZURpc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgICAgICAgICB2YXIgYmluZEZ1bmN0aW9uID0gZnVuY3Rpb24oZ2l2ZW5Ob2RlLCBnaXZlbk1haWxJZCkge1xuICAgICAgICAgICAgICAgIGdpdmVuTm9kZS5vbihcImNsaWNrXCIsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5vcGVuT25lTWFpbChnaXZlbk1haWxJZCxnaXZlbk5vZGUpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJpbmRGdW5jdGlvbihub2RlLG1haWxJZClcbiAgICAgICAgICAgIHRoaXMubWFpbFNlY3Rpb25Db250ZW50Tm9kZS5hZGRDaGlsZChub2RlKVxuICAgICAgICB9XG4gICAgICAgIHZhciBtaW5IZWlnaHQgPSB0aGlzLm1haWxTZWN0aW9uQ29udGVudE5vZGUuaGVpZ2h0XG4gICAgICAgIGlmICh0b3RhbEhlaWdodCA+IG1pbkhlaWdodCkge1xuICAgICAgICAgICAgdGhpcy5tYWlsU2VjdGlvbkNvbnRlbnROb2RlLmhlaWdodCA9IHRvdGFsSGVpZ2h0XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc2V0dXBOb3RpU2VjdGlvbigpIHtcbiAgICAgICAgdmFyIHRleHRDb25maWcgPSByZXF1aXJlKFwidGV4dENvbmZpZ1wiKVxuICAgICAgICB2YXIgdW5SZWFkTWFpbE51bSA9IHRoaXMudW5SZWFkZWRNYWlsTnVtc1t0aGlzLnNlbGVjdGVkVGFnXVxuICAgICAgICBpZiAodW5SZWFkTWFpbE51bSA+IDApIHtcbiAgICAgICAgICAgIHZhciBzdHIgPSB0ZXh0Q29uZmlnLmdldFRleHRCeUlkQW5kTGFuZ3VhZ2VUeXBlKDEyOSlcbiAgICAgICAgICAgIHRoaXMubm90aVNlY3Rpb24uZ2V0Q2hpbGRCeU5hbWUoXCJub3RpTGFiZWxcIikuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSBzdHJcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgbWFpbENvbmRpdGlvbkluZGV4ID0gcmVxdWlyZShcImRhdGFNZ3JcIikucGxheWVyRGF0YS5tYWlsQ29uZGl0aW9uSW5kZXhcbiAgICAgICAgdmFyIGluZGV4ID0gbWFpbENvbmRpdGlvbkluZGV4W3RoaXMuc2VsZWN0ZWRUYWddXG4gICAgICAgIGlmIChpbmRleCA9PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5ub3RpU2VjdGlvbi5nZXRDaGlsZEJ5TmFtZShcIm5vdGlMYWJlbFwiKS5nZXRDb21wb25lbnQoY2MuTGFiZWwpLnN0cmluZyA9IHRleHRDb25maWcuZ2V0VGV4dEJ5SWRBbmRMYW5ndWFnZVR5cGUoMTMwKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1haWxTeXNDb25maWcgPSByZXF1aXJlKFwibWFpbFN5c0NvbmZpZ1wiKVxuICAgICAgICB2YXIgZWxlbWVudCA9IG1haWxTeXNDb25maWdbdGhpcy5zZWxlY3RlZFRhZ10uY29uZGl0aW9uc1tpbmRleF1cblxuICAgICAgICBpZiAoZWxlbWVudC5jb25kaXRpb25UeXBlID09IDEpIHtcbiAgICAgICAgICAgIHZhciBsZXZlbCA9IGVsZW1lbnQuY29uZGl0aW9uUGFyYVxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2dldFNlY3Rpb25BbmRMZXZlbE51bU9mU2VjdGlvbihsZXZlbClcbiAgICAgICAgICAgIGlmIChyZXN1bHQgIT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VjdGlvbiA9IHJlc3VsdFswXVxuICAgICAgICAgICAgICAgIHZhciBsZXZlbE51bU9mU2VjdGlvbiA9IHJlc3VsdFsxXVxuICAgICAgICAgICAgICAgIC8vIHZhciBzdHIgID0gXCLpgJrlhbMgXCIgKyBzZWN0aW9uLnRvU3RyaW5nKCkgKyBcIiAtIFwiICsgbGV2ZWxOdW1PZlNlY3Rpb24udG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgIC8vIHN0ciA9IHN0ciArIFwiIO+8jOS8muacieaWsOeahOmCruS7tu+8jOWKoOayueWQp+WwkeW5tO+8gVwiXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5ub3RpU2VjdGlvbi5nZXRDaGlsZEJ5TmFtZShcIm5vdGlMYWJlbFwiKS5nZXRDb21wb25lbnQoY2MuTGFiZWwpLnN0cmluZyA9IHN0clxuICAgICAgICAgICAgICAgIHZhciBzdHIgPSB0ZXh0Q29uZmlnLmdldEZvcm1hdGVkU3RyaW5nKDEzMSxbc2VjdGlvbi50b1N0cmluZygpLGxldmVsTnVtT2ZTZWN0aW9uLnRvU3RyaW5nKCldKVxuICAgICAgICAgICAgICAgIHRoaXMubm90aVNlY3Rpb24uZ2V0Q2hpbGRCeU5hbWUoXCJub3RpTGFiZWxcIikuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSBzdHJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2UgaWYgKGVsZW1lbnQuY29uZGl0aW9uVHlwZSA9PSAyKSB7XG4gICAgICAgICAgICAvL2dldCBtaW51bSBzdGVwIG9mIG9uZSBsZXZlbFxuICAgICAgICAgICAgdmFyIGxldmVsSWQgPSBlbGVtZW50LmNvbmRpdGlvblBhcmEubGV2ZWxJZFxuICAgICAgICAgICAgdmFyIG1pblN0ZXBOdW0gPSBlbGVtZW50LmNvbmRpdGlvblBhcmEubWluU3RlcE51bVxuXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZ2V0U2VjdGlvbkFuZExldmVsTnVtT2ZTZWN0aW9uKGxldmVsSWQpXG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlY3Rpb24gPSByZXN1bHRbMF1cbiAgICAgICAgICAgICAgICB2YXIgbGV2ZWwgPSByZXN1bHRbMV1cblxuICAgICAgICAgICAgICAgIC8vIHZhciBzdHIgPSBcIuWcqCBcIiArIHNlY3Rpb24udG9TdHJpbmcoKSArIFwiIC0gXCIgKyBsZXZlbC50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgLy8gc3RyID0gc3RyICsgXCIg55So5pyA5aSaIFwiICsgbWluU3RlcE51bSArIFwiIOatpemAmuWFs++8jOS8muacieaWsOeahOmCruS7tu+8jOWKoOayueWQp+WwkeW5tO+8gVwiXG4gICAgICAgICAgICAgICAgdmFyIHN0ciA9IHRleHRDb25maWcuZ2V0Rm9ybWF0ZWRTdHJpbmcoMTMyLFtzZWN0aW9uLnRvU3RyaW5nKCksIGxldmVsLnRvU3RyaW5nKCksIG1pblN0ZXBOdW0udG9TdHJpbmcoKV0pXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpU2VjdGlvbi5nZXRDaGlsZEJ5TmFtZShcIm5vdGlMYWJlbFwiKS5nZXRDb21wb25lbnQoY2MuTGFiZWwpLnN0cmluZyA9IHN0clxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBfZ2V0U2VjdGlvbkFuZExldmVsTnVtT2ZTZWN0aW9uKGdpdmVuTGV2ZWxJZCkge1xuICAgICAgICB2YXIgc2VjdGlvbiA9IG51bGxcbiAgICAgICAgdmFyIGxldmVsTnVtT2ZTZWN0aW9uID0gbnVsbFxuICAgICAgICB2YXIgc2VjdGlvbkNvbmZpZyA9IHJlcXVpcmUoXCJzZWN0aW9uQ29uZmlnXCIpXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBzZWN0aW9uQ29uZmlnKSB7XG4gICAgICAgICAgICB2YXIgbGV2ZWxzID0gc2VjdGlvbkNvbmZpZ1trZXldLmxldmVsc1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gbGV2ZWxzLmluZGV4T2YoZ2l2ZW5MZXZlbElkKVxuICAgICAgICAgICAgaWYgKGluZGV4ICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgc2VjdGlvbiA9IGtleVxuICAgICAgICAgICAgICAgIGxldmVsTnVtT2ZTZWN0aW9uID0gaW5kZXggKyAxXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtzZWN0aW9uLCBsZXZlbE51bU9mU2VjdGlvbl1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9LFxuXG4gICAgc2V0dXBEYXRhKCkge1xuICAgICAgICB2YXIgbWFpbHMgPSByZXF1aXJlKFwiZGF0YU1nclwiKS5wbGF5ZXJEYXRhLm1haWxzXG4gICAgICAgIHRoaXMudGFncyA9IE9iamVjdC5rZXlzKHJlcXVpcmUoXCJtYWlsU3lzQ29uZmlnXCIpKVxuICAgICAgICBmb3IgKHZhciBpbmRleCBpbiB0aGlzLnRhZ3MpIHtcbiAgICAgICAgICAgIHZhciBvbmVUYWcgPSB0aGlzLnRhZ3NbaW5kZXhdXG4gICAgICAgICAgICB0aGlzLm1haWxzQnlUYWdbb25lVGFnXSA9IHt9XG4gICAgICAgICAgICB0aGlzLnVuUmVhZGVkTWFpbE51bXNbb25lVGFnXSA9IDBcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBtYWlscykge1xuICAgICAgICAgICAgICAgIHZhciBvbmVNYWlsID0gbWFpbHNba2V5XVxuICAgICAgICAgICAgICAgIGlmIChvbmVNYWlsLnRhZyA9PSBvbmVUYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYWlsc0J5VGFnW29uZVRhZ11ba2V5XSA9IG9uZU1haWxcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9uZU1haWwuc3RhdXRzID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudW5SZWFkZWRNYWlsTnVtc1tvbmVUYWddICs9IDFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXR1cFVJKCkge1xuICAgICAgICB0aGlzLnNldHVwVGFnU2VjdGlvbigpXG4gICAgICAgIHRoaXMuc2V0dXBNYWlsU2VjdGlvbigpXG4gICAgICAgIHRoaXMuc2V0dXBOb3RpU2VjdGlvbigpXG4gICAgfSxcblxuICAgIF9pbnNlcnRPbmVNYWlsKG1haWxJZCwgbWFpbCl7XG4gICAgICAgIGlmIChtYWlsLnRhZyA9PSB0aGlzLnNlbGVjdGVkVGFnKSB7XG4gICAgICAgICAgICB0aGlzLnNldHVwTWFpbFNlY3Rpb24oKVxuICAgICAgICAgICAgdGhpcy5zZXR1cE5vdGlTZWN0aW9uKClcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvcGVuT25lTWFpbChnaXZlbk1haWxJZCxnaXZlbk5vZGUpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBjYy5pbnN0YW50aWF0ZSh0aGlzLm9wZW5kTWFpbFByZWZhYilcbiAgICAgICAgdmFyIG1nciA9IG5vZGUuZ2V0Q29tcG9uZW50KFwibWFpbFN5c01haWxNZ3JcIilcbiAgICAgICAgbWdyLm1haWxJZCA9IGdpdmVuTWFpbElkXG4gICAgICAgIG1nci5yZWxhdGVkTWFpbFNlY3Rpb25Ob2RlID0gZ2l2ZW5Ob2RlXG4gICAgICAgIG1nci5yZWxhdGVkTWFpbFN5c01nciA9IHRoaXNcbiAgICAgICAgdGhpcy5ub2RlLmFkZENoaWxkKG5vZGUpXG4gICAgfSxcbiAgICBzZXRPbmVNYWlsUmVhZGVkKG1haWxJZCxpbmRleE9mT3B0aW9ucywgY29tcGxldGUgPSBmdW5jdGlvbigpe30scmVsYXRlZE1haWxTZWN0aW9uTm9kZSkge1xuICAgICAgICB2YXIgbWFpbCA9IHJlcXVpcmUoXCJkYXRhTWdyXCIpLnBsYXllckRhdGEubWFpbHNbbWFpbElkXVxuICAgICAgICBpZiAobWFpbC5zdGF0dXMgPT0gMSkge1xuICAgICAgICAgICAgY2MubG9nKFwidGhpcyBtYWlsIGlzIGFscmVhZHkgcmVhZGVkXCIpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV0d29ya01nciA9IHJlcXVpcmUoXCJuZXR3b3JrTWdyXCIpXG4gICAgICAgIHZhciBtZXNzYWdlT2JqID0gbmV0d29ya01nci5tYWtlTWVzc2FnZU9iaihcIm1haWxNb2R1bGVcIixcInJlYWRNYWlsTWVzc2FnZVR5cGVcIilcbiAgICAgICAgbWVzc2FnZU9iai5tZXNzYWdlLnBsYXllcklkID0gcmVxdWlyZShcImRhdGFNZ3JcIikucGxheWVyRGF0YS5pZFxuICAgICAgICBtZXNzYWdlT2JqLm1lc3NhZ2UubWFpbElkID0gbWFpbElkXG4gICAgICAgIG1lc3NhZ2VPYmoubWVzc2FnZS5zZWxlY3RlZE9wdGlvbkluZGV4ID0gaW5kZXhPZk9wdGlvbnNcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgICAgIG1lc3NhZ2VPYmouc3VjY2Vzc0NhbGxCYWNrID0gZnVuY3Rpb24oeGhyKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSB4aHIucmVzcG9uc2VUZXh0XG4gICAgICAgICAgICByZXNwb25zZSA9IEpTT04ucGFyc2UocmVzcG9uc2UpXG4gICAgICAgICAgICBpZiAocmVzcG9uc2UudHlwZSA9PSBcInN1Y2Nlc3NcIikge1xuICAgICAgICAgICAgICAgIG1haWwuc3RhdHVzID0gMVxuICAgICAgICAgICAgICAgIG1haWwuc2VsZWN0ZWRPcHRpb25JbmRleCA9IGluZGV4T2ZPcHRpb25zXG4gICAgICAgICAgICAgICAgcmVsYXRlZE1haWxTZWN0aW9uTm9kZS5nZXRDaGlsZEJ5TmFtZShcImljb25fcmVhZGVkXCIpLmFjdGl2ZSA9IHRydWVcbiAgICAgICAgICAgICAgICByZWxhdGVkTWFpbFNlY3Rpb25Ob2RlLmdldENoaWxkQnlOYW1lKFwiaWNvbl91bnJlYWRcIikuYWN0aXZlID0gZmFsc2VcbiAgICAgICAgICAgICAgICByZWxhdGVkTWFpbFNlY3Rpb25Ob2RlLmdldENoaWxkQnlOYW1lKFwidGl0bGVMYWJlbFwiKS5jb2xvciA9IHNlbGYubWFpbFNlY3Rpb25Ob2RlUmVhZGVkQ29sb3JcbiAgICAgICAgICAgICAgICBzZWxmLnVuUmVhZGVkTWFpbE51bXNbbWFpbC50YWddIC09IDFcbiAgICAgICAgICAgICAgICAvL3NlbGYuc2V0dXBSZWRQb2ludCgpXG4gICAgICAgICAgICAgICAgc2VsZi5zZXR1cE5vdGlTZWN0aW9uKClcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV0d29ya01nci5zZW5kTWVzc2FnZUJ5TXNnT2JqKG1lc3NhZ2VPYmopXG4gICAgfSxcblxuICAgIGRhdGFNb25pdG9yZWQoa2V5LHZhbHVlKSB7XG4gICAgICAgIHZhciBtYWlsQ29uZmlnID0gcmVxdWlyZShcIm1haWxDb25maWdcIilcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKG1haWxDb25maWcpLmluZGV4T2Yoa2V5KSAhPSAtMSkge1xuICAgICAgICAgICAgdGhpcy5zZXR1cERhdGEoKVxuICAgICAgICAgICAgdGhpcy5faW5zZXJ0T25lTWFpbChrZXksdmFsdWUpXG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gdXBkYXRlIChkdCkge30sXG59KTtcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/systems/addPropertyNumSys/addPropertyNumSysMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '5666fBzlDdAnK8GSZS/8Y1e', 'addPropertyNumSysMgr');
// scripts/systems/addPropertyNumSys/addPropertyNumSysMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    ensureButtonNode: cc.Node,
    cancelButtonNode: cc.Node,
    desLabelNode: cc.Node,
    addTypeId: 1,
    addConfig: null,
    sysName: "addPropertyNumSys"
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {
    this.setupData();
    this.setupUI();
  },
  setupData: function setupData() {
    var config = require("addPropertySysConfig");

    config = config[this.addTypeId];
    this.addConfig = config;
  },
  setupUI: function setupUI() {
    var textConfig = require("textConfig");

    var desStr = textConfig.getTextByIdAndLanguageType(123);
    var isFirstKey = true;

    for (var key in this.addConfig) {
      if (isFirstKey == false) {
        desStr += "，";
      }

      switch (key) {
        case "physicalPower":
          desStr += textConfig.getTextByIdAndLanguageType(124) + this.addConfig[key].toString();
          break;

        case "heart":
          desStr += textConfig.getTextByIdAndLanguageType(125) + this.addConfig[key].toString();
          break;
      }

      isFirstKey = false;
    }

    desStr += textConfig.getTextByIdAndLanguageType(126);
    this.desLabelNode.getComponent(cc.Label).string = desStr;
    this.ensureButtonNode.getChildByName("textLabel").getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(113);
    this.cancelButtonNode.getChildByName("textLabel").getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(114);
  },
  onWillOpend: function onWillOpend(givenAddTypeId) {
    this.addTypeId = givenAddTypeId;
  },
  onClickEnsureButton: function onClickEnsureButton() {
    var advertisMgr = require("advertisMgr");

    advertisMgr.delegate = this;
    advertisMgr.showVideoAd();
  },
  onClickCancelButton: function onClickCancelButton() {
    require("systemsMgr").closeSystem(this.sysName);
  },
  //advertis delegate
  onVideoAdEnd: function onVideoAdEnd() {
    var commitBody = {};

    for (var key in this.addConfig) {
      var oneAddedPropertyNum = require("dataMgr").playerData[key] + this.addConfig[key];
      commitBody[key] = oneAddedPropertyNum;
    }

    if (Object.keys(commitBody).length > 0) {
      var successCallBack = function successCallBack() {
        for (var k in commitBody) {
          require("dataMgr").playerData[k] = commitBody[k];
        }
      };

      require("dataMgr").commitPlayerDataToServer(commitBody, successCallBack);

      require("systemsMgr").closeSystem(this.sysName, 2);
    }
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/systems/systemsMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '90768z3BYZIyKcDPXY67Q3P', 'systemsMgr');
// scripts/systems/systemsMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
//a typical system will have an ui , which will be created by a prefab
//other system will not be contained by here, such as notificaition system
var SystemsMgr = cc.Class({
  "extends": cc.Component,
  properties: {
    welfarySys: {
      get: function get() {
        if (this._welfarySys == null) {
          this._welfarySys = this.setupSysProperty("welfarySysPrefab", "welfarySys", "welfarySysMgr");
          this.systems["welfarySys"] = this._welfarySys;
        }

        return this._welfarySys;
      }
    },
    signInSys: {
      get: function get() {
        if (this._signInSys == null) {
          this._signInSys = this.setupSysProperty("signInSysPrefab", "signInSys", "signInSysMgr");
          this.systems["signInSys"] = this._signInSys;
        }

        return this._signInSys;
      }
    },
    addPropertyNumSys: {
      get: function get() {
        if (this._addPropertyNumSys == null) {
          this._addPropertyNumSys = this.setupSysProperty("addPropertyNumSysPrefab", "addPropertyNumSys", "addPropertyNumSysMgr");
          this.systems["addPropertyNumSys"] = this._addPropertyNumSys;
        }

        return this._addPropertyNumSys;
      }
    },
    mailSys: {
      get: function get() {
        if (this._mailSys == null) {
          this._mailSys = this.setupSysProperty("mailSysPrefab", "mailSys", "mailSysMgr");
          this.systems["mailSys"] = this._mailSys;
        }

        return this._mailSys;
      }
    },
    selectSectionSys: {
      get: function get() {
        if (this._selectSectionSys == null) {
          this._selectSectionSys = this.setupSysProperty("selectSectionSysPrefab", "selectSectionSys", "selectSectionUIMgr");
          this.systems["selectSectionSys"] = this._selectSectionSys;
        }

        return this._selectSectionSys;
      }
    },
    storySys: {
      get: function get() {
        if (this._storySys == null) {
          this._storySys = this.setupSysProperty("storySysPrefab", "storySys", "storySysMgr");
          this.systems["storySys"] = this._storySys;
        }

        return this._storySys;
      }
    },
    systems: {
      get: function get() {
        if (this._systems == null) {
          this._systems = {};
        }

        return this._systems;
      }
    }
  },
  setupSysProperty: function setupSysProperty(givenPrefabName, givenName, givenMgrName) {
    var givenSysProperty = {};
    givenSysProperty.uiPrefab = require("resMgr").reses[givenPrefabName];
    givenSysProperty.opendNode = null;
    givenSysProperty.name = givenName;
    givenSysProperty.mgrName = givenMgrName;
    return givenSysProperty;
  },
  showSystem: function showSystem(givenSysName) {
    var para = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    //type 1 = animated open , 2 = direct open
    var givenSys = this.getSysBySysName(givenSysName);

    if (givenSys.opendNode != null) {
      cc.log("this sys has been opend , can't reopen: " + givenSys.name);
      return;
    }

    var ui = cc.instantiate(givenSys.uiPrefab);
    var mgrName = this.systems[givenSys.name].mgrName;
    var mgr = ui.getComponent(mgrName);

    if (mgr != null && typeof mgr.onWillOpend === "function") {
      mgr.onWillOpend(para);
    }

    if (type == 2) {
      cc.director.getScene().getChildByName("Canvas").addChild(ui);
      givenSys.opendNode = ui;
      return;
    }

    var others = ui.getChildByName("others");
    var bg = ui.getChildByName("bg");

    if (bg != null) {
      bg.width = cc.winSize.width;
      bg.height = cc.winSize.height;
      bg.on("touchstart", function () {});
    }

    cc.director.getScene().getChildByName("Canvas").addChild(ui);
    givenSys.opendNode = ui;

    if (others != null) {
      others.scale = 0;
      cc.tween(others).to(0.3, {
        scale: 1
      }).start();
    } else {
      ui.scale = 0;
      cc.tween(ui).to(0.3, {
        scale: 1
      }).start();
    }
  },
  closeSystem: function closeSystem(givenSysName) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    //1 = animated close , 2 = direct close, 3 = fade out
    var givenSys = this.getSysBySysName(givenSysName);
    var opendNode = givenSys.opendNode;

    if (opendNode == null) {
      cc.log(givenSys.name + "has not been opend, no need to colse");
      return;
    }

    if (type == 1) {
      var others = opendNode.getChildByName("others");

      if (others != null) {
        cc.tween(others).to(0.3, {
          scale: 0
        }).call(function () {
          opendNode.destroy();
          givenSys.opendNode = null;
        }).start();
      } else {
        cc.tween(opendNode).to(0.3, {
          scale: 0
        }).call(function () {
          opendNode.destroy();
          givenSys.opendNode = null;
        });
      }
    } else if (type == 2) {
      opendNode.destroy();
      givenSys.opendNode = null;
    } else if (type == 3) {
      var coverNode = require("resMgr").reses["coverNodePrefab"];

      coverNode = cc.instantiate(coverNode);
      coverNode.width = opendNode.width;
      coverNode.height = opendNode.height;
      coverNode.opacity = 0;
      coverNode.on("touchstart", function () {});
      opendNode.addChild(coverNode);
      cc.tween(coverNode).to(0.5, {
        opacity: 255
      }).delay(0.5).call(function () {
        opendNode.destroy();
        givenSys.opendNode = null;
      }).start();
    }
  },
  getSysBySysName: function getSysBySysName(givenSysName) {
    switch (givenSysName) {
      case "welfarySys":
        return this.welfarySys;

      case "signInSys":
        return this.signInSys;

      case "addPropertyNumSys":
        return this.addPropertyNumSys;

      case "mailSys":
        return this.mailSys;

      case "selectSectionSys":
        return this.selectSectionSys;

      case "storySys":
        return this.storySys;

      default:
        cc.log("no such sys");
        return false;
    }
  },
  systemsGloableDataMonitored: function systemsGloableDataMonitored(key, value) {
    //mailSys
    //monitored whether reach mail condition
    this.mailSysGloableMonitored(key, value);
  },
  mailSysGloableMonitored: function mailSysGloableMonitored(key, value) {
    var textConfig = require("textConfig");

    var onReachCondition = function onReachCondition(givenTag, givenMailId) {
      var networkMgr = require("networkMgr");

      var messageObj = networkMgr.makeMessageObj("mailModule", "reachConditionMessageType");
      messageObj.message.playerId = require("dataMgr").playerData.id;
      messageObj.message.tag = givenTag;
      messageObj.message.mailId = givenMailId;

      messageObj.successCallBack = function (xhr) {
        var response = xhr.responseText;
        response = JSON.parse(response);

        if (response.type == "success") {
          var isEnd = response.isEnd;

          if (isEnd == 0) {
            require("dataMgr").playerData.mailConditionIndex[givenTag] += 1;
          } else {
            require("dataMgr").playerData.mailConditionIndex[givenTag] = -1;
          }

          var newMail = response.mail;
          require("dataMgr").playerData.mails[givenMailId] = newMail;

          var notificaitionMgr = require("notificationMgr");

          var notiStr = textConfig.getTextByIdAndLanguageType(148);
          notificaitionMgr.pushNoti(notiStr);
        }
      };

      networkMgr.sendMessageByMsgObj(messageObj);
    };

    var mailSysConfig = require("mailSysConfig");

    var tags = Object.keys(mailSysConfig);

    for (var index in tags) {
      var oneTag = tags[index];

      var conditionIndex = require("dataMgr").playerData.mailConditionIndex[oneTag];

      if (conditionIndex == -1) {
        continue;
      }

      var element = mailSysConfig[oneTag].conditions[conditionIndex];
      var conditionType = element.conditionType;
      var conditionPara = element.conditionPara;

      if (conditionType == 1) {
        //reach given level id
        if (key != "preLevel") {
          continue;
        }

        if (value == conditionPara) {
          var mailId = element.mailId;
          onReachCondition(oneTag, mailId);
        }
      } else if (conditionType == 2) {
        //min step num of given level less than a value
        if (key.indexOf("minStep_level_") == -1) {
          continue;
        }

        var levelId = key.slice(14);

        if (parseInt(levelId) == conditionPara.levelId) {
          if (value <= conditionPara.minStepNum) {
            var mailId = element.mailId;
            onReachCondition(oneTag, mailId);
          }
        }
      }
    }
  },
  mailSysGloableSendOneMail: function mailSysGloableSendOneMail(givenMailId, givenTag) {
    var complete = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};
    var delay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    var networkMgr = require("networkMgr");

    var messageObj = networkMgr.makeMessageObj("mailModule", "sendMailMessageType");
    messageObj.message.playerId = require("dataMgr").playerData.id;
    messageObj.message.mailId = givenMailId;
    messageObj.message.tag = givenTag;
    messageObj.message.delay = delay;

    messageObj.successCallBack = function (xhr) {
      var response = xhr.responseText;
      response = JSON.parse(response);

      if (response.type == "success") {
        complete();
      }
    };

    networkMgr.sendMessageByMsgObj(messageObj);
  } // getSectionLevelInfoByLevelId(givenLevelId) {
  //     var result = null
  //     var sectionConfig = require("sectionConfig")
  //     for (var key in sectionConfig) {
  //         var oneConfig = sectionConfig[key]
  //         var levels = oneConfig.levels
  //         for (var index in levels) {
  //             if (givenLevelId == levels[index]) {
  //                 var currentLevel = givenLevelId
  //             }
  //         }
  //     }
  //     return result
  // }
  // update (dt) {},

});
var systemsMgr = new SystemsMgr();
module.exports = systemsMgr;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/configs/mailConfig.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b8af6yKxwJNLpuWEyI5t8+/', 'mailConfig');
// configs/mailConfig.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var mailConfig = {
  "1001": {
    titleTextId: 133,
    contentTextId: 134,
    options: [{
      showTextId: 135,
      operationType: 1,
      operationPara: null
    }, {
      showTextId: 136,
      operationType: 2,
      operationPara: {
        mailId: 10001,
        delay: 60
      }
    }, {
      showTextId: 137,
      operationType: 1,
      operationPara: null
    }]
  },
  "10001": {
    titleTextId: 138,
    contentTextId: 139,
    options: []
  },
  "1002": {
    titleTextId: 140,
    contentTextId: 141,
    options: []
  },
  "1003": {
    titleTextId: 142,
    contentTextId: 143,
    options: []
  },
  "1101": {
    titleTextId: 144,
    contentTextId: 145,
    options: []
  }
};
module.exports = mailConfig;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9jb25maWdzL21haWxDb25maWcuanMiXSwibmFtZXMiOlsibWFpbENvbmZpZyIsInRpdGxlVGV4dElkIiwiY29udGVudFRleHRJZCIsIm9wdGlvbnMiLCJzaG93VGV4dElkIiwib3BlcmF0aW9uVHlwZSIsIm9wZXJhdGlvblBhcmEiLCJtYWlsSWQiLCJkZWxheSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBSUEsVUFBVSxHQUFHO0FBQ2IsVUFBUTtBQUNKQyxJQUFBQSxXQUFXLEVBQUUsR0FEVDtBQUVKQyxJQUFBQSxhQUFhLEVBQUUsR0FGWDtBQUdKQyxJQUFBQSxPQUFPLEVBQUUsQ0FDTDtBQUNJQyxNQUFBQSxVQUFVLEVBQUUsR0FEaEI7QUFFSUMsTUFBQUEsYUFBYSxFQUFFLENBRm5CO0FBR0lDLE1BQUFBLGFBQWEsRUFBRTtBQUhuQixLQURLLEVBTUw7QUFDSUYsTUFBQUEsVUFBVSxFQUFFLEdBRGhCO0FBRUlDLE1BQUFBLGFBQWEsRUFBRSxDQUZuQjtBQUdJQyxNQUFBQSxhQUFhLEVBQUU7QUFDWEMsUUFBQUEsTUFBTSxFQUFFLEtBREc7QUFFWEMsUUFBQUEsS0FBSyxFQUFFO0FBRkk7QUFIbkIsS0FOSyxFQWNMO0FBQ0lKLE1BQUFBLFVBQVUsRUFBRSxHQURoQjtBQUVJQyxNQUFBQSxhQUFhLEVBQUUsQ0FGbkI7QUFHSUMsTUFBQUEsYUFBYSxFQUFFO0FBSG5CLEtBZEs7QUFITCxHQURLO0FBeUJiLFdBQVM7QUFDTEwsSUFBQUEsV0FBVyxFQUFFLEdBRFI7QUFFTEMsSUFBQUEsYUFBYSxFQUFFLEdBRlY7QUFHTEMsSUFBQUEsT0FBTyxFQUFDO0FBSEgsR0F6Qkk7QUErQmIsVUFBUTtBQUNKRixJQUFBQSxXQUFXLEVBQUUsR0FEVDtBQUVKQyxJQUFBQSxhQUFhLEVBQUUsR0FGWDtBQUdKQyxJQUFBQSxPQUFPLEVBQUU7QUFITCxHQS9CSztBQXFDYixVQUFRO0FBQ0pGLElBQUFBLFdBQVcsRUFBRSxHQURUO0FBRUpDLElBQUFBLGFBQWEsRUFBRSxHQUZYO0FBR0pDLElBQUFBLE9BQU8sRUFBRTtBQUhMLEdBckNLO0FBNENiLFVBQVE7QUFDSkYsSUFBQUEsV0FBVyxFQUFFLEdBRFQ7QUFFSkMsSUFBQUEsYUFBYSxFQUFFLEdBRlg7QUFHSkMsSUFBQUEsT0FBTyxFQUFFO0FBSEw7QUE1Q0ssQ0FBakI7QUFtREFNLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlYsVUFBakIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExlYXJuIGNjLkNsYXNzOlxuLy8gIC0gW0NoaW5lc2VdIGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL2NsYXNzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vZG9jcy5jb2NvczJkLXgub3JnL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9jbGFzcy5odG1sXG4vLyBMZWFybiBBdHRyaWJ1dGU6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHA6Ly9kb2NzLmNvY29zMmQteC5vcmcvY3JlYXRvci9tYW51YWwvZW4vc2NyaXB0aW5nL3JlZmVyZW5jZS9hdHRyaWJ1dGVzLmh0bWxcbi8vIExlYXJuIGxpZmUtY3ljbGUgY2FsbGJhY2tzOlxuLy8gIC0gW0NoaW5lc2VdIGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL2xpZmUtY3ljbGUtY2FsbGJhY2tzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwczovL3d3dy5jb2NvczJkLXgub3JnL2RvY3MvY3JlYXRvci9tYW51YWwvZW4vc2NyaXB0aW5nL2xpZmUtY3ljbGUtY2FsbGJhY2tzLmh0bWxcblxudmFyIG1haWxDb25maWcgPSB7XG4gICAgXCIxMDAxXCI6IHtcbiAgICAgICAgdGl0bGVUZXh0SWQ6IDEzMyxcbiAgICAgICAgY29udGVudFRleHRJZDogMTM0LFxuICAgICAgICBvcHRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2hvd1RleHRJZDogMTM1LFxuICAgICAgICAgICAgICAgIG9wZXJhdGlvblR5cGU6IDEsXG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uUGFyYTogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaG93VGV4dElkOiAxMzYsXG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uVHlwZTogMixcbiAgICAgICAgICAgICAgICBvcGVyYXRpb25QYXJhOiB7XG4gICAgICAgICAgICAgICAgICAgIG1haWxJZDogMTAwMDEsXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5OiA2MCxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNob3dUZXh0SWQ6IDEzNyxcbiAgICAgICAgICAgICAgICBvcGVyYXRpb25UeXBlOiAxLFxuICAgICAgICAgICAgICAgIG9wZXJhdGlvblBhcmE6IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAgXCIxMDAwMVwiOiB7XG4gICAgICAgIHRpdGxlVGV4dElkOiAxMzgsXG4gICAgICAgIGNvbnRlbnRUZXh0SWQ6IDEzOSxcbiAgICAgICAgb3B0aW9uczpbXVxuICAgIH0sXG5cbiAgICBcIjEwMDJcIjoge1xuICAgICAgICB0aXRsZVRleHRJZDogMTQwLFxuICAgICAgICBjb250ZW50VGV4dElkOiAxNDEsXG4gICAgICAgIG9wdGlvbnM6IFtdXG4gICAgfSxcblxuICAgIFwiMTAwM1wiOiB7XG4gICAgICAgIHRpdGxlVGV4dElkOiAxNDIsXG4gICAgICAgIGNvbnRlbnRUZXh0SWQ6IDE0MyxcbiAgICAgICAgb3B0aW9uczogW11cbiAgICB9LFxuXG5cbiAgICBcIjExMDFcIjoge1xuICAgICAgICB0aXRsZVRleHRJZDogMTQ0LFxuICAgICAgICBjb250ZW50VGV4dElkOiAxNDUsXG4gICAgICAgIG9wdGlvbnM6IFtdXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1haWxDb25maWciXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/migration/use_reversed_rotateTo.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f209f0V4P9PaLJOp7iXlB9H', 'use_reversed_rotateTo');
// migration/use_reversed_rotateTo.js

"use strict";

/*
 * This script is automatically generated by Cocos Creator and is only used for projects compatible with v2.1.0/v2.1.1/v2.2.1/v2.2.2 versions.
 * You do not need to manually add this script in any other project.
 * If you don't use cc.Action in your project, you can delete this script directly.
 * If your project is hosted in VCS such as git, submit this script together.
 *
 * 此脚本由 Cocos Creator 自动生成，仅用于兼容 v2.1.0/v2.1.1/v2.2.1/v2.2.2 版本的工程，
 * 你无需在任何其它项目中手动添加此脚本。
 * 如果你的项目中没用到 Action，可直接删除该脚本。
 * 如果你的项目有托管于 git 等版本库，请将此脚本一并上传。
 */
cc.RotateTo._reverse = true;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9taWdyYXRpb24vdXNlX3JldmVyc2VkX3JvdGF0ZVRvLmpzIl0sIm5hbWVzIjpbImNjIiwiUm90YXRlVG8iLCJfcmV2ZXJzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7QUFZQUEsRUFBRSxDQUFDQyxRQUFILENBQVlDLFFBQVosR0FBdUIsSUFBdkIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBUaGlzIHNjcmlwdCBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBDb2NvcyBDcmVhdG9yIGFuZCBpcyBvbmx5IHVzZWQgZm9yIHByb2plY3RzIGNvbXBhdGlibGUgd2l0aCB2Mi4xLjAvdjIuMS4xL3YyLjIuMS92Mi4yLjIgdmVyc2lvbnMuXG4gKiBZb3UgZG8gbm90IG5lZWQgdG8gbWFudWFsbHkgYWRkIHRoaXMgc2NyaXB0IGluIGFueSBvdGhlciBwcm9qZWN0LlxuICogSWYgeW91IGRvbid0IHVzZSBjYy5BY3Rpb24gaW4geW91ciBwcm9qZWN0LCB5b3UgY2FuIGRlbGV0ZSB0aGlzIHNjcmlwdCBkaXJlY3RseS5cbiAqIElmIHlvdXIgcHJvamVjdCBpcyBob3N0ZWQgaW4gVkNTIHN1Y2ggYXMgZ2l0LCBzdWJtaXQgdGhpcyBzY3JpcHQgdG9nZXRoZXIuXG4gKlxuICog5q2k6ISa5pys55SxIENvY29zIENyZWF0b3Ig6Ieq5Yqo55Sf5oiQ77yM5LuF55So5LqO5YW85a65IHYyLjEuMC92Mi4xLjEvdjIuMi4xL3YyLjIuMiDniYjmnKznmoTlt6XnqIvvvIxcbiAqIOS9oOaXoOmcgOWcqOS7u+S9leWFtuWug+mhueebruS4reaJi+WKqOa3u+WKoOatpOiEmuacrOOAglxuICog5aaC5p6c5L2g55qE6aG555uu5Lit5rKh55So5YiwIEFjdGlvbu+8jOWPr+ebtOaOpeWIoOmZpOivpeiEmuacrOOAglxuICog5aaC5p6c5L2g55qE6aG555uu5pyJ5omY566h5LqOIGdpdCDnrYnniYjmnKzlupPvvIzor7flsIbmraTohJrmnKzkuIDlubbkuIrkvKDjgIJcbiAqL1xuXG5jYy5Sb3RhdGVUby5fcmV2ZXJzZSA9IHRydWU7XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/components/redPointMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f34142gIJJJ4YCZvHxJkXfT', 'redPointMgr');
// scripts/components/redPointMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    redPointPrefab: cc.Prefab,
    redPoint: null,
    offset: cc.v2(5, 10),
    redPointShowCondition: {
      get: function get() {
        return this._redPointShowCondition;
      },
      set: function set(value) {
        //init setup
        this._redPointShowCondition = value;
        this.setupRedPoint();
      }
    }
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {},
  setupRedPoint: function setupRedPoint() {
    if (this.redPointShowCondition == null || typeof this.redPointShowCondition !== "function") {
      cc.log("no condition of redpoint, or condition is not a function from node " + this.node.name);
      return;
    }

    if (this.redPointShowCondition() == true) {
      this.showRedPoint();
    } else {
      this.hideRedPoint();
    }
  },
  showRedPoint: function showRedPoint() {
    if (this.redPoint == null) {
      var oneRedPoint = cc.instantiate(this.redPointPrefab);

      var getNodeRightHeadPoint = function getNodeRightHeadPoint(givenNode) {
        var x = (1 - givenNode.anchorX) * givenNode.width;
        var y = (1 - givenNode.anchorY) * givenNode.height;
        return cc.v2(x, y);
      };

      var targetX = getNodeRightHeadPoint(this.node).x + this.offset.x;
      var targetY = getNodeRightHeadPoint(this.node).y + this.offset.y;
      oneRedPoint.x = targetX;
      oneRedPoint.y = targetY;
      this.redPoint = oneRedPoint;
      this.node.addChild(oneRedPoint);
    }

    this.redPoint.active = true;
  },
  hideRedPoint: function hideRedPoint() {
    if (this.redPoint == null) {
      var oneRedPoint = cc.instantiate(this.redPointPrefab);

      var getNodeRightHeadPoint = function getNodeRightHeadPoint(givenNode) {
        var x = (1 - givenNode.anchorX) * givenNode.width;
        var y = (1 - givenNode.anchorY) * givenNode.height;
        return cc.v2(x, y);
      };

      var targetX = getNodeRightHeadPoint(this.node).x + this.offset.x;
      var targetY = getNodeRightHeadPoint(this.node).y + this.offset.y;
      oneRedPoint.x = targetX;
      oneRedPoint.y = targetY;
      this.redPoint = oneRedPoint;
      this.node.addChild(oneRedPoint);
    }

    this.redPoint.active = false;
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/libs/gloableConfig.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '30519IO6mJCyIUJ9xGqrBAW', 'gloableConfig');
// scripts/libs/gloableConfig.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var GloableConfig = cc.Class({
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    basicIp: "diamonds.tdreamstudio.com",
    //basicIp: "192.168.0.103",
    basicPort: 8888,
    netWorkMessageConfigs: {
      get: function get() {
        return {
          loginModule: {
            suffix: "login",
            loginMessageType: {
              code: "asfdsfds",
              codeType: 3
            }
          },
          dataModule: {
            suffix: "data",
            queryMessageType: {
              playerId: 100000001,
              requestType: "query"
            },
            commitMessageTyp: {
              playerId: 100000001,
              requestType: "commit",
              commitBody: {}
            }
          },
          signInModule: {
            suffix: "signIn",
            signInMessageType: {
              playerId: 100000001,
              signType: 1
            },
            refreshMessageType: {
              playerId: 100000001
            }
          },
          mailModule: {
            suffix: "mail",
            readMailMessageType: {
              playerId: 100000001,
              mailId: 1001,
              requestType: "readMail"
            },
            sendMailMessageType: {
              playerId: 100000001,
              mailId: 1001,
              tag: "mainLine",
              requestType: "sendMail",
              delay: 0
            },
            reachConditionMessageType: {
              playerId: 1001,
              mailId: 1001,
              tag: "mainLine",
              selectedOptionIndex: 0,
              requestType: "reachCondition"
            }
          },
          helperModule: {
            suffix: "helper",
            generateLevelConfigFileMessageType: {
              data: ""
            }
          },
          longConnectModule: {
            suffix: "longConnect",
            heartBeatMessageType: {
              playerId: 10001,
              requestType: "heartBeat"
            }
          },
          storyModule: {
            suffix: "story",
            completeCurrentMessageType: {
              playerId: 10001,
              requestType: "completeCurrent"
            }
          }
        };
      }
    }
  }
});
var gloableConfig = new GloableConfig();
module.exports = gloableConfig;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/singleInstanceSystems/gameMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '29a86GW8otIsI4PtNbaQyRE', 'gameMgr');
// scripts/singleInstanceSystems/gameMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var GameMgr = cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {},
  enterLevelScene: function enterLevelScene(givenLevel) {
    var self = this;
    cc.director.preloadScene("levelScene", null, function (err, res) {
      var levelMgr = res.scene.getChildByName("Canvas").getComponent("levelMgr");
      levelMgr.level = givenLevel;
      self.animatedToScene("levelScene");
    });
  },
  animatedToScene: function animatedToScene(sceneName) {
    var coverNode = require("resMgr").reses["coverNodePrefab"];

    coverNode = cc.instantiate(coverNode);
    coverNode.width = cc.winSize.width;
    coverNode.height = cc.winSize.height;
    coverNode.opacity = 0;
    coverNode.on("touchstart", function () {});
    cc.director.getScene().getChildByName("Canvas").addChild(coverNode);
    cc.tween(coverNode).to(0.3, {
      opacity: 255
    }).delay(0.3).call(function () {
      cc.director.loadScene(sceneName);
    }).start();
  },
  _generateLevelSceneConfig: function _generateLevelSceneConfig() {
    var levelConfig = require("levelConfig");

    var result = {};
    var completNum = 0;

    var check = function check(completNum) {
      if (completNum == Object.keys(levelConfig).length) {
        var networkMgr = require("networkMgr");

        var messageObj = networkMgr.makeMessageObj("helperModule", "generateLevelConfigFileMessageType");
        messageObj.message.data = result;
        networkMgr.sendMessageByMsgObj(messageObj);
      }
    };

    for (var index in Object.keys(levelConfig)) {
      var levelId = Object.keys(levelConfig)[index];

      var getSceneNameByLevelId = function getSceneNameByLevelId(givenLevelId) {
        var levelForName = givenLevelId;

        switch (levelForName.toString().length) {
          case 1:
            levelForName = "00" + levelForName.toString();
            break;

          case 2:
            levelForName = "0" + levelForName.toString();
            break;
        }

        var levelName = "level" + levelForName;
        return levelName;
      };

      var sceneName = getSceneNameByLevelId(levelId);

      var setupResult = function setupResult(sceneName, levelId) {
        cc.director.preloadScene(sceneName, null, function (err, res) {
          cc.log("preload scene: " + sceneName);
          var canvas = res.scene.children[0];
          var oneResult = {};

          var getNodeBasicResult = function getNodeBasicResult(node) {
            var oneResult = {};
            oneResult.x = node.x;
            oneResult.y = node.y;
            oneResult.width = node.width;
            oneResult.height = node.height;
            oneResult.angle = node.angle;
            return oneResult;
          }; //fillNodes


          var fillNodes = canvas.getChildByName("fillNodes");
          var fillNodesResult = [];
          cc.log("setup fillNodes");

          for (var index in fillNodes.children) {
            var oneFillNode = fillNodes.children[index];
            var oneFillNodeResult = getNodeBasicResult(oneFillNode);
            fillNodesResult.push(oneFillNodeResult);
          }

          oneResult.fillNodes = fillNodesResult; //walls

          var walls = canvas.getChildByName("walls");
          var wallsResult = [];
          cc.log("setup walls");

          for (var index in walls.children) {
            var oneWallNode = walls.children[index];
            var oneWallResult = getNodeBasicResult(oneWallNode);
            wallsResult.push(oneWallResult);
          }

          oneResult.walls = wallsResult; //targets

          var targets = canvas.getChildByName("targets");
          var targetsResult = [];
          cc.log("setup targets");

          for (var index in targets.children) {
            var oneTargetNode = targets.children[index];
            var oneTargetResult = getNodeBasicResult(oneTargetNode);
            targetsResult.push(oneTargetResult);
          }

          oneResult.targets = targetsResult; //pathWaysNode

          var pathWaysNode = canvas.getChildByName("pathWaysNode");
          var pathWaysNodeResult = [];
          cc.log("setup pathWaysNode");

          for (var index in pathWaysNode.children) {
            var onePathWayNode = pathWaysNode.children[index];
            var onePathWayResult = {};
            onePathWayResult.name = onePathWayNode.name;
            onePathWayResult.children = [];

            for (var i in onePathWayNode.children) {
              var oneChildNode = onePathWayNode.children[i];
              var oneChildResult = getNodeBasicResult(oneChildNode);
              onePathWayResult.children.push(oneChildResult);
            }

            pathWaysNodeResult.push(onePathWayResult);
          }

          oneResult.pathWaysNode = pathWaysNodeResult; //bullets

          var bullets = canvas.getChildByName("bullets");
          var bulletsResult = [];
          cc.log("setup bullets");

          for (var index in bullets.children) {
            var oneBulletNode = bullets.children[index];
            var oneBulletResult = {};
            var basicResult = getNodeBasicResult(oneBulletNode);
            oneBulletResult.basic = basicResult;
            var bulletMgr = oneBulletNode.getComponent("bulletMgr");
            var mgrResult = {};
            mgrResult.bulletType = bulletMgr.bulletType;
            mgrResult.pathWaysNodeName = "";

            if (bulletMgr.pathWaysNode != null) {
              mgrResult.pathWaysNodeName = bulletMgr.pathWaysNode.name;
            }

            oneBulletResult.mgr = mgrResult;
            bulletsResult.push(oneBulletResult);
          }

          oneResult.bullets = bulletsResult;
          result[levelId.toString()] = oneResult;
          completNum += 1;
          check(completNum);
        });
      };

      setupResult(sceneName, levelId);
    }
  } // update (dt) {},

});
var gameMgr = new GameMgr();
module.exports = gameMgr;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/systems/ensureSys_notUse/ensureSystemNodeMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '96611KWWBZMSI+yqEf4pl0U', 'ensureSystemNodeMgr');
// scripts/systems/ensureSys_notUse/ensureSystemNodeMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    desText: {
      get: function get() {
        if (this._desText == null) {
          this.desText = "default value";
        }

        return this._desText;
      },
      set: function set(value) {
        this._desText = value;
        var desLabel = this.node.getChildByName("others").getChildByName("desLabel");
        desLabel.getComponent(cc.Label).string = value;
      }
    },
    onEnsureButtonClick: null,
    onCancleButtonClick: null,
    canClose: {
      get: function get() {
        return this._canClose;
      },
      set: function set(value) {
        this._canClose = value;
        var closeButtonNode = this.node.getChildByName("others").getChildByName("closeButton");
        closeButtonNode.active = value;
      }
    },
    cancelButtonText: {
      get: function get() {
        return this._cancelButtonText;
      },
      set: function set(value) {
        this._cancelButtonText = value;
        var cancelButtonNode = this.node.getChildByName("others").getChildByName("cancelButton");
        cancelButtonNode.getChildByName("textLabel").getComponent(cc.Label).string = value;
      }
    },
    ensureButtonText: {
      get: function get() {
        return this._ensureButtonText;
      },
      set: function set(value) {
        this._ensureButtonText = value;
        var ensureButtonNode = this.node.getChildByName("others").getChildByName("ensureButton");
        ensureButtonNode.getChildByName("textLabel").getComponent(cc.Label).string = value;
      }
    },
    ensureButtonWillAutoCloseUi: true,
    cancelButtonWillAutoCloseUi: true,
    isExsistCancelButton: {
      get: function get() {
        if (this._isExsistCancelButton == null) {
          this._isExsistCancelButton = true;
        }

        return this._isExsistCancelButton;
      },
      set: function set(value) {
        this._isExsistCancelButton = value;

        if (value == false) {
          this.node.getChildByName("others").getChildByName("cancelButton").active = false;
          this.node.getChildByName("others").getChildByName("ensureButton").x = 0;
        }
      }
    }
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    var bg = this.node.getChildByName("bg");
    bg.on("touchstart", function () {}, this);
    var winSize = cc.winSize;
    bg.width = winSize.width;
    bg.height = winSize.height;
    var others = this.node.getChildByName("others");
    var closeButtonNode = others.getChildByName("closeButton");
    closeButtonNode.on("click", this.close, this);
    var ensureButtonNode = others.getChildByName("ensureButton");
    ensureButtonNode.on("click", this.onEnsure, this);
    var cancelButtonNode = others.getChildByName("cancelButton");
    cancelButtonNode.on("click", this.onCancel, this);
  },
  start: function start() {},
  onEnsure: function onEnsure() {
    if (this.ensureButtonWillAutoCloseUi == true) {
      this.close();
    }

    if (this.onEnsureButtonClick != null) {
      this.onEnsureButtonClick();
    }
  },
  onCancel: function onCancel() {
    if (this.cancelButtonWillAutoCloseUi == true) {
      this.close();
    }

    if (this.onCancleButtonClick != null) {
      this.onCancleButtonClick();
    }
  },
  close: function close() {
    var others = this.node.getChildByName("others");
    var self = this;
    cc.tween(others).to(0.3, {
      scale: 0
    }).call(function () {
      self.node.destroy();
    }).start();
  },
  show: function show(target) {
    var others = this.node.getChildByName("others");
    others.scale = 0;
    target.addChild(this.node);
    cc.tween(others).to(0.3, {
      scale: 1
    }).start();
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/systems/storySys/storySysMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e7a64OS7/RMK7rBUEbD4B4U', 'storySysMgr');
// scripts/systems/storySys/storySysMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    contentNode: cc.Node,
    storyTextNodePrefab: cc.Prefab,
    disBetweenStoryTextNodes: 50,
    continueLabelNode: cc.Node,
    completeButtonNode: cc.Node,
    startDelayTime: 1,
    storyId: null,
    storyTextNodes: [],
    status: {
      get: function get() {
        return this._status;
      },
      set: function set(value) {
        this._status = value; // 1 = start showing a node
        // 2 = showing complete , wating for tap to next
        // 3 = all nodes showing complete , wating for click button to complete

        switch (value) {
          case 1:
            this.continueLabelNode.active = false;
            this.completeButtonNode.active = false;
            break;

          case 2:
            this.continueLabelNode.active = true;
            this.completeButtonNode.active = false;
            break;

          case 3:
            this.continueLabelNode.active = false;
            this.completeButtonNode.active = true;
            break;

          default:
            cc.log("STORYSYSMGR: WRONG STATUS VALUE PROVIDED");
        }
      }
    },
    header: 100,
    footer: 100,
    sectionDis: 50,
    totalHeight: 0,
    totalTextNodeNum: null,
    currentNum: null,
    textIds: null
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    var self = this;
    var bg = this.node.getChildByName("bg");
    bg.width = cc.winSize.width;
    bg.height = cc.winSize.height;
    this.node.width = bg.width;
    this.node.height = bg.height;
    var monitoredNode = this.contentNode.getChildByName("tapMonitoredNode");
    monitoredNode.width = bg.width;
    monitoredNode.height = bg.height; //cc.log(bg.width,bg.height)

    monitoredNode.on("touchstart", function () {
      if (self.status == 2) {
        self.currentNum += 1;

        var str = require("textConfig").getTextByIdAndLanguageType(self.textIds[self.currentNum - 1]);

        self._showOneStoryText(str);
      }
    }, this);
    this.completeButtonNode.on("click", function () {
      if (self.status == 3) {
        self.completeStory();
      }
    });
    this.completeButtonNode.getChildByName("New Label").getComponent(cc.Label).string = require("textConfig").getTextByIdAndLanguageType(122);
    cc.tween(this.continueLabelNode).repeatForever(cc.tween().to(0.3, {
      opacity: 0
    }).to(0.3, {
      opacity: 255
    })).start();
    var scrollContainer = this.node.getChildByName("scrollContainer");
    scrollContainer.y = bg.height / 2 - this.footer;
    this.continueLabelNode.y = -bg.height / 2 + this.footer + this.completeButtonNode.height / 2;
    this.completeButtonNode.y = -bg.height / 2 + this.footer + this.completeButtonNode.height / 2;
    var tempHeight = bg.height - this.header - this.footer - this.completeButtonNode.height - this.sectionDis;
    scrollContainer.height = tempHeight;
    scrollContainer.getChildByName("view").height = tempHeight;
    this.contentNode.height = tempHeight;
  },
  start: function start() {
    this.showStory();
  },
  showStory: function showStory() {
    if (this.storyId == null) {
      cc.log("NO STORY ID PROVIDED");
      return;
    }

    var storyConfig = require("storyConfig");

    var key = "story_" + this.storyId.toString();
    var config = storyConfig[key];
    var textIds = config.textIds;
    this.textIds = textIds;
    this.totalTextNodeNum = textIds.length;
    this.currentNum = 1;

    var str = require("textConfig").getTextByIdAndLanguageType(textIds[0]);

    var self = this;
    cc.tween(this.node).delay(self.startDelayTime).call(function () {
      self._showOneStoryText(str);
    }).start();
  },
  completeStory: function completeStory() {
    var networkMgr = require("networkMgr");

    var messageObj = networkMgr.makeMessageObj("storyModule", "completeCurrentMessageType");
    messageObj.message.playerId = require("dataMgr").playerData.id;

    messageObj.successCallBack = function (xhr) {
      var response = xhr.responseText;
      response = JSON.parse(response);

      if (response.type == "success") {
        var storyId = response.storyId;
        require("dataMgr").playerData.storySysId = storyId;

        require("systemsMgr").closeSystem("storySys", 3);
      }
    };

    this.completeButtonNode.getComponent(cc.Button).interactable = false;
    networkMgr.sendMessageByMsgObj(messageObj);
  },
  _showOneStoryText: function _showOneStoryText(str) {
    this.status = 1;
    var node = cc.instantiate(this.storyTextNodePrefab);
    node.getComponent(cc.Label).string = str;

    node.getComponent(cc.Label)._forceUpdateRenderData();

    node.y = -this.totalHeight;
    this.totalHeight += node.height + this.disBetweenStoryTextNodes;

    if (this.contentNode.height < this.totalHeight) {
      this.contentNode.height = this.totalHeight;
      this.node.getChildByName("scrollContainer").getComponent(cc.ScrollView).vertical = true;
    }

    node.opacity = 0;
    this.contentNode.addChild(node);
    var self = this;
    cc.tween(node).to(0.5, {
      opacity: 255
    }).call(function () {
      if (self.currentNum == self.totalTextNodeNum) {
        self.status = 3;
      } else {
        self.status = 2;
      }
    }).start();
  },
  onWillOpend: function onWillOpend(givenStoryId) {
    this.storyId = givenStoryId;
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/systems/signInSys/signInSysMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'a6895xyaLROOZK1s1NHLJeI', 'signInSysMgr');
// scripts/systems/signInSys/signInSysMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    ensureButtonNode: cc.Node,
    cancelButtonNode: cc.Node,
    desLabelNode: cc.Label,
    physicalPowerAddNum: 0,
    heartAddNum: 0,
    addRateForAd: 0,
    sysName: "signInSys"
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {
    this.setupData();
    this.setupUI();
  },
  setupUI: function setupUI() {
    var status = require("dataMgr").playerData.signInStatus; //1 = not sign in
    //2 = common in
    //3 = ad sign in


    var desStr = "";

    var textConfig = require("textConfig");

    switch (status) {
      case 1:
        desStr = textConfig.getTextByIdAndLanguageType(115) + this.physicalPowerAddNum + textConfig.getTextByIdAndLanguageType(116) + this.heartAddNum + ", ";
        desStr = desStr + textConfig.getTextByIdAndLanguageType(117);
        this.cancelButtonNode.getChildByName("textLabel").getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(118);
        this.ensureButtonNode.getChildByName("textLabel").getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(113);
        break;

      case 2:
        desStr = textConfig.getTextByIdAndLanguageType(119) + ((this.addRateForAd - 1) * this.physicalPowerAddNum).toString();
        desStr = desStr + textConfig.getTextByIdAndLanguageType(116) + ((this.addRateForAd - 1) * this.heartAddNum).toString();
        desStr = desStr + textConfig.getTextByIdAndLanguageType(120);
        this.ensureButtonNode.getChildByName("textLabel").getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(113);
        this.cancelButtonNode.getChildByName("textLabel").getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(114);
        break;

      case 3:
        desStr = textConfig.getTextByIdAndLanguageType(121);
        this.cancelButtonNode.active = false;
        this.ensureButtonNode.x = 0;
        this.ensureButtonNode.getChildByName("textLabel").getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(122);
        break;
    }

    if (desStr == "") {
      cc.log("wrong signIn status");
      return;
    }

    this.desLabelNode.getComponent(cc.Label).string = desStr;
  },
  setupData: function setupData() {
    var config = require("signInSysConfig");

    this.physicalPowerAddNum = config.physicalPowerAddNum;
    this.heartAddNum = config.heartAddNum;
    this.addRateForAd = config.addRateForAd;
  },
  onClickEnsureButton: function onClickEnsureButton() {
    var status = require("dataMgr").playerData.signInStatus;

    switch (status) {
      case 1:
        var advMgr = require("advertisMgr");

        advMgr.delegate = this;
        advMgr.showVideoAd();
        break;

      case 2:
        var advMgr = require("advertisMgr");

        advMgr.delegate = this;
        advMgr.showVideoAd();
        break;

      case 3:
        require("systemsMgr").closeSystem(this.sysName);

        break;
    }
  },
  onClickCancelButton: function onClickCancelButton() {
    var status = require("dataMgr").playerData.signInStatus;

    switch (status) {
      case 1:
        this.signIn(1);
        break;

      case 2:
        require("systemsMgr").closeSystem(this.sysName);

        break;

      case 3:
        // if status == 3, cancel button will not appear
        cc.log("some wrong thing happen from onClickCancelButton");
        break;
    }
  },
  signIn: function signIn(signInType) {
    var networkMgr = require("networkMgr");

    var msgObj = networkMgr.makeMessageObj("signInModule", "signInMessageType");
    msgObj.message.signInType = signInType;
    msgObj.message.playerId = require("dataMgr").playerData.id;
    var self = this;

    msgObj.successCallBack = function (xhr) {
      var response = xhr.responseText;
      response = JSON.parse(response);

      if (response.type == "success") {
        var physicalPower = response.physicalPower;
        var heart = response.heart;
        self.onSignInSuccess(signInType, physicalPower, heart);
      }
    };

    networkMgr.sendMessageByMsgObj(msgObj);
  },
  onSignInSuccess: function onSignInSuccess(signInType, physicalPower, heart) {
    switch (signInType) {
      case 1:
        require("dataMgr").playerData.signInStatus = 2;
        break;

      case 2:
        require("dataMgr").playerData.signInStatus = 3;
        break;

      case 3:
        require("dataMgr").playerData.signInStatus = 3;
        break;
    }

    require("dataMgr").playerData.physicalPower = physicalPower;
    require("dataMgr").playerData.heart = heart;

    require("notificationMgr").showNoti("签到成功");

    require("systemsMgr").closeSystem(this.sysName);
  },
  //advertis delegate
  onVideoAdEnd: function onVideoAdEnd() {
    var status = require("dataMgr").playerData.signInStatus;

    switch (status) {
      case 1:
        this.signIn(2);
        break;

      case 2:
        this.signIn(3);
        break;
    }
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/configs/mailSysConfig.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '4a64feyfXJHbZN/RRBmqrAY', 'mailSysConfig');
// configs/mailSysConfig.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var mailSysConfig = {
  mainLine: {
    tagNameTextId: 127,
    conditions: [{
      conditionType: 1,
      conditionPara: 2,
      mailId: 1001
    }, {
      conditionType: 1,
      conditionPara: 5,
      mailId: 1002
    }, {
      conditionType: 1,
      conditionPara: 10,
      mailId: 1003
    }]
  },
  branchLine1: {
    tagNameTextId: 128,
    conditions: [{
      conditionType: 2,
      conditionPara: {
        levelId: 3,
        minStepNum: 8
      },
      mailId: 1101
    }]
  }
};
module.exports = mailSysConfig;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9jb25maWdzL21haWxTeXNDb25maWcuanMiXSwibmFtZXMiOlsibWFpbFN5c0NvbmZpZyIsIm1haW5MaW5lIiwidGFnTmFtZVRleHRJZCIsImNvbmRpdGlvbnMiLCJjb25kaXRpb25UeXBlIiwiY29uZGl0aW9uUGFyYSIsIm1haWxJZCIsImJyYW5jaExpbmUxIiwibGV2ZWxJZCIsIm1pblN0ZXBOdW0iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLElBQUlBLGFBQWEsR0FBRztBQUNoQkMsRUFBQUEsUUFBUSxFQUFFO0FBQ05DLElBQUFBLGFBQWEsRUFBRSxHQURUO0FBRU5DLElBQUFBLFVBQVUsRUFBRSxDQUNSO0FBQ0lDLE1BQUFBLGFBQWEsRUFBRSxDQURuQjtBQUVJQyxNQUFBQSxhQUFhLEVBQUUsQ0FGbkI7QUFHSUMsTUFBQUEsTUFBTSxFQUFFO0FBSFosS0FEUSxFQU1SO0FBQ0lGLE1BQUFBLGFBQWEsRUFBRSxDQURuQjtBQUVJQyxNQUFBQSxhQUFhLEVBQUUsQ0FGbkI7QUFHSUMsTUFBQUEsTUFBTSxFQUFFO0FBSFosS0FOUSxFQVdSO0FBQ0lGLE1BQUFBLGFBQWEsRUFBRSxDQURuQjtBQUVJQyxNQUFBQSxhQUFhLEVBQUUsRUFGbkI7QUFHSUMsTUFBQUEsTUFBTSxFQUFFO0FBSFosS0FYUTtBQUZOLEdBRE07QUFzQmhCQyxFQUFBQSxXQUFXLEVBQUU7QUFDVEwsSUFBQUEsYUFBYSxFQUFFLEdBRE47QUFFVEMsSUFBQUEsVUFBVSxFQUFFLENBQ1I7QUFDSUMsTUFBQUEsYUFBYSxFQUFFLENBRG5CO0FBRUlDLE1BQUFBLGFBQWEsRUFBRTtBQUNYRyxRQUFBQSxPQUFPLEVBQUUsQ0FERTtBQUVYQyxRQUFBQSxVQUFVLEVBQUU7QUFGRCxPQUZuQjtBQU1JSCxNQUFBQSxNQUFNLEVBQUU7QUFOWixLQURRO0FBRkg7QUF0QkcsQ0FBcEI7QUFzQ0FJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlgsYUFBakIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExlYXJuIGNjLkNsYXNzOlxuLy8gIC0gW0NoaW5lc2VdIGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL2NsYXNzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vZG9jcy5jb2NvczJkLXgub3JnL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9jbGFzcy5odG1sXG4vLyBMZWFybiBBdHRyaWJ1dGU6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHA6Ly9kb2NzLmNvY29zMmQteC5vcmcvY3JlYXRvci9tYW51YWwvZW4vc2NyaXB0aW5nL3JlZmVyZW5jZS9hdHRyaWJ1dGVzLmh0bWxcbi8vIExlYXJuIGxpZmUtY3ljbGUgY2FsbGJhY2tzOlxuLy8gIC0gW0NoaW5lc2VdIGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL2xpZmUtY3ljbGUtY2FsbGJhY2tzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwczovL3d3dy5jb2NvczJkLXgub3JnL2RvY3MvY3JlYXRvci9tYW51YWwvZW4vc2NyaXB0aW5nL2xpZmUtY3ljbGUtY2FsbGJhY2tzLmh0bWxcblxudmFyIG1haWxTeXNDb25maWcgPSB7XG4gICAgbWFpbkxpbmU6IHtcbiAgICAgICAgdGFnTmFtZVRleHRJZDogMTI3LFxuICAgICAgICBjb25kaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uZGl0aW9uVHlwZTogMSxcbiAgICAgICAgICAgICAgICBjb25kaXRpb25QYXJhOiAyLFxuICAgICAgICAgICAgICAgIG1haWxJZDogMTAwMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb25kaXRpb25UeXBlOiAxLFxuICAgICAgICAgICAgICAgIGNvbmRpdGlvblBhcmE6IDUsXG4gICAgICAgICAgICAgICAgbWFpbElkOiAxMDAyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbmRpdGlvblR5cGU6IDEsXG4gICAgICAgICAgICAgICAgY29uZGl0aW9uUGFyYTogMTAsXG4gICAgICAgICAgICAgICAgbWFpbElkOiAxMDAzXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuXG4gICAgYnJhbmNoTGluZTE6IHtcbiAgICAgICAgdGFnTmFtZVRleHRJZDogMTI4LFxuICAgICAgICBjb25kaXRpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uZGl0aW9uVHlwZTogMixcbiAgICAgICAgICAgICAgICBjb25kaXRpb25QYXJhOiB7XG4gICAgICAgICAgICAgICAgICAgIGxldmVsSWQ6IDMsXG4gICAgICAgICAgICAgICAgICAgIG1pblN0ZXBOdW06IDhcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1haWxJZDogMTEwMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFpbFN5c0NvbmZpZyJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/configs/storyConfig.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '9bd8cDrCrJFmKs1dgH/hEgQ', 'storyConfig');
// configs/storyConfig.js

"use strict";

var storyConfig = {
  "story_9001": {
    id: 9001,
    textIds: [160, 160],
    bgmPath: "musics/bgm_006"
  }
};
module.exports = storyConfig;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9jb25maWdzL3N0b3J5Q29uZmlnLmpzIl0sIm5hbWVzIjpbInN0b3J5Q29uZmlnIiwiaWQiLCJ0ZXh0SWRzIiwiYmdtUGF0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsV0FBVyxHQUFHO0FBQ2QsZ0JBQWM7QUFDVkMsSUFBQUEsRUFBRSxFQUFFLElBRE07QUFFVkMsSUFBQUEsT0FBTyxFQUFFLENBQ0wsR0FESyxFQUVMLEdBRkssQ0FGQztBQU1WQyxJQUFBQSxPQUFPLEVBQUU7QUFOQztBQURBLENBQWxCO0FBV0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkwsV0FBakIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbInZhciBzdG9yeUNvbmZpZyA9IHtcbiAgICBcInN0b3J5XzkwMDFcIjoge1xuICAgICAgICBpZDogOTAwMSxcbiAgICAgICAgdGV4dElkczogW1xuICAgICAgICAgICAgMTYwLFxuICAgICAgICAgICAgMTYwXG4gICAgICAgIF0sXG4gICAgICAgIGJnbVBhdGg6IFwibXVzaWNzL2JnbV8wMDZcIlxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yeUNvbmZpZyJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/configs/sectionConfig.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '658e1kOKA9II7ENe3y2+Jif', 'sectionConfig');
// configs/sectionConfig.js

"use strict";

var sectionConfig = {
  "1": {
    sectionTitleTextId: 102,
    sectionDescripTextId: 103,
    levels: [1, 2, 3, 4, 5],
    bgmPath: "musics/bgm_001",
    levelNodePositions: []
  },
  "2": {
    sectionTitleTextId: 104,
    sectionDescripTextId: 105,
    levels: [6, 7, 8, 9, 10],
    bgmPath: "musics/bgm_002",
    levelNodePositions: []
  },
  "3": {
    sectionTitleTextId: 106,
    sectionDescripTextId: 107,
    levels: [11, 12, 13, 14, 15],
    bgmPath: "musics/bgm_003",
    levelNodePositions: []
  },
  "4": {
    sectionTitleTextId: 108,
    sectionDescripTextId: 109,
    levels: [21, 22, 23],
    bgmPath: "musics/bgm_004",
    levelNodePositions: [16, 17, 18, 19, 20]
  },
  "5": {
    sectionTitleTextId: 110,
    sectionDescripTextId: 111,
    levels: [21, 22, 23, 24, 25],
    bgmPath: "musics/bgm_005",
    levelNodePositions: []
  }
};
module.exports = sectionConfig;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9jb25maWdzL3NlY3Rpb25Db25maWcuanMiXSwibmFtZXMiOlsic2VjdGlvbkNvbmZpZyIsInNlY3Rpb25UaXRsZVRleHRJZCIsInNlY3Rpb25EZXNjcmlwVGV4dElkIiwibGV2ZWxzIiwiYmdtUGF0aCIsImxldmVsTm9kZVBvc2l0aW9ucyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsYUFBYSxHQUFHO0FBQ2hCLE9BQUs7QUFDREMsSUFBQUEsa0JBQWtCLEVBQUUsR0FEbkI7QUFFREMsSUFBQUEsb0JBQW9CLEVBQUUsR0FGckI7QUFHREMsSUFBQUEsTUFBTSxFQUFFLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsQ0FIUDtBQUlEQyxJQUFBQSxPQUFPLEVBQUUsZ0JBSlI7QUFLREMsSUFBQUEsa0JBQWtCLEVBQUU7QUFMbkIsR0FEVztBQVFoQixPQUFLO0FBQ0RKLElBQUFBLGtCQUFrQixFQUFFLEdBRG5CO0FBRURDLElBQUFBLG9CQUFvQixFQUFDLEdBRnBCO0FBR0RDLElBQUFBLE1BQU0sRUFBRSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxFQUFULENBSFA7QUFJREMsSUFBQUEsT0FBTyxFQUFFLGdCQUpSO0FBS0RDLElBQUFBLGtCQUFrQixFQUFFO0FBTG5CLEdBUlc7QUFlaEIsT0FBSztBQUNESixJQUFBQSxrQkFBa0IsRUFBRSxHQURuQjtBQUVEQyxJQUFBQSxvQkFBb0IsRUFBRSxHQUZyQjtBQUdEQyxJQUFBQSxNQUFNLEVBQUUsQ0FBQyxFQUFELEVBQUksRUFBSixFQUFPLEVBQVAsRUFBVSxFQUFWLEVBQWEsRUFBYixDQUhQO0FBSURDLElBQUFBLE9BQU8sRUFBRSxnQkFKUjtBQUtEQyxJQUFBQSxrQkFBa0IsRUFBRTtBQUxuQixHQWZXO0FBc0JoQixPQUFLO0FBQ0RKLElBQUFBLGtCQUFrQixFQUFFLEdBRG5CO0FBRURDLElBQUFBLG9CQUFvQixFQUFFLEdBRnJCO0FBR0RDLElBQUFBLE1BQU0sRUFBRSxDQUFDLEVBQUQsRUFBSSxFQUFKLEVBQU8sRUFBUCxDQUhQO0FBSURDLElBQUFBLE9BQU8sRUFBRSxnQkFKUjtBQUtEQyxJQUFBQSxrQkFBa0IsRUFBRSxDQUFDLEVBQUQsRUFBSSxFQUFKLEVBQU8sRUFBUCxFQUFVLEVBQVYsRUFBYSxFQUFiO0FBTG5CLEdBdEJXO0FBNkJoQixPQUFLO0FBQ0RKLElBQUFBLGtCQUFrQixFQUFFLEdBRG5CO0FBRURDLElBQUFBLG9CQUFvQixFQUFFLEdBRnJCO0FBR0RDLElBQUFBLE1BQU0sRUFBRSxDQUFDLEVBQUQsRUFBSSxFQUFKLEVBQU8sRUFBUCxFQUFVLEVBQVYsRUFBYSxFQUFiLENBSFA7QUFJREMsSUFBQUEsT0FBTyxFQUFFLGdCQUpSO0FBS0RDLElBQUFBLGtCQUFrQixFQUFFO0FBTG5CO0FBN0JXLENBQXBCO0FBdUNBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJQLGFBQWpCIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc2VjdGlvbkNvbmZpZyA9IHtcbiAgICBcIjFcIjoge1xuICAgICAgICBzZWN0aW9uVGl0bGVUZXh0SWQ6IDEwMixcbiAgICAgICAgc2VjdGlvbkRlc2NyaXBUZXh0SWQ6IDEwMyxcbiAgICAgICAgbGV2ZWxzOiBbMSwyLDMsNCw1XSxcbiAgICAgICAgYmdtUGF0aDogXCJtdXNpY3MvYmdtXzAwMVwiLFxuICAgICAgICBsZXZlbE5vZGVQb3NpdGlvbnM6IFtdXG4gICAgfSxcbiAgICBcIjJcIjoge1xuICAgICAgICBzZWN0aW9uVGl0bGVUZXh0SWQ6IDEwNCxcbiAgICAgICAgc2VjdGlvbkRlc2NyaXBUZXh0SWQ6MTA1ICxcbiAgICAgICAgbGV2ZWxzOiBbNiw3LDgsOSwxMF0sXG4gICAgICAgIGJnbVBhdGg6IFwibXVzaWNzL2JnbV8wMDJcIixcbiAgICAgICAgbGV2ZWxOb2RlUG9zaXRpb25zOiBbXVxuICAgIH0sXG4gICAgXCIzXCI6IHtcbiAgICAgICAgc2VjdGlvblRpdGxlVGV4dElkOiAxMDYsXG4gICAgICAgIHNlY3Rpb25EZXNjcmlwVGV4dElkOiAxMDcsXG4gICAgICAgIGxldmVsczogWzExLDEyLDEzLDE0LDE1XSxcbiAgICAgICAgYmdtUGF0aDogXCJtdXNpY3MvYmdtXzAwM1wiLFxuICAgICAgICBsZXZlbE5vZGVQb3NpdGlvbnM6IFtdXG4gICAgfSxcbiAgICBcIjRcIjoge1xuICAgICAgICBzZWN0aW9uVGl0bGVUZXh0SWQ6IDEwOCxcbiAgICAgICAgc2VjdGlvbkRlc2NyaXBUZXh0SWQ6IDEwOSxcbiAgICAgICAgbGV2ZWxzOiBbMjEsMjIsMjNdLFxuICAgICAgICBiZ21QYXRoOiBcIm11c2ljcy9iZ21fMDA0XCIsXG4gICAgICAgIGxldmVsTm9kZVBvc2l0aW9uczogWzE2LDE3LDE4LDE5LDIwXVxuICAgIH0sXG4gICAgXCI1XCI6IHtcbiAgICAgICAgc2VjdGlvblRpdGxlVGV4dElkOiAxMTAsXG4gICAgICAgIHNlY3Rpb25EZXNjcmlwVGV4dElkOiAxMTEsXG4gICAgICAgIGxldmVsczogWzIxLDIyLDIzLDI0LDI1XSxcbiAgICAgICAgYmdtUGF0aDogXCJtdXNpY3MvYmdtXzAwNVwiLFxuICAgICAgICBsZXZlbE5vZGVQb3NpdGlvbnM6IFtdXG4gICAgfVxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gc2VjdGlvbkNvbmZpZyJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/configs/signInSysConfig.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '51917pM+R1Dg5TFm0DDHJ3m', 'signInSysConfig');
// configs/signInSysConfig.js

"use strict";

var signInSysConfig = {
  physicalPowerAddNum: 10,
  heartAddNum: 20,
  addRateForAd: 2
};
module.exports = signInSysConfig;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9jb25maWdzL3NpZ25JblN5c0NvbmZpZy5qcyJdLCJuYW1lcyI6WyJzaWduSW5TeXNDb25maWciLCJwaHlzaWNhbFBvd2VyQWRkTnVtIiwiaGVhcnRBZGROdW0iLCJhZGRSYXRlRm9yQWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLGVBQWUsR0FBRztBQUNsQkMsRUFBQUEsbUJBQW1CLEVBQUUsRUFESDtBQUVsQkMsRUFBQUEsV0FBVyxFQUFFLEVBRks7QUFHbEJDLEVBQUFBLFlBQVksRUFBRTtBQUhJLENBQXRCO0FBTUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkwsZUFBakIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbInZhciBzaWduSW5TeXNDb25maWcgPSB7XG4gICAgcGh5c2ljYWxQb3dlckFkZE51bTogMTAsXG4gICAgaGVhcnRBZGROdW06IDIwLFxuICAgIGFkZFJhdGVGb3JBZDogMlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNpZ25JblN5c0NvbmZpZyJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/systems/welfarySys/welfarySysMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b76ban9vyBAI6HjYNJk1oHH', 'welfarySysMgr');
// scripts/systems/welfarySys/welfarySysMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    desLabelNode: cc.Node,
    ensureButtonNode: cc.Node,
    cancelButtonNode: cc.Node,
    systemName: "welfarySys"
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {
    this.setupInitUI();
  },
  onClickEnsureButton: function onClickEnsureButton() {
    var advMgr = require("advertisMgr");

    advMgr.delegate = this;
    advMgr.showVideoAd();
  },
  onClickCancelButton: function onClickCancelButton() {
    require("systemsMgr").closeSystem(this.systemName);
  },
  setupInitUI: function setupInitUI() {
    var flag = require("dataMgr").playerData.initAdWatchedFlag;

    if (flag == 0) {
      this.desLabelNode.getComponent(cc.Label).string = require("textConfig").getTextByIdAndLanguageType(112);
      this.ensureButtonNode.getChildByName("textLabel").getComponent(cc.Label).string = require("textConfig").getTextByIdAndLanguageType(113);
      this.cancelButtonNode.getChildByName("textLabel").getComponent(cc.Label).string = require("textConfig").getTextByIdAndLanguageType(114);
    } else if (flag == 1) {
      this.desLabelNode.getComponent(cc.Label).string = "嗯？ 这个界面不应该出现的，你已经领取过福利啦~";
    }
  },
  //advertis delegate
  onVideoAdEnd: function onVideoAdEnd() {
    var commitBody = {
      initAdWatchedFlag: 1
    };
    var self = this;

    var successCallBack = function successCallBack() {
      require("dataMgr").playerData.initAdWatchedFlag = 1;

      require("systemsMgr").closeSystem(self.systemName);

      var currentScene = cc.director.getScene();

      if (currentScene.name == "mainScene") {
        currentScene.getChildByName("Canvas").getChildByName("welfaryButton").active = false;
      }
    };

    require("dataMgr").commitPlayerDataToServer(commitBody, successCallBack);
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL3N5c3RlbXMvd2VsZmFyeVN5cy93ZWxmYXJ5U3lzTWdyLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwiZGVzTGFiZWxOb2RlIiwiTm9kZSIsImVuc3VyZUJ1dHRvbk5vZGUiLCJjYW5jZWxCdXR0b25Ob2RlIiwic3lzdGVtTmFtZSIsInN0YXJ0Iiwic2V0dXBJbml0VUkiLCJvbkNsaWNrRW5zdXJlQnV0dG9uIiwiYWR2TWdyIiwicmVxdWlyZSIsImRlbGVnYXRlIiwic2hvd1ZpZGVvQWQiLCJvbkNsaWNrQ2FuY2VsQnV0dG9uIiwiY2xvc2VTeXN0ZW0iLCJmbGFnIiwicGxheWVyRGF0YSIsImluaXRBZFdhdGNoZWRGbGFnIiwiZ2V0Q29tcG9uZW50IiwiTGFiZWwiLCJzdHJpbmciLCJnZXRUZXh0QnlJZEFuZExhbmd1YWdlVHlwZSIsImdldENoaWxkQnlOYW1lIiwib25WaWRlb0FkRW5kIiwiY29tbWl0Qm9keSIsInNlbGYiLCJzdWNjZXNzQ2FsbEJhY2siLCJjdXJyZW50U2NlbmUiLCJkaXJlY3RvciIsImdldFNjZW5lIiwibmFtZSIsImFjdGl2ZSIsImNvbW1pdFBsYXllckRhdGFUb1NlcnZlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFHTEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLElBQUFBLFlBQVksRUFBRUosRUFBRSxDQUFDSyxJQWhCVDtBQWlCUkMsSUFBQUEsZ0JBQWdCLEVBQUVOLEVBQUUsQ0FBQ0ssSUFqQmI7QUFrQlJFLElBQUFBLGdCQUFnQixFQUFFUCxFQUFFLENBQUNLLElBbEJiO0FBbUJSRyxJQUFBQSxVQUFVLEVBQUU7QUFuQkosR0FIUDtBQXlCTDtBQUVBO0FBRUFDLEVBQUFBLEtBN0JLLG1CQTZCSTtBQUNMLFNBQUtDLFdBQUw7QUFDSCxHQS9CSTtBQWlDTEMsRUFBQUEsbUJBakNLLGlDQWlDaUI7QUFDbEIsUUFBSUMsTUFBTSxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUFwQjs7QUFDQUQsSUFBQUEsTUFBTSxDQUFDRSxRQUFQLEdBQWtCLElBQWxCO0FBQ0FGLElBQUFBLE1BQU0sQ0FBQ0csV0FBUDtBQUNILEdBckNJO0FBdUNMQyxFQUFBQSxtQkF2Q0ssaUNBdUNpQjtBQUNsQkgsSUFBQUEsT0FBTyxDQUFDLFlBQUQsQ0FBUCxDQUFzQkksV0FBdEIsQ0FBa0MsS0FBS1QsVUFBdkM7QUFDSCxHQXpDSTtBQTJDTEUsRUFBQUEsV0EzQ0sseUJBMkNTO0FBQ1YsUUFBSVEsSUFBSSxHQUFHTCxPQUFPLENBQUMsU0FBRCxDQUFQLENBQW1CTSxVQUFuQixDQUE4QkMsaUJBQXpDOztBQUNBLFFBQUlGLElBQUksSUFBSSxDQUFaLEVBQWU7QUFDWCxXQUFLZCxZQUFMLENBQWtCaUIsWUFBbEIsQ0FBK0JyQixFQUFFLENBQUNzQixLQUFsQyxFQUF5Q0MsTUFBekMsR0FBa0RWLE9BQU8sQ0FBQyxZQUFELENBQVAsQ0FBc0JXLDBCQUF0QixDQUFpRCxHQUFqRCxDQUFsRDtBQUNBLFdBQUtsQixnQkFBTCxDQUFzQm1CLGNBQXRCLENBQXFDLFdBQXJDLEVBQWtESixZQUFsRCxDQUErRHJCLEVBQUUsQ0FBQ3NCLEtBQWxFLEVBQXlFQyxNQUF6RSxHQUFrRlYsT0FBTyxDQUFDLFlBQUQsQ0FBUCxDQUFzQlcsMEJBQXRCLENBQWlELEdBQWpELENBQWxGO0FBQ0EsV0FBS2pCLGdCQUFMLENBQXNCa0IsY0FBdEIsQ0FBcUMsV0FBckMsRUFBa0RKLFlBQWxELENBQStEckIsRUFBRSxDQUFDc0IsS0FBbEUsRUFBeUVDLE1BQXpFLEdBQWtGVixPQUFPLENBQUMsWUFBRCxDQUFQLENBQXNCVywwQkFBdEIsQ0FBaUQsR0FBakQsQ0FBbEY7QUFDSCxLQUpELE1BS0ssSUFBSU4sSUFBSSxJQUFJLENBQVosRUFBZTtBQUNoQixXQUFLZCxZQUFMLENBQWtCaUIsWUFBbEIsQ0FBK0JyQixFQUFFLENBQUNzQixLQUFsQyxFQUF5Q0MsTUFBekMsR0FBa0QsMEJBQWxEO0FBQ0g7QUFDSixHQXJESTtBQXVETDtBQUNBRyxFQUFBQSxZQXhESywwQkF3RFU7QUFDWCxRQUFJQyxVQUFVLEdBQUc7QUFDYlAsTUFBQUEsaUJBQWlCLEVBQUU7QUFETixLQUFqQjtBQUdBLFFBQUlRLElBQUksR0FBRyxJQUFYOztBQUNBLFFBQUlDLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsR0FBVztBQUM3QmhCLE1BQUFBLE9BQU8sQ0FBQyxTQUFELENBQVAsQ0FBbUJNLFVBQW5CLENBQThCQyxpQkFBOUIsR0FBa0QsQ0FBbEQ7O0FBQ0FQLE1BQUFBLE9BQU8sQ0FBQyxZQUFELENBQVAsQ0FBc0JJLFdBQXRCLENBQWtDVyxJQUFJLENBQUNwQixVQUF2Qzs7QUFDQSxVQUFJc0IsWUFBWSxHQUFHOUIsRUFBRSxDQUFDK0IsUUFBSCxDQUFZQyxRQUFaLEVBQW5COztBQUNBLFVBQUlGLFlBQVksQ0FBQ0csSUFBYixJQUFxQixXQUF6QixFQUFzQztBQUNsQ0gsUUFBQUEsWUFBWSxDQUFDTCxjQUFiLENBQTRCLFFBQTVCLEVBQXNDQSxjQUF0QyxDQUFxRCxlQUFyRCxFQUFzRVMsTUFBdEUsR0FBK0UsS0FBL0U7QUFDSDtBQUNKLEtBUEQ7O0FBUUFyQixJQUFBQSxPQUFPLENBQUMsU0FBRCxDQUFQLENBQW1Cc0Isd0JBQW5CLENBQTRDUixVQUE1QyxFQUF1REUsZUFBdkQ7QUFDSCxHQXRFSSxDQXVFTDs7QUF2RUssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGVhcm4gY2MuQ2xhc3M6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvY2xhc3MuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHA6Ly9kb2NzLmNvY29zMmQteC5vcmcvY3JlYXRvci9tYW51YWwvZW4vc2NyaXB0aW5nL2NsYXNzLmh0bWxcbi8vIExlYXJuIEF0dHJpYnV0ZTpcbi8vICAtIFtDaGluZXNlXSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL3poL3NjcmlwdGluZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1sXG4vLyAgLSBbRW5nbGlzaF0gaHR0cDovL2RvY3MuY29jb3MyZC14Lm9yZy9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxuLy8gTGVhcm4gbGlmZS1jeWNsZSBjYWxsYmFja3M6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHBzOi8vd3d3LmNvY29zMmQteC5vcmcvZG9jcy9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxuXG5jYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICAvLyBmb286IHtcbiAgICAgICAgLy8gICAgIC8vIEFUVFJJQlVURVM6XG4gICAgICAgIC8vICAgICBkZWZhdWx0OiBudWxsLCAgICAgICAgLy8gVGhlIGRlZmF1bHQgdmFsdWUgd2lsbCBiZSB1c2VkIG9ubHkgd2hlbiB0aGUgY29tcG9uZW50IGF0dGFjaGluZ1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGEgbm9kZSBmb3IgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgLy8gICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lLCAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0eXBlb2YgZGVmYXVsdFxuICAgICAgICAvLyAgICAgc2VyaWFsaXphYmxlOiB0cnVlLCAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHRydWVcbiAgICAgICAgLy8gfSxcbiAgICAgICAgLy8gYmFyOiB7XG4gICAgICAgIC8vICAgICBnZXQgKCkge1xuICAgICAgICAvLyAgICAgICAgIHJldHVybiB0aGlzLl9iYXI7XG4gICAgICAgIC8vICAgICB9LFxuICAgICAgICAvLyAgICAgc2V0ICh2YWx1ZSkge1xuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2JhciA9IHZhbHVlO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9LFxuICAgICAgICBkZXNMYWJlbE5vZGU6IGNjLk5vZGUsXG4gICAgICAgIGVuc3VyZUJ1dHRvbk5vZGU6IGNjLk5vZGUsXG4gICAgICAgIGNhbmNlbEJ1dHRvbk5vZGU6IGNjLk5vZGUsXG4gICAgICAgIHN5c3RlbU5hbWU6IFwid2VsZmFyeVN5c1wiXG4gICAgfSxcblxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxuXG4gICAgLy8gb25Mb2FkICgpIHt9LFxuXG4gICAgc3RhcnQgKCkge1xuICAgICAgICB0aGlzLnNldHVwSW5pdFVJKClcbiAgICB9LFxuXG4gICAgb25DbGlja0Vuc3VyZUJ1dHRvbigpIHtcbiAgICAgICAgdmFyIGFkdk1nciA9IHJlcXVpcmUoXCJhZHZlcnRpc01nclwiKVxuICAgICAgICBhZHZNZ3IuZGVsZWdhdGUgPSB0aGlzXG4gICAgICAgIGFkdk1nci5zaG93VmlkZW9BZCgpXG4gICAgfSxcblxuICAgIG9uQ2xpY2tDYW5jZWxCdXR0b24oKSB7XG4gICAgICAgIHJlcXVpcmUoXCJzeXN0ZW1zTWdyXCIpLmNsb3NlU3lzdGVtKHRoaXMuc3lzdGVtTmFtZSlcbiAgICB9LFxuICAgIFxuICAgIHNldHVwSW5pdFVJKCkge1xuICAgICAgICB2YXIgZmxhZyA9IHJlcXVpcmUoXCJkYXRhTWdyXCIpLnBsYXllckRhdGEuaW5pdEFkV2F0Y2hlZEZsYWdcbiAgICAgICAgaWYgKGZsYWcgPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXNMYWJlbE5vZGUuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSByZXF1aXJlKFwidGV4dENvbmZpZ1wiKS5nZXRUZXh0QnlJZEFuZExhbmd1YWdlVHlwZSgxMTIpXG4gICAgICAgICAgICB0aGlzLmVuc3VyZUJ1dHRvbk5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJ0ZXh0TGFiZWxcIikuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSByZXF1aXJlKFwidGV4dENvbmZpZ1wiKS5nZXRUZXh0QnlJZEFuZExhbmd1YWdlVHlwZSgxMTMpXG4gICAgICAgICAgICB0aGlzLmNhbmNlbEJ1dHRvbk5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJ0ZXh0TGFiZWxcIikuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSByZXF1aXJlKFwidGV4dENvbmZpZ1wiKS5nZXRUZXh0QnlJZEFuZExhbmd1YWdlVHlwZSgxMTQpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZmxhZyA9PSAxKSB7XG4gICAgICAgICAgICB0aGlzLmRlc0xhYmVsTm9kZS5nZXRDb21wb25lbnQoY2MuTGFiZWwpLnN0cmluZyA9IFwi5Zev77yfIOi/meS4queVjOmdouS4jeW6lOivpeWHuueOsOeahO+8jOS9oOW3sue7j+mihuWPlui/h+emj+WIqeWVpn5cIlxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vYWR2ZXJ0aXMgZGVsZWdhdGVcbiAgICBvblZpZGVvQWRFbmQoKSB7XG4gICAgICAgIHZhciBjb21taXRCb2R5ID0ge1xuICAgICAgICAgICAgaW5pdEFkV2F0Y2hlZEZsYWc6IDFcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2VsZiA9IHRoaXNcbiAgICAgICAgdmFyIHN1Y2Nlc3NDYWxsQmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVxdWlyZShcImRhdGFNZ3JcIikucGxheWVyRGF0YS5pbml0QWRXYXRjaGVkRmxhZyA9IDFcbiAgICAgICAgICAgIHJlcXVpcmUoXCJzeXN0ZW1zTWdyXCIpLmNsb3NlU3lzdGVtKHNlbGYuc3lzdGVtTmFtZSlcbiAgICAgICAgICAgIHZhciBjdXJyZW50U2NlbmUgPSBjYy5kaXJlY3Rvci5nZXRTY2VuZSgpXG4gICAgICAgICAgICBpZiAoY3VycmVudFNjZW5lLm5hbWUgPT0gXCJtYWluU2NlbmVcIikge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTY2VuZS5nZXRDaGlsZEJ5TmFtZShcIkNhbnZhc1wiKS5nZXRDaGlsZEJ5TmFtZShcIndlbGZhcnlCdXR0b25cIikuYWN0aXZlID0gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXF1aXJlKFwiZGF0YU1nclwiKS5jb21taXRQbGF5ZXJEYXRhVG9TZXJ2ZXIoY29tbWl0Qm9keSxzdWNjZXNzQ2FsbEJhY2spXG4gICAgfSxcbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcbn0pO1xuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/configs/addPropertySysConfig.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '45f0cLMfpZENYbF+crI7T9N', 'addPropertySysConfig');
// configs/addPropertySysConfig.js

"use strict";

var addPropertySysConfig = {
  //key is addTypeId
  "1": {
    physicalPower: 10
  },
  "2": {
    heart: 20
  }
};
module.exports = addPropertySysConfig;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9jb25maWdzL2FkZFByb3BlcnR5U3lzQ29uZmlnLmpzIl0sIm5hbWVzIjpbImFkZFByb3BlcnR5U3lzQ29uZmlnIiwicGh5c2ljYWxQb3dlciIsImhlYXJ0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxvQkFBb0IsR0FBRztBQUN2QjtBQUNBLE9BQUs7QUFDREMsSUFBQUEsYUFBYSxFQUFFO0FBRGQsR0FGa0I7QUFLdkIsT0FBSztBQUNEQyxJQUFBQSxLQUFLLEVBQUU7QUFETjtBQUxrQixDQUEzQjtBQVVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJKLG9CQUFqQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFkZFByb3BlcnR5U3lzQ29uZmlnID0ge1xuICAgIC8va2V5IGlzIGFkZFR5cGVJZFxuICAgIFwiMVwiOiB7XG4gICAgICAgIHBoeXNpY2FsUG93ZXI6IDEwXG4gICAgfSxcbiAgICBcIjJcIjoge1xuICAgICAgICBoZWFydDogMjBcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYWRkUHJvcGVydHlTeXNDb25maWciXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/bulletMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'eb08bsyH2tHY7xzE8jRRDlt', 'bulletMgr');
// scripts/bulletMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // bulletType: {
    //     type: cc.Integer,
    //     get() {
    //         // if (this._bulletType == null) {
    //         //     this._bulletType = 1
    //         // }
    //         return this._bulletType
    //     },
    //     set(value) {
    //         this._bulletType = value
    //         if (value == 2) {
    //             this.node.getComponent(cc.Sprite).spriteFrame = this.sliderFrame
    //         }
    //     }
    // }, //1 is normal , 2 is slider bullet
    bulletType: 1,
    status: 0,
    //0 is static, 1 is moving , 2 is reached target
    disFromBorder: 5,
    moveSpeed: 500,
    movingDirection: null,
    targetPosition: null,
    movingTime: 0.3,
    vx: null,
    vy: null,
    levelMgr: null,
    helper: null,
    _rayTestLength: 3000,
    pathWaysNode: cc.Node,
    pathWaysHeight: 10,
    sliderFrame: cc.SpriteFrame,
    faltalTorence: 0.01
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    this.levelMgr = cc.find("Canvas").getComponent("levelMgr");

    var Helper = require("helper");

    this.helper = new Helper(); // if (this.bulletType == 2) {
    //     this.node.getComponent(cc.Sprite).spriteFrame = this.sliderFrame
    // }
  },
  start: function start() {},
  move: function move(direction) {},
  checkWhetherCanMove: function checkWhetherCanMove(direction) {},
  update: function update(dt) {
    this.moveUpdate(dt);
  },
  moveUpdate: function moveUpdate(dt) {
    if (this.status != 1) {
      return;
    }

    var tempX = this.node.x + this.vx * dt;
    var tempY = this.node.y + this.vy * dt;

    if (cc.v2(tempX - this.node.x, tempY - this.node.y).mag() >= cc.v2(this.targetPosition.x - this.node.x, this.targetPosition.y - this.node.y).mag()) {
      tempX = this.targetPosition.x;
      tempY = this.targetPosition.y;
      this.node.x = tempX;
      this.node.y = tempY;
      this.status = 0;
      return;
    }

    this.node.x = tempX;
    this.node.y = tempY;
  },
  getNearestWallInfo: function getNearestWallInfo(givenDirection) {
    if (this.bulletType == 1) {
      //normal bullet
      var result = null;
      var walls = this.levelMgr.walls;
      var disToSelfBounder = this.helper.getDisToSelfBorder(this.node, givenDirection);

      for (var index in walls) {
        var wallNode = walls[index];
        var bounderLines = this.helper.getLinesOfOneNode(wallNode);

        for (var key in bounderLines) {
          var line = bounderLines[key];
          var dis = this.helper.isOneNodeWillCollidWithOneLineInDirection(this.node, line, givenDirection);

          if (dis == false) {
            continue;
          }

          var targetDis = this.disFromBorder + disToSelfBounder;

          if (result == null || dis < result.dis + targetDis) {
            var suitablePosition = this.helper.getSuitablePoint(cc.v2(this.node.x, this.node.y), dis, targetDis, givenDirection);
            var moveDis = cc.v2(suitablePosition.x - this.node.x, suitablePosition.y - this.node.y).mag();
            result = {
              dis: moveDis,
              suitablePosition: suitablePosition
            };
          }
        }
      }

      return result;
    }

    if (this.bulletType == 2) {
      if (this.pathWaysNode == null || this.pathWaysNode.children.length == 0) {
        return {
          dis: 0,
          suitablePosition: this.node.position
        };
      }

      var selectedPathNode = null;

      for (var index in this.pathWaysNode.children) {
        var onePath = this.pathWaysNode.children[index];

        if (this.helper.isTwoNodeCross(this.node, onePath) == false) {
          continue;
        }

        if (selectedPathNode == null || this._isPathNodeMoveDirection(onePath, givenDirection) == true) {
          selectedPathNode = onePath;
        }
      }

      if (this._isPathNodeMoveDirection(selectedPathNode, givenDirection) == false) {
        return {
          dis: 0,
          suitablePosition: this.node.position
        };
      }

      var ray = this.helper.makeRay(this.node.position, 3000, givenDirection);
      var currentDis = null;
      var lines = this.helper.getLinesOfOneNode(selectedPathNode);

      for (var key in lines) {
        var line = lines[key];
        var dis = this.helper.rayTest(ray, line);

        if (dis.toString() != "false") {
          if (currentDis == null || dis > currentDis) {
            currentDis = dis;
          }
        }
      }

      if (currentDis == null) {
        currentDis = 5;
      }

      var suitablePosition = this.helper.getSuitablePoint(this.node.position, currentDis, 0, givenDirection);
      var dis = cc.v2(suitablePosition.x - this.node.x, suitablePosition.y - this.node.y).mag();
      return {
        suitablePosition: suitablePosition,
        dis: dis
      };
    }
  },
  getMaxDisFromPathNode: function getMaxDisFromPathNode(givenNode, direction) {
    var ray1 = this.helper.makeRay(this.node.position, 3000, direction);
    var ray2 = this.helper.makeRay(this.node.position, 3000, cc.v2(-direction.x, -direction.y));
    var lines = this.helper.getLinesOfOneNode(givenNode);
    var self = this;

    var getDis = function getDis(ray) {
      var dis = null;

      for (var key in lines) {
        var line = lines[key];
        var dist = self.helper.rayTest(ray, line);

        if (dist != false) {
          return dist;
        }
      }

      if (dis == null) {
        dis = 5;
      }

      return dis;
    };

    var dis1 = getDis(ray1);
    var dis2 = getDis(ray2);

    if (dis1 >= dis2) {
      return dis1;
    } else {
      return dis2;
    }
  },
  isPathNodeMoveDirection: function isPathNodeMoveDirection(givenPathNode, givenDirection) {
    var dis1 = this.getMaxDisFromPathNode(givenPathNode, givenDirection);
    var verticalDirection = givenDirection.rotate(Math.PI / 2);
    var dis2 = this.getMaxDisFromPathNode(givenPathNode, verticalDirection);

    if (dis1 > dis2) {
      return true;
    }

    return false;
  },
  _isPathNodeMoveDirection: function _isPathNodeMoveDirection(givenPathNode, givenDirection) {
    givenDirection.normalizeSelf();
    var angle = -givenPathNode.angle * Math.PI / 180;
    var rotatedDirection = cc.v2(1, 0).rotate(angle);

    if (givenDirection.fuzzyEquals(rotatedDirection, 0.001) == true || givenDirection.fuzzyEquals(cc.v2(-rotatedDirection.x, -rotatedDirection.y), 0.001) == true) {
      return true;
    } else {
      return false;
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/levelAreaNodeMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'a8a2eatdk5J5omtBp3UkdHJ', 'levelAreaNodeMgr');
// scripts/levelAreaNodeMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    delegate: null,
    level: null
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    this.node.on("touchstart", this.onTouchStart, this);
  },
  start: function start() {},
  onTouchStart: function onTouchStart(event) {
    if (this.delegate.selectedLevel != this.level && this.delegate.checkLevelStatus(this.level) != 0) {
      this.delegate.selectedLevel = this.level;
    }
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL2xldmVsQXJlYU5vZGVNZ3IuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJkZWxlZ2F0ZSIsImxldmVsIiwib25Mb2FkIiwibm9kZSIsIm9uIiwib25Ub3VjaFN0YXJ0Iiwic3RhcnQiLCJldmVudCIsInNlbGVjdGVkTGV2ZWwiLCJjaGVja0xldmVsU3RhdHVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUdMQyxFQUFBQSxVQUFVLEVBQUU7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsSUFBQUEsUUFBUSxFQUFFLElBaEJGO0FBaUJSQyxJQUFBQSxLQUFLLEVBQUU7QUFqQkMsR0FIUDtBQXVCTDtBQUVBQyxFQUFBQSxNQXpCSyxvQkF5Qks7QUFDTixTQUFLQyxJQUFMLENBQVVDLEVBQVYsQ0FBYSxZQUFiLEVBQTBCLEtBQUtDLFlBQS9CLEVBQTRDLElBQTVDO0FBQ0gsR0EzQkk7QUE2QkxDLEVBQUFBLEtBN0JLLG1CQTZCSSxDQUVSLENBL0JJO0FBZ0NMRCxFQUFBQSxZQWhDSyx3QkFnQ1FFLEtBaENSLEVBZ0NjO0FBQ2YsUUFBSSxLQUFLUCxRQUFMLENBQWNRLGFBQWQsSUFBK0IsS0FBS1AsS0FBcEMsSUFBK0MsS0FBS0QsUUFBTCxDQUFjUyxnQkFBZCxDQUErQixLQUFLUixLQUFwQyxLQUE4QyxDQUFqRyxFQUFvRztBQUNoRyxXQUFLRCxRQUFMLENBQWNRLGFBQWQsR0FBOEIsS0FBS1AsS0FBbkM7QUFDSDtBQUNKLEdBcENJLENBcUNMOztBQXJDSyxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMZWFybiBjYy5DbGFzczpcbi8vICAtIFtDaGluZXNlXSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL3poL3NjcmlwdGluZy9jbGFzcy5odG1sXG4vLyAgLSBbRW5nbGlzaF0gaHR0cDovL2RvY3MuY29jb3MyZC14Lm9yZy9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvY2xhc3MuaHRtbFxuLy8gTGVhcm4gQXR0cmlidXRlOlxuLy8gIC0gW0NoaW5lc2VdIGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL3JlZmVyZW5jZS9hdHRyaWJ1dGVzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vZG9jcy5jb2NvczJkLXgub3JnL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1sXG4vLyBMZWFybiBsaWZlLWN5Y2xlIGNhbGxiYWNrczpcbi8vICAtIFtDaGluZXNlXSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL3poL3NjcmlwdGluZy9saWZlLWN5Y2xlLWNhbGxiYWNrcy5odG1sXG4vLyAgLSBbRW5nbGlzaF0gaHR0cHM6Ly93d3cuY29jb3MyZC14Lm9yZy9kb2NzL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9saWZlLWN5Y2xlLWNhbGxiYWNrcy5odG1sXG5cbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8vIGZvbzoge1xuICAgICAgICAvLyAgICAgLy8gQVRUUklCVVRFUzpcbiAgICAgICAgLy8gICAgIGRlZmF1bHQ6IG51bGwsICAgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgYXR0YWNoaW5nXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gYSBub2RlIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAgICAvLyAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWUsIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XG4gICAgICAgIC8vICAgICBzZXJpYWxpemFibGU6IHRydWUsICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxuICAgICAgICAvLyB9LFxuICAgICAgICAvLyBiYXI6IHtcbiAgICAgICAgLy8gICAgIGdldCAoKSB7XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIHRoaXMuX2JhcjtcbiAgICAgICAgLy8gICAgIH0sXG4gICAgICAgIC8vICAgICBzZXQgKHZhbHVlKSB7XG4gICAgICAgIC8vICAgICAgICAgdGhpcy5fYmFyID0gdmFsdWU7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0sXG4gICAgICAgIGRlbGVnYXRlOiBudWxsLFxuICAgICAgICBsZXZlbDogbnVsbFxuICAgIH0sXG5cbiAgICAvLyBMSUZFLUNZQ0xFIENBTExCQUNLUzpcblxuICAgIG9uTG9hZCAoKSB7XG4gICAgICAgIHRoaXMubm9kZS5vbihcInRvdWNoc3RhcnRcIix0aGlzLm9uVG91Y2hTdGFydCx0aGlzKVxuICAgIH0sXG5cbiAgICBzdGFydCAoKSB7XG5cbiAgICB9LFxuICAgIG9uVG91Y2hTdGFydChldmVudCl7XG4gICAgICAgIGlmICh0aGlzLmRlbGVnYXRlLnNlbGVjdGVkTGV2ZWwgIT0gdGhpcy5sZXZlbCAgJiYgIHRoaXMuZGVsZWdhdGUuY2hlY2tMZXZlbFN0YXR1cyh0aGlzLmxldmVsKSAhPSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGVnYXRlLnNlbGVjdGVkTGV2ZWwgPSB0aGlzLmxldmVsXG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gdXBkYXRlIChkdCkge30sXG59KTtcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/guildNodeMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '4abf6f10txCYqgtMh4ibAyZ', 'guildNodeMgr');
// scripts/guildNodeMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    uibg: cc.Node,
    guildBgNode: cc.Node,
    guildLabelNode: cc.Node,
    buttonNode: cc.Node,
    header: 105,
    footer: 105,
    sectionDis: 50
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {
    this.setupUi();
  },
  setupUi: function setupUi() {
    var textConfig = require("textConfig");

    var bg = this.node.getChildByName("bg");
    bg.width = cc.winSize.width;
    bg.height = cc.winSize.height;
    bg.on("touchstart", function () {});
    this.guildLabelNode.getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(159);

    this.guildLabelNode.getComponent(cc.Label)._forceUpdateRenderData();

    var totalHeight = this.header + this.guildBgNode.height + this.sectionDis + this.guildLabelNode.height + this.sectionDis + this.buttonNode.height + this.footer;
    this.uibg.height = totalHeight;
    this.guildBgNode.y = this.uibg.height / 2 - this.header - this.guildBgNode.height / 2;
    this.guildLabelNode.y = this.guildBgNode.y - this.guildBgNode.height / 2 - this.sectionDis;
    this.buttonNode.y = -this.uibg.height / 2 + this.footer + this.buttonNode.height / 2;
    var self = this;
    this.buttonNode.on("click", function () {
      self.node.destroy();
    });
    this.buttonNode.getChildByName("textLabel").getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(122);
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL2d1aWxkTm9kZU1nci5qcyJdLCJuYW1lcyI6WyJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsInVpYmciLCJOb2RlIiwiZ3VpbGRCZ05vZGUiLCJndWlsZExhYmVsTm9kZSIsImJ1dHRvbk5vZGUiLCJoZWFkZXIiLCJmb290ZXIiLCJzZWN0aW9uRGlzIiwic3RhcnQiLCJzZXR1cFVpIiwidGV4dENvbmZpZyIsInJlcXVpcmUiLCJiZyIsIm5vZGUiLCJnZXRDaGlsZEJ5TmFtZSIsIndpZHRoIiwid2luU2l6ZSIsImhlaWdodCIsIm9uIiwiZ2V0Q29tcG9uZW50IiwiTGFiZWwiLCJzdHJpbmciLCJnZXRUZXh0QnlJZEFuZExhbmd1YWdlVHlwZSIsIl9mb3JjZVVwZGF0ZVJlbmRlckRhdGEiLCJ0b3RhbEhlaWdodCIsInkiLCJzZWxmIiwiZGVzdHJveSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQUEsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFHTEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLElBQUFBLElBQUksRUFBRUosRUFBRSxDQUFDSyxJQWhCRDtBQWlCUkMsSUFBQUEsV0FBVyxFQUFFTixFQUFFLENBQUNLLElBakJSO0FBa0JSRSxJQUFBQSxjQUFjLEVBQUVQLEVBQUUsQ0FBQ0ssSUFsQlg7QUFtQlJHLElBQUFBLFVBQVUsRUFBRVIsRUFBRSxDQUFDSyxJQW5CUDtBQXFCUkksSUFBQUEsTUFBTSxFQUFFLEdBckJBO0FBc0JSQyxJQUFBQSxNQUFNLEVBQUUsR0F0QkE7QUF1QlJDLElBQUFBLFVBQVUsRUFBRTtBQXZCSixHQUhQO0FBNkJMO0FBRUE7QUFFQUMsRUFBQUEsS0FqQ0ssbUJBaUNJO0FBQ0wsU0FBS0MsT0FBTDtBQUNILEdBbkNJO0FBcUNMQSxFQUFBQSxPQXJDSyxxQkFxQ0s7QUFDTixRQUFJQyxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxZQUFELENBQXhCOztBQUNBLFFBQUlDLEVBQUUsR0FBRyxLQUFLQyxJQUFMLENBQVVDLGNBQVYsQ0FBeUIsSUFBekIsQ0FBVDtBQUNBRixJQUFBQSxFQUFFLENBQUNHLEtBQUgsR0FBV25CLEVBQUUsQ0FBQ29CLE9BQUgsQ0FBV0QsS0FBdEI7QUFDQUgsSUFBQUEsRUFBRSxDQUFDSyxNQUFILEdBQVlyQixFQUFFLENBQUNvQixPQUFILENBQVdDLE1BQXZCO0FBQ0FMLElBQUFBLEVBQUUsQ0FBQ00sRUFBSCxDQUFNLFlBQU4sRUFBbUIsWUFBVSxDQUFFLENBQS9CO0FBRUEsU0FBS2YsY0FBTCxDQUFvQmdCLFlBQXBCLENBQWlDdkIsRUFBRSxDQUFDd0IsS0FBcEMsRUFBMkNDLE1BQTNDLEdBQW9EWCxVQUFVLENBQUNZLDBCQUFYLENBQXNDLEdBQXRDLENBQXBEOztBQUNBLFNBQUtuQixjQUFMLENBQW9CZ0IsWUFBcEIsQ0FBaUN2QixFQUFFLENBQUN3QixLQUFwQyxFQUEyQ0csc0JBQTNDOztBQUVBLFFBQUlDLFdBQVcsR0FBRyxLQUFLbkIsTUFBTCxHQUFjLEtBQUtILFdBQUwsQ0FBaUJlLE1BQS9CLEdBQXdDLEtBQUtWLFVBQTdDLEdBQTBELEtBQUtKLGNBQUwsQ0FBb0JjLE1BQTlFLEdBQXVGLEtBQUtWLFVBQTVGLEdBQXlHLEtBQUtILFVBQUwsQ0FBZ0JhLE1BQXpILEdBQWtJLEtBQUtYLE1BQXpKO0FBQ0EsU0FBS04sSUFBTCxDQUFVaUIsTUFBVixHQUFtQk8sV0FBbkI7QUFFQSxTQUFLdEIsV0FBTCxDQUFpQnVCLENBQWpCLEdBQXFCLEtBQUt6QixJQUFMLENBQVVpQixNQUFWLEdBQW1CLENBQW5CLEdBQXVCLEtBQUtaLE1BQTVCLEdBQXFDLEtBQUtILFdBQUwsQ0FBaUJlLE1BQWpCLEdBQTBCLENBQXBGO0FBQ0EsU0FBS2QsY0FBTCxDQUFvQnNCLENBQXBCLEdBQXdCLEtBQUt2QixXQUFMLENBQWlCdUIsQ0FBakIsR0FBcUIsS0FBS3ZCLFdBQUwsQ0FBaUJlLE1BQWpCLEdBQTBCLENBQS9DLEdBQW1ELEtBQUtWLFVBQWhGO0FBQ0EsU0FBS0gsVUFBTCxDQUFnQnFCLENBQWhCLEdBQW9CLENBQUMsS0FBS3pCLElBQUwsQ0FBVWlCLE1BQVgsR0FBb0IsQ0FBcEIsR0FBd0IsS0FBS1gsTUFBN0IsR0FBc0MsS0FBS0YsVUFBTCxDQUFnQmEsTUFBaEIsR0FBeUIsQ0FBbkY7QUFFQSxRQUFJUyxJQUFJLEdBQUcsSUFBWDtBQUNBLFNBQUt0QixVQUFMLENBQWdCYyxFQUFoQixDQUFtQixPQUFuQixFQUE0QixZQUFVO0FBQ2xDUSxNQUFBQSxJQUFJLENBQUNiLElBQUwsQ0FBVWMsT0FBVjtBQUNILEtBRkQ7QUFJQSxTQUFLdkIsVUFBTCxDQUFnQlUsY0FBaEIsQ0FBK0IsV0FBL0IsRUFBNENLLFlBQTVDLENBQXlEdkIsRUFBRSxDQUFDd0IsS0FBNUQsRUFBbUVDLE1BQW5FLEdBQTRFWCxVQUFVLENBQUNZLDBCQUFYLENBQXNDLEdBQXRDLENBQTVFO0FBQ0gsR0E1REksQ0E2REw7O0FBN0RLLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExlYXJuIGNjLkNsYXNzOlxuLy8gIC0gW0NoaW5lc2VdIGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL2NsYXNzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vZG9jcy5jb2NvczJkLXgub3JnL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9jbGFzcy5odG1sXG4vLyBMZWFybiBBdHRyaWJ1dGU6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHA6Ly9kb2NzLmNvY29zMmQteC5vcmcvY3JlYXRvci9tYW51YWwvZW4vc2NyaXB0aW5nL3JlZmVyZW5jZS9hdHRyaWJ1dGVzLmh0bWxcbi8vIExlYXJuIGxpZmUtY3ljbGUgY2FsbGJhY2tzOlxuLy8gIC0gW0NoaW5lc2VdIGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL2xpZmUtY3ljbGUtY2FsbGJhY2tzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwczovL3d3dy5jb2NvczJkLXgub3JnL2RvY3MvY3JlYXRvci9tYW51YWwvZW4vc2NyaXB0aW5nL2xpZmUtY3ljbGUtY2FsbGJhY2tzLmh0bWxcblxuY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgLy8gZm9vOiB7XG4gICAgICAgIC8vICAgICAvLyBBVFRSSUJVVEVTOlxuICAgICAgICAvLyAgICAgZGVmYXVsdDogbnVsbCwgICAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdXNlZCBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBhdHRhY2hpbmdcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBhIG5vZGUgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgIC8vICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZSwgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHlwZW9mIGRlZmF1bHRcbiAgICAgICAgLy8gICAgIHNlcmlhbGl6YWJsZTogdHJ1ZSwgICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXG4gICAgICAgIC8vIH0sXG4gICAgICAgIC8vIGJhcjoge1xuICAgICAgICAvLyAgICAgZ2V0ICgpIHtcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gdGhpcy5fYmFyO1xuICAgICAgICAvLyAgICAgfSxcbiAgICAgICAgLy8gICAgIHNldCAodmFsdWUpIHtcbiAgICAgICAgLy8gICAgICAgICB0aGlzLl9iYXIgPSB2YWx1ZTtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSxcbiAgICAgICAgdWliZzogY2MuTm9kZSxcbiAgICAgICAgZ3VpbGRCZ05vZGU6IGNjLk5vZGUsXG4gICAgICAgIGd1aWxkTGFiZWxOb2RlOiBjYy5Ob2RlLFxuICAgICAgICBidXR0b25Ob2RlOiBjYy5Ob2RlLFxuXG4gICAgICAgIGhlYWRlcjogMTA1LFxuICAgICAgICBmb290ZXI6IDEwNSxcbiAgICAgICAgc2VjdGlvbkRpczogNTBcbiAgICB9LFxuXG4gICAgLy8gTElGRS1DWUNMRSBDQUxMQkFDS1M6XG5cbiAgICAvLyBvbkxvYWQgKCkge30sXG5cbiAgICBzdGFydCAoKSB7XG4gICAgICAgIHRoaXMuc2V0dXBVaSgpXG4gICAgfSxcblxuICAgIHNldHVwVWkoKSB7XG4gICAgICAgIHZhciB0ZXh0Q29uZmlnID0gcmVxdWlyZShcInRleHRDb25maWdcIilcbiAgICAgICAgdmFyIGJnID0gdGhpcy5ub2RlLmdldENoaWxkQnlOYW1lKFwiYmdcIilcbiAgICAgICAgYmcud2lkdGggPSBjYy53aW5TaXplLndpZHRoXG4gICAgICAgIGJnLmhlaWdodCA9IGNjLndpblNpemUuaGVpZ2h0XG4gICAgICAgIGJnLm9uKFwidG91Y2hzdGFydFwiLGZ1bmN0aW9uKCl7fSlcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZ3VpbGRMYWJlbE5vZGUuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSB0ZXh0Q29uZmlnLmdldFRleHRCeUlkQW5kTGFuZ3VhZ2VUeXBlKDE1OSlcbiAgICAgICAgdGhpcy5ndWlsZExhYmVsTm9kZS5nZXRDb21wb25lbnQoY2MuTGFiZWwpLl9mb3JjZVVwZGF0ZVJlbmRlckRhdGEoKVxuXG4gICAgICAgIHZhciB0b3RhbEhlaWdodCA9IHRoaXMuaGVhZGVyICsgdGhpcy5ndWlsZEJnTm9kZS5oZWlnaHQgKyB0aGlzLnNlY3Rpb25EaXMgKyB0aGlzLmd1aWxkTGFiZWxOb2RlLmhlaWdodCArIHRoaXMuc2VjdGlvbkRpcyArIHRoaXMuYnV0dG9uTm9kZS5oZWlnaHQgKyB0aGlzLmZvb3RlclxuICAgICAgICB0aGlzLnVpYmcuaGVpZ2h0ID0gdG90YWxIZWlnaHRcblxuICAgICAgICB0aGlzLmd1aWxkQmdOb2RlLnkgPSB0aGlzLnVpYmcuaGVpZ2h0IC8gMiAtIHRoaXMuaGVhZGVyIC0gdGhpcy5ndWlsZEJnTm9kZS5oZWlnaHQgLyAyXG4gICAgICAgIHRoaXMuZ3VpbGRMYWJlbE5vZGUueSA9IHRoaXMuZ3VpbGRCZ05vZGUueSAtIHRoaXMuZ3VpbGRCZ05vZGUuaGVpZ2h0IC8gMiAtIHRoaXMuc2VjdGlvbkRpc1xuICAgICAgICB0aGlzLmJ1dHRvbk5vZGUueSA9IC10aGlzLnVpYmcuaGVpZ2h0IC8gMiArIHRoaXMuZm9vdGVyICsgdGhpcy5idXR0b25Ob2RlLmhlaWdodCAvIDJcblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXNcbiAgICAgICAgdGhpcy5idXR0b25Ob2RlLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHNlbGYubm9kZS5kZXN0cm95KClcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLmJ1dHRvbk5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJ0ZXh0TGFiZWxcIikuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSB0ZXh0Q29uZmlnLmdldFRleHRCeUlkQW5kTGFuZ3VhZ2VUeXBlKDEyMilcbiAgICB9XG4gICAgLy8gdXBkYXRlIChkdCkge30sXG59KTtcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/loginSceneMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '81fbcyHVFlDhqJvCbUik6hX', 'loginSceneMgr');
// scripts/loginSceneMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    dataMgr: null,
    loginMgr: null,
    networkMgr: null,
    isLogining: false,
    changeSceneAnimationTime: 2,
    nameEnSpriteFrame: cc.SpriteFrame
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    this.node.on("touchstart", this.onTouchStart, this);

    var textConfig = require("textConfig");

    if (textConfig.languageType != 1) {
      this.node.getChildByName("name").getComponent(cc.Sprite).spriteFrame = this.nameEnSpriteFrame;
    }
  },
  start: function start() {
    this.dataMgr = require("dataMgr");
    this.loginMgr = require("loginMgr");
    this.networkMgr = require("networkMgr");
    this.networkMgr.delegate = this;
    var retryNode = cc.find("Canvas/retry");
    cc.tween(retryNode).repeatForever(cc.tween().to(0.5, {
      scale: 1.2
    }).to(0.5, {
      scale: 0.8
    })).start();
    this.login(); //this._debugLogin()
  },
  onPlayerDataUpdated: function onPlayerDataUpdated() {
    require("advertisMgr").initAds();

    cc.find("Canvas/loginInfo/textNode").getComponent(cc.Label).string = require("textConfig").getTextByIdAndLanguageType(157); //animation 

    for (var index in this.node.children) {
      var self = this;

      var temp = function temp(i) {
        var node = self.node.children[i];
        cc.tween(node).to(self.changeSceneAnimationTime, {
          opacity: 0
        }).start();
      };

      temp(index);
    }

    cc.tween(this.node).delay(this.changeSceneAnimationTime).call(function () {
      require("resMgr").loadReses(function () {
        require("networkMgr").startHeartBeat();

        cc.director.loadScene("mainScene");
      });
    }).start();
  },
  login: function login() {
    this.isLogining = true;
    var retryNode = cc.find("Canvas/retry");
    retryNode.active = false;
    cc.find("Canvas/loginInfo/textNode").getComponent(cc.Label).string = require("textConfig").getTextByIdAndLanguageType(156);
    var loginType = null;
    var platform = cc.sys.platform;

    if (platform == cc.sys.WECHAT_GAME) {
      loginType = this.loginMgr.LoginType.WE_CHAT_GAME;
    } else {
      loginType = this.loginMgr.LoginType.DEVICE_ID;
    }

    this.loginMgr.login(loginType);
  },
  onTouchStart: function onTouchStart(event) {
    if (this.isLogining == false) {
      this.login();
    }
  },
  // update (dt) {},
  _debugLogin: function _debugLogin() {
    this.dataMgr.playerData = {
      id: 100000001,
      name: "new Player",
      physicalPower: 10,
      maxPhysicalPower: 10,
      heart: 10,
      maxHeart: 10,
      currentSection: 1,
      currentLevel: 2,
      physicalPowerCostedFlag: 0
    };
    this.onPlayerDataUpdated();
  },
  onDestroy: function onDestroy() {
    this.node.off("touchstart", this.onTouchStart, this);
  },
  onAllRetryFailed: function onAllRetryFailed() {
    var loginInfo = cc.find("Canvas/loginInfo");
    var loginInfoLabel = loginInfo.getChildByName("textNode").getComponent(cc.Label);
    loginInfoLabel.string = require("textConfig").getTextByIdAndLanguageType(161);
    loginInfo.active = true;
    var retryNode = cc.find("Canvas/retry");
    retryNode.active = true;
    this.isLogining = false;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/levelMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c4014NLpYFEZpXQI03LMFEP', 'levelMgr');
// scripts/levelMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    bullets: [],
    minDis: 50,
    maxOffsetDegree: 45,
    directionTryto: null,
    flag: false,
    helper: null,
    walls: [],
    targetsNum: {
      get: function get() {
        return this._targetsNum;
      },
      set: function set(value) {
        this._targetsNum = value;

        if (value == 0) {
          this.onSuccess();
        }
      }
    },
    linePrefab: cc.Prefab,
    bulletPrefab: cc.Prefab,
    playerData: null,
    retryButton: cc.Node,
    heartForRetryCost: {
      get: function get() {
        return this._heartForRetryCostwe;
      },
      set: function set(value) {
        this._heartForRetryCostwe = value;
        this.retryButton.getChildByName("heartCostLabel").getComponent(cc.Label).string = value.toString();
      }
    },
    heart: {
      get: function get() {
        return this._heart;
      },
      set: function set(value) {
        this._heart = value;
        cc.find("Canvas/uiNode/heartLabel").getComponent(cc.Label).string = value.toString();

        if (value < this.heartForRetryCost) {
          this.retryButton.getComponent(cc.Button).interactable = false;
        } else {
          if (this.isMoved == false) {
            return;
          }

          this.retryButton.getComponent(cc.Button).interactable = true;
        }
      }
    },
    maxHeart: {
      get: function get() {
        return this._maxHeart;
      },
      set: function set(value) {
        this._maxHeart = value;
      }
    },
    isMoved: {
      get: function get() {
        if (this._isMoved == null) {
          this._isMoved = false;
        }

        return this._isMoved;
      },
      set: function set(value) {
        this._isMoved = value;

        if (value == true && this.heartForRetryCost <= this.heart) {
          this.retryButton.getComponent(cc.Button).interactable = true;
        }
      }
    },
    currentStepNum: {
      get: function get() {
        if (this._currentStepNum == null) {
          this._currentStepNum = 0;
        }

        return this._currentStepNum;
      },
      set: function set(value) {
        this._currentStepNum = value;
        var currentStepNumLabel = this.node.getChildByName("uiNode").getChildByName("currentStepNumLabel"); //currentStepNumLabel.getComponent(cc.Label).string = "当前步数：" + value.toString()

        currentStepNumLabel.getComponent(cc.Label).string = require("textConfig").getFormatedString(154, [value.toString()]);
      }
    },
    level: null,
    soundEffect: null
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    var textConfig = require("textConfig");

    var Helper = require("helper");

    this.helper = new Helper(); //this.level = 1

    this.setupNodesByConfig();
    var self = this;
    cc.loader.loadRes("effectSounds/hit", function (err, res) {
      self.soundEffect = res;
    });
    this.retryButton.getChildByName("textLabel").getComponent(cc.Label).string = textConfig.getTextByIdAndLanguageType(152);
    cc.find("Canvas/uiNode/currentStepNumLabel").getComponent(cc.Label).string = textConfig.getFormatedString(154, [0]);
  },
  start: function start() {
    this.node.on("touchstart", this.onTouchStart, this);
    this.node.on("touchmove", this.onTouchMove, this);
    this.node.on("touchend", this.onTouchEnd, this); //this.generateWalls()

    var bulletsNode = cc.find("Canvas/bullets");
    this.bullets = bulletsNode.children;
    this.playerData = require("dataMgr").playerData;
    this.maxHeart = this.playerData.maxHeart;

    if (this.level == this.playerData.currentLevel) {
      this.heartForRetryCost = require("levelConfig")[this.playerData.currentLevel.toString()].heartForRetryCost;
    } else {
      this.heartForRetryCost = 0;
    }

    this.heart = this.playerData.heart;
    require("networkMgr").delegate = this;
    var wallsNode = cc.find("Canvas/walls");
    this.walls = wallsNode.children;
    this.targetsNum = cc.find("Canvas/targets").children.length;
    var graphic = cc.find("Canvas/fillNodes").getComponent(cc.Graphics);
    var startPoint = null;
    var pointNodes = cc.find("Canvas/fillNodes").children;

    if (pointNodes.length == 0) {
      return;
    }

    for (var index in pointNodes) {
      var point = pointNodes[index];

      if (startPoint == null) {
        graphic.moveTo(point.x, point.y);
        startPoint = point;
      }

      graphic.lineTo(point.x, point.y);
    }

    graphic.close();
    graphic.stroke();
    graphic.fill();
    var minStepNumLabel = this.node.getChildByName("uiNode").getChildByName("minStepNumLabel");
    var minStepKey = "minStep_level_" + this.level.toString();

    var minStepNum = require("dataMgr").playerData.minSteps[minStepKey];

    if (minStepNum == null || minStepNum == undefined) {
      minStepNum = require("textConfig").getTextByIdAndLanguageType(155);
    }

    minStepNumLabel.getComponent(cc.Label).string = require("textConfig").getFormatedString(153, [minStepNum.toString()]);

    if (require("dataMgr").playerData.isGuilded == 0) {
      var guildNode = cc.instantiate(require("resMgr").reses["guildNodePrefab"]);
      this.node.addChild(guildNode);
    } // var guildNode = cc.instantiate(require("resMgr").reses["guildNodePrefab"])
    // this.node.addChild(guildNode)

  },
  // update (dt) {},
  playBgm: function playBgm() {
    var levelConfig = require("levelConfig");

    var bgmPath = levelConfig[this.level].bgmPath;
    cc.loader.loadRes(bgmPath, function (err, res) {
      cc.audioEngine.stopAll();
      cc.audioEngine.play(res);
    });
  },
  onTouchStart: function onTouchStart(event) {
    this.directionTryto = null;
    this.flag = true;
  },
  onTouchMove: function onTouchMove(event) {
    if (this.flag == false) {
      return;
    }

    var startLocation = event.getStartLocation();
    var tmpDirection = cc.v2(event.getLocationX() - startLocation.x, event.getLocationY() - startLocation.y);
    var dis = tmpDirection.mag();

    if (dis < this.minDis) {
      return;
    } else {
      var direction = this.getPossiableDirection(tmpDirection);

      if (direction == -1) {
        this.flag = false;
        return;
      }

      if (this.directionTryto == null) {
        this.directionTryto = direction;
      }

      this.flag = false;
      this.moveBullets(this.directionTryto);
    }
  },
  onTouchEnd: function onTouchEnd(event) {},
  onDestroy: function onDestroy() {
    this.node.off("touchstart", this.onTouchStart, this);
    this.node.off("touchmove", this.onTouchMove, this);
    this.node.off("touchend", this.onTouchEnd, this);
  },
  getPossiableDirection: function getPossiableDirection(delta) {
    if (this.isPossiableWithGivenDirection(delta, cc.v2(1, 0)) == true) {
      return cc.v2(1, 0); //right
    } else if (this.isPossiableWithGivenDirection(delta, cc.v2(0, -1)) == true) {
      return cc.v2(0, -1); //down
    } else if (this.isPossiableWithGivenDirection(delta, cc.v2(-1, 0)) == true) {
      return cc.v2(-1, 0); //left
    } else if (this.isPossiableWithGivenDirection(delta, cc.v2(0, 1)) == true) {
      return cc.v2(0, 1); //up
    } else {
        return -1; //no direction match
      }
  },
  isPossiableWithGivenDirection: function isPossiableWithGivenDirection(delta, givenDirection) {
    var angle = delta.signAngle(givenDirection);
    var degree = angle / Math.PI * 180;

    if (Math.abs(degree) <= this.maxOffsetDegree) {
      return true;
    } else {
      return false;
    }
  },
  moveBullets: function moveBullets(direction) {
    for (var index in this.bullets) {
      if (this.bullets[index].getComponent("bulletMgr").status != 0) {
        return;
      }
    }

    var shadows = [];

    for (var index in this.bullets) {
      var bullet = this.bullets[index];
      var bulletMgr = bullet.getComponent("bulletMgr");
      var nearestWallInfo = bulletMgr.getNearestWallInfo(direction);
      var shadowNode = {
        x: nearestWallInfo.suitablePosition.x,
        y: nearestWallInfo.suitablePosition.y,
        width: bullet.width,
        height: bullet.height,
        dis: nearestWallInfo.dis,
        originNode: bullet
      };
      shadows.push(shadowNode);
    } //resolve shadows


    var maxTryTime = 100;

    while (this.resolveShadows(shadows, direction) == false) {
      if (maxTryTime <= 0) {
        // cc.log("CAN'T FIND A SUITABLE POSITION")
        break;
      }

      maxTryTime -= 1;
    }

    var willAddStepNum = false;

    for (var index in shadows) {
      var shadowNode = shadows[index];
      var originNode = shadowNode.originNode;

      if (this.helper.isTwoPositionSimilarEqual(cc.v2(shadowNode.x, shadowNode.y), cc.v2(originNode.x, originNode.y)) == true) {
        continue;
      }

      var bulletMgr = originNode.getComponent("bulletMgr");
      bulletMgr.targetPosition = cc.v2(shadowNode.x, shadowNode.y);
      bulletMgr.movingDirection = direction;
      bulletMgr.movingDirection.normalizeSelf();

      if (bulletMgr.movingTime != null) {
        var dis = cc.v2(bulletMgr.targetPosition.x - originNode.x, bulletMgr.targetPosition.y - originNode.y).mag();
        var v = dis / bulletMgr.movingTime;
        bulletMgr.vx = v * bulletMgr.movingDirection.x;
        bulletMgr.vy = v * bulletMgr.movingDirection.y;
      } else {
        bulletMgr.vx = bulletMgr.movingDirection.x * bulletMgr.movingSpeed;
        bulletMgr.vy = bulletMgr.movingDirection.y * bulletMgr.movingSpeed;
      }

      bulletMgr.status = 1;

      if (this.isMoved != true) {
        this.isMoved = true;
      }

      if (willAddStepNum == false) {
        willAddStepNum = true;
      }
    }

    if (willAddStepNum == true) {
      this.currentStepNum += 1;

      if (this.soundEffect != null) {
        this.scheduleOnce(function () {
          cc.audioEngine.play(this.soundEffect);
        }, 0.3);
      }
    }
  },
  onSuccess: function onSuccess() {
    this.retryButton.getComponent(cc.Button).interactable = false; // if (this.level != this.playerData.currentLevel) {
    //     // cc.director.loadScene("mainScene")
    //     require("gameMgr").animatedToScene("mainScene")
    //     return
    // }

    var levels = require("sectionConfig")[this.playerData.currentSection].levels;

    var index = levels.indexOf(this.playerData.currentLevel);
    var newLevel = null;
    var newSection = null;
    var commitBody = null;

    if (index < levels.length - 1) {
      index += 1;
      newLevel = levels[index];
    } else {
      newSection = this.playerData.currentSection + 1;

      var newLevels = require("sectionConfig")[newSection].levels;

      newLevel = newLevels[0];
    }

    if (newSection == null) {
      commitBody = {
        currentLevel: newLevel
      };
    } else {
      commitBody = {
        currentSection: newSection,
        currentLevel: newLevel
      };
    }

    if (this.level == require("dataMgr").playerData.currentLevel) {
      commitBody.physicalPowerCostedFlag = 0;
    }

    if (require("dataMgr").playerData.isGuilded == 0) {
      commitBody.isGuilded = 1;
    }

    var minStepKey = "minStep_level_" + this.level.toString();

    var minStepNum = require("dataMgr").playerData.minSteps[minStepKey];

    if (minStepNum == null || minStepNum == undefined || this.currentStepNum < minStepNum) {
      commitBody.minSteps = {};
      commitBody.minSteps[minStepKey] = this.currentStepNum;
    }

    commitBody.preLevel = this.level;
    var self = this;

    var successCallBack = function successCallBack() {
      if (newSection != null) {
        self.playerData.currentSection = newSection;
      }

      if (commitBody.minSteps != null && commitBody.minSteps != undefined) {
        require("dataMgr").playerData.minSteps[minStepKey] = self.currentStepNum;
      }

      if (commitBody.isGuilded == 1) {
        require("dataMgr").playerData.isGuilded = 1;
      }

      self.playerData.currentLevel = newLevel;
      self.playerData.physicalPowerCostedFlag = 0;
      self.playerData.preLevel = self.level;

      require("gameMgr").animatedToScene("mainScene");
    };

    require("dataMgr").commitPlayerDataToServer(commitBody, successCallBack);
  },
  resolveShadows: function resolveShadows(shadows, direction) {
    for (var index in shadows) {
      var oneShadow = shadows[index];

      for (var i in shadows) {
        var anotherShadow = shadows[i];

        if (oneShadow == anotherShadow) {
          continue;
        }

        var testResult = this._selectStaticShadowAndShaodwForResolved(oneShadow, anotherShadow, direction);

        if (testResult != false) {
          var staticShadow = testResult.staticShadow;
          var tempShadow = testResult.shadowForResolved; // cc.log("static: " + staticShadow.originNode.name, "temp: " + tempShadow.originNode.name)

          var staticBorderLines = this.helper.getLinesOfOneNode(staticShadow);
          var staticLine = null;
          var ray = this.helper.makeRay(cc.v2(staticShadow.x, staticShadow.y), 1000, cc.v2(-direction.x, -direction.y));

          for (var k in staticBorderLines) {
            var line = staticBorderLines[k];
            var dis = this.helper.rayTest(ray, line);

            if (dis != false) {
              staticLine = line;
              break;
            }
          }

          var newPoint2 = this.helper.makeRay(staticLine.p2, 1000, cc.v2(staticLine.p2.x - staticLine.p1.x, staticLine.p2.y - staticLine.p1.y)).p2;
          var newPoint1 = this.helper.makeRay(staticLine.p1, 1000, cc.v2(staticLine.p1.x - staticLine.p2.x, staticLine.p1.y - staticLine.p2.y)).p2;
          staticLine = {
            p1: newPoint1,
            p2: newPoint2
          };
          var ray1 = this.helper.makeRay(tempShadow.originNode.position, 3000, direction);
          var currentDistance = this.helper.rayTest(ray1, staticLine);
          var targetDis = this.helper.getDisToSelfBorder(tempShadow.originNode, direction) + tempShadow.originNode.getComponent("bulletMgr").disFromBorder;
          var suitablePosition = this.helper.getSuitablePoint(tempShadow.originNode.position, currentDistance, targetDis, direction);
          var updatedDis = cc.v2(suitablePosition.x - tempShadow.originNode.x, suitablePosition.y - tempShadow.originNode.y).mag();
          tempShadow.x = suitablePosition.x;
          tempShadow.y = suitablePosition.y;
          tempShadow.dis = updatedDis;
          return false;
        }
      }
    }

    return true;
  },
  _selectStaticShadowAndShaodwForResolved: function _selectStaticShadowAndShaodwForResolved(shadow1, shadow2, direction) {
    var self = this;

    var temp = function temp(s1, s2) {
      var dis = s1.dis;
      var originCrossFlag = false;
      var shadowCrossFlag = false;
      var originLines = self.helper.getLinesOfOneNode(s2);

      for (var key in originLines) {
        var oneLine = originLines[key];

        if (self.helper.isOneNodeWillCollidWithOneLineInDirection(s1.originNode, oneLine, direction, dis) != false) {
          originCrossFlag = true;
          break;
        }
      }

      if (originCrossFlag == false) {
        return false;
      }

      var shadowLines = self.helper.getLinesOfOneNode(s2.originNode);

      for (var key in shadowLines) {
        var oneLine = shadowLines[key];

        if (self.helper.isOneNodeWillCollidWithOneLineInDirection(s1.originNode, oneLine, direction, dis) != false) {
          shadowCrossFlag = true;
          break;
        }
      }

      if (shadowCrossFlag == false) {
        return false;
      }

      return true;
    };

    if (temp(shadow1, shadow2) == true) {
      var result = {
        staticShadow: shadow2,
        shadowForResolved: shadow1
      };
      return result;
    }

    if (temp(shadow2, shadow1) == true) {
      var result = {
        staticShadow: shadow1,
        shadowForResolved: shadow2
      };
      return result;
    }

    return false;
  },
  generateWalls: function generateWalls() {
    var levelConfig = require("levelConfig");

    var currentLevel = this.level;
    var config = levelConfig[currentLevel];
    var wallsNode = cc.find("Canvas/walls");

    for (var index in config.wallPathes) {
      var onePath = config.wallPathes[index];
      var points = onePath.points;
      var realPoints = [];

      for (var i in points) {
        var realPoint = null;

        if (i == 0) {
          realPoint = cc.v2(points[i].x, points[i].y);
        } else {
          var currentPoint = points[i];
          realPoint = cc.v2(realPoints[i - 1].x + currentPoint.x, realPoints[i - 1].y + currentPoint.y);
        }

        realPoints.push(realPoint);
      }

      var lineWidth = onePath.lineWidth;
      var offset = onePath.offset;
      var wallNodes = [];
      var isClosed = onePath.isClosed;

      if (isClosed == true) {
        var startPoint = realPoints[0];
        realPoints.push(startPoint);
      }

      for (var i in realPoints) {
        if (i == 0) {
          continue;
        }

        var node = cc.instantiate(this.linePrefab);
        node.height = lineWidth;
        var directedLine = cc.v2(realPoints[i].x - realPoints[i - 1].x, realPoints[i].y - realPoints[i - 1].y);
        node.width = directedLine.mag();
        var degree = directedLine.signAngle(cc.v2(1, 0)) / Math.PI * 180;
        node.angle = -degree;
        node.x = realPoints[i].x - directedLine.x / 2;
        node.y = realPoints[i].y - directedLine.y / 2;
        var offsetDirection = directedLine.rotate(Math.PI / 2);
        offsetDirection.normalizeSelf();
        node.x += node.height / 2 * offsetDirection.x;
        node.y += node.height / 2 * offsetDirection.y;
        node.x += offset.x;
        node.y += offset.y;
        wallNodes.push(node);
        wallsNode.addChild(node);
      }
    }

    var bulletConfig = config.bullets;
    var bulletsNode = cc.find("Canvas/bullets");

    for (var index in bulletConfig) {
      var con = bulletConfig[index];
      var bullet = cc.instantiate(this.bulletPrefab);
      bullet.x = con.x;
      bullet.y = con.y;
      bullet.width = bullet.width * con.scale;
      bullet.height = bullet.height * con.scale;
      bulletsNode.addChild(bullet);
    }
  },
  onClickRetryButton: function onClickRetryButton() {
    var gameMgr = require("gameMgr");

    if (this.heartForRetryCost == 0) {
      gameMgr.enterLevelScene(this.level);
      return;
    }

    var temp = this.playerData.heart - this.heartForRetryCost;

    if (temp < 0) {
      return;
    }

    var commitBody = {
      heart: temp
    };
    var self = this;

    var successCallBack = function successCallBack() {
      self.playerData.heart = temp; // self.heart = temp

      gameMgr.enterLevelScene(self.level);
    };

    this.retryButton.getComponent(cc.Button).interactable = false;

    require("dataMgr").commitPlayerDataToServer(commitBody, successCallBack);
  },
  onAllRetryFailed: function onAllRetryFailed() {
    this.retryButton.getComponent(cc.Button).interactable = true;
  },
  onClickBackButton: function onClickBackButton() {
    // cc.director.loadScene("mainScene")
    require("gameMgr").animatedToScene("mainScene");
  },
  setupNodesByConfig: function setupNodesByConfig() {
    var wallPrefab = require("resMgr").reses["wallPrefab"];

    var bulletPrefab = require("resMgr").reses["bulletPrefab"];

    var targetPrefab = require("resMgr").reses["targetPrefab"];

    var pathWayPrefab = require("resMgr").reses["pathWayPrefab"];

    var levelSceneConfig = require("levelSceneConfig")[this.level];

    this._setupFillNodes(levelSceneConfig);

    this._setupWalls(levelSceneConfig, wallPrefab);

    this._setupTargets(levelSceneConfig, targetPrefab);

    this._setupPathWaysNode(levelSceneConfig, pathWayPrefab);

    this._setupBullets(levelSceneConfig, bulletPrefab);
  },
  _setupNodePropertyByConfig: function _setupNodePropertyByConfig(givenNode, givenConfig) {
    for (var key in givenConfig) {
      givenNode[key] = givenConfig[key];
    }
  },
  _setupFillNodes: function _setupFillNodes(levelSceneConfig) {
    var fillNodesConfig = levelSceneConfig.fillNodes;
    var fillNodes = cc.find("Canvas/fillNodes");

    for (var index in fillNodesConfig) {
      var oneNodeConfig = fillNodesConfig[index];
      var oneNode = new cc.Node();

      this._setupNodePropertyByConfig(oneNode, oneNodeConfig);

      fillNodes.addChild(oneNode);
    }
  },
  _setupWalls: function _setupWalls(levelSceneConfig, wallPrefab) {
    var wallsConfig = levelSceneConfig.walls;
    var walls = cc.find("Canvas/walls");

    for (var index in wallsConfig) {
      var oneWallConfig = wallsConfig[index];
      var oneWallNode = cc.instantiate(wallPrefab);

      this._setupNodePropertyByConfig(oneWallNode, oneWallConfig);

      walls.addChild(oneWallNode);
    }
  },
  _setupTargets: function _setupTargets(levelSceneConfig, targetPrefab) {
    var targetsConfig = levelSceneConfig.targets;
    var targets = cc.find("Canvas/targets");

    for (var index in targetsConfig) {
      var oneTargetConfig = targetsConfig[index];
      var oneTargetNode = cc.instantiate(targetPrefab);

      this._setupNodePropertyByConfig(oneTargetNode, oneTargetConfig);

      targets.addChild(oneTargetNode);
    }
  },
  _setupPathWaysNode: function _setupPathWaysNode(levelSceneConfig, pathWayPrefab) {
    var pathWaysConfig = levelSceneConfig.pathWaysNode;
    var pathWaysNode = cc.find("Canvas/pathWaysNode");

    for (var index in pathWaysConfig) {
      var onePathWayConfig = pathWaysConfig[index];
      var onePathWayNode = new cc.Node(onePathWayConfig.name);

      for (var index in onePathWayConfig.children) {
        var oneChildConfig = onePathWayConfig.children[index];
        var oneChildNode = cc.instantiate(pathWayPrefab);

        this._setupNodePropertyByConfig(oneChildNode, oneChildConfig);

        onePathWayNode.addChild(oneChildNode);
      }

      pathWaysNode.addChild(onePathWayNode);
    }
  },
  _setupBullets: function _setupBullets(levelSceneConfig, bulletPrefab) {
    var bulletsConfig = levelSceneConfig.bullets;
    var bullets = cc.find("Canvas/bullets");

    for (var index in bulletsConfig) {
      var oneBulletConfig = bulletsConfig[index];
      var oneBulletNode = cc.instantiate(bulletPrefab);
      var basicConfig = oneBulletConfig.basic; //this._setupNodePropertyByConfig(oneBulletNode,basicConfig)

      var mgrConfig = oneBulletConfig.mgr;
      var bulletMgr = oneBulletNode.getComponent("bulletMgr");
      bulletMgr.bulletType = mgrConfig.bulletType;

      if (mgrConfig.bulletType == 2) {
        oneBulletNode.getComponent(cc.Sprite).spriteFrame = bulletMgr.sliderFrame;
      }

      this._setupNodePropertyByConfig(oneBulletNode, basicConfig);

      if (bulletMgr.bulletType == 2) {
        if (mgrConfig.pathWaysNodeName != "" && mgrConfig.pathWaysNodeName != null) {
          var pathWaysNodePath = "Canvas/pathWaysNode/" + mgrConfig.pathWaysNodeName;
          var pathWaysNode = cc.find(pathWaysNodePath);
          bulletMgr.pathWaysNode = pathWaysNode;
        }
      }

      bullets.addChild(oneBulletNode);
    }
  },
  dataMonitored: function dataMonitored(key, value) {
    if (key.indexOf("minStep_level_") != -1) {
      //typically one key is "minStep_level_1"
      var levelId = key.slice(14);

      if (parseInt(levelId) == parseInt(this.level)) {
        var minStepNumLabel = this.node.getChildByName("uiNode").getChildByName("minStepNumLabel"); //minStepNumLabel.getComponent(cc.Label).string = "最小步数：" + value.toString()

        minStepNumLabel.getComponent(cc.Label).string = require("textConfig").getFormatedString(153, [value.toString()]);
      }
    } else if (key == "heart") {
      this.heart = value;
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/selectedEffectMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '7b478ZNvkdBy6Dqka/J/GBS', 'selectedEffectMgr');
// scripts/selectedEffectMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    fadeOutTime: 0.5
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {
    var self = this;
    cc.tween(this.node).repeatForever(cc.tween().to(self.fadeOutTime, {
      opacity: 0
    }).to(self.fadeOutTime, {
      opacity: 255
    })).start();
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL3NlbGVjdGVkRWZmZWN0TWdyLmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwiZmFkZU91dFRpbWUiLCJzdGFydCIsInNlbGYiLCJ0d2VlbiIsIm5vZGUiLCJyZXBlYXRGb3JldmVyIiwidG8iLCJvcGFjaXR5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUNMLGFBQVNELEVBQUUsQ0FBQ0UsU0FEUDtBQUdMQyxFQUFBQSxVQUFVLEVBQUU7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsSUFBQUEsV0FBVyxFQUFFO0FBaEJMLEdBSFA7QUFzQkw7QUFFQTtBQUVBQyxFQUFBQSxLQTFCSyxtQkEwQkk7QUFDTCxRQUFJQyxJQUFJLEdBQUcsSUFBWDtBQUNBTixJQUFBQSxFQUFFLENBQUNPLEtBQUgsQ0FBUyxLQUFLQyxJQUFkLEVBQ0tDLGFBREwsQ0FFUVQsRUFBRSxDQUFDTyxLQUFILEdBQ0tHLEVBREwsQ0FDUUosSUFBSSxDQUFDRixXQURiLEVBQ3lCO0FBQUNPLE1BQUFBLE9BQU8sRUFBRTtBQUFWLEtBRHpCLEVBRUtELEVBRkwsQ0FFUUosSUFBSSxDQUFDRixXQUZiLEVBRXlCO0FBQUNPLE1BQUFBLE9BQU8sRUFBRTtBQUFWLEtBRnpCLENBRlIsRUFNS04sS0FOTDtBQVFILEdBcENJLENBc0NMOztBQXRDSyxDQUFUIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMZWFybiBjYy5DbGFzczpcbi8vICAtIFtDaGluZXNlXSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL3poL3NjcmlwdGluZy9jbGFzcy5odG1sXG4vLyAgLSBbRW5nbGlzaF0gaHR0cDovL2RvY3MuY29jb3MyZC14Lm9yZy9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvY2xhc3MuaHRtbFxuLy8gTGVhcm4gQXR0cmlidXRlOlxuLy8gIC0gW0NoaW5lc2VdIGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL3JlZmVyZW5jZS9hdHRyaWJ1dGVzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vZG9jcy5jb2NvczJkLXgub3JnL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1sXG4vLyBMZWFybiBsaWZlLWN5Y2xlIGNhbGxiYWNrczpcbi8vICAtIFtDaGluZXNlXSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL3poL3NjcmlwdGluZy9saWZlLWN5Y2xlLWNhbGxiYWNrcy5odG1sXG4vLyAgLSBbRW5nbGlzaF0gaHR0cHM6Ly93d3cuY29jb3MyZC14Lm9yZy9kb2NzL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9saWZlLWN5Y2xlLWNhbGxiYWNrcy5odG1sXG5cbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8vIGZvbzoge1xuICAgICAgICAvLyAgICAgLy8gQVRUUklCVVRFUzpcbiAgICAgICAgLy8gICAgIGRlZmF1bHQ6IG51bGwsICAgICAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgb25seSB3aGVuIHRoZSBjb21wb25lbnQgYXR0YWNoaW5nXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gYSBub2RlIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAgICAvLyAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWUsIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHR5cGVvZiBkZWZhdWx0XG4gICAgICAgIC8vICAgICBzZXJpYWxpemFibGU6IHRydWUsICAgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHJ1ZVxuICAgICAgICAvLyB9LFxuICAgICAgICAvLyBiYXI6IHtcbiAgICAgICAgLy8gICAgIGdldCAoKSB7XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIHRoaXMuX2JhcjtcbiAgICAgICAgLy8gICAgIH0sXG4gICAgICAgIC8vICAgICBzZXQgKHZhbHVlKSB7XG4gICAgICAgIC8vICAgICAgICAgdGhpcy5fYmFyID0gdmFsdWU7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0sXG4gICAgICAgIGZhZGVPdXRUaW1lOiAwLjVcbiAgICB9LFxuXG4gICAgLy8gTElGRS1DWUNMRSBDQUxMQkFDS1M6XG5cbiAgICAvLyBvbkxvYWQgKCkge30sXG5cbiAgICBzdGFydCAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpc1xuICAgICAgICBjYy50d2Vlbih0aGlzLm5vZGUpXG4gICAgICAgICAgICAucmVwZWF0Rm9yZXZlcihcbiAgICAgICAgICAgICAgICBjYy50d2VlbigpXG4gICAgICAgICAgICAgICAgICAgIC50byhzZWxmLmZhZGVPdXRUaW1lLHtvcGFjaXR5OiAwfSlcbiAgICAgICAgICAgICAgICAgICAgLnRvKHNlbGYuZmFkZU91dFRpbWUse29wYWNpdHk6IDI1NX0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc3RhcnQoKVxuXG4gICAgfSxcblxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9LFxufSk7XG4iXX0=
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/targetMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'dd98dJBJRlHoIaNxxkryLBz', 'targetMgr');
// scripts/targetMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    fatalTolerance: 0.01,
    bullets: null,
    flag: false,
    helper: null
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    var Helper = require("helper");

    this.helper = new Helper();
  },
  start: function start() {
    this.bullets = cc.find("Canvas").getComponent("levelMgr").bullets;
  },
  update: function update(dt) {
    if (this.flag == true) {
      return;
    }

    for (var index in this.bullets) {
      var bullet = this.bullets[index];
      var bulletMgr = bullet.getComponent("bulletMgr");

      if (bulletMgr.bulletType != 1) {
        continue;
      }

      if (bulletMgr.status != 0) {
        continue;
      }

      if (this.checkWhetherSatisfied(bullet) == true) {
        this.onSatisfy(bullet);
        break;
      }
    }
  },
  checkWhetherSatisfied: function checkWhetherSatisfied(givenBulletNode) {
    var points = this.helper.getPointsOfOneNode(this.node);
    var bulletPoints = this.helper.getPointsOfOneNode(givenBulletNode);

    for (var key in points) {
      var point = points[key];
      var bulletCorrespondPoint = bulletPoints[key];
      var dis = cc.v2(bulletCorrespondPoint.x - point.x, bulletCorrespondPoint.y - point.y).mag();

      if (dis > this.fatalTolerance) {
        return false;
      }
    }

    return true;
  },
  onSatisfy: function onSatisfy(givenBullet) {
    this.flag = true;
    givenBullet.getComponent("bulletMgr").status = 2;
    var self = this;
    cc.tween(givenBullet).to(0.2, {
      opacity: 0
    }).call(function () {
      givenBullet.destroy();
    }).start();
    cc.tween(this.node).to(0.2, {
      opacity: 0
    }).call(function () {
      self.node.destroy();
      cc.find("Canvas").getComponent("levelMgr").targetsNum -= 1;
    }).start();
  },
  onDestroy: function onDestroy() {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/libs/timerSystemsMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'db2d5jDzvdBm400iKuIvXTH', 'timerSystemsMgr');
// scripts/libs/timerSystemsMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var TimerSystemsMgr = cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    signInSysTimer: {
      get: function get() {
        return this._signInSysTimer;
      },
      set: function set(value) {
        this._signInSysTimer = value;

        if (value <= 0) {
          this.onTimerReach("signInSys");
        }
      }
    },
    timers: []
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {},
  initSetup: function initSetup() {
    this.timers.push(this.signInSysTimer);
    this.signInSysTimer = require("dataMgr").playerData.signInRefreshDelta;
  },
  lunch: function lunch() {
    this.schedule(this.timerUpdate, 1);
  },
  timerUpdate: function timerUpdate() {
    for (var index in this.timers) {
      var oneTimer = this.timers[index];

      if (oneTimer > 0) {
        oneTimer -= 1;
      }
    }
  },
  stop: function stop() {
    this.unschedule(this.timerUpdate, this);
  },
  onTimerReach: function onTimerReach(givenName) {
    switch (givenName) {
      case "signInSys":
        var self = this;

        var networkMgr = require("networkMgr");

        var msgObj = networkMgr.makeMessageObj("signInModule", "refreshMessageType");
        msgObj.message.playerId = require("dataMgr").playerData.id;

        msgObj.successCallBack = function (xhr) {
          var response = xhr.responseText;
          response = JSON.parse(response);

          if (response.type == "success") {
            var signInRefreshDelta = response.signInRefreshDelta;
            require("dataMgr").playerData.signInRefreshDelta = signInRefreshDelta;
            self.signInSysTimer = signInRefreshDelta;
            require("dataMgr").playerData.signInStatus = 1;

            if (require("systemsMgr").signInSys.opendNode != null) {
              var signInSysMgr = require("systemsMgr").signInSys.opendNode.getComponent("signInSysMgr");

              signInSysMgr.setupUI();
            }
          }
        };

        networkMgr.sendMessageByMsgObj(msgObj);
        break;
    }
  }
});
var sharedTimerSystemsMgr = new TimerSystemsMgr();
module.exports = sharedTimerSystemsMgr;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/libs/loginMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd733bkMuPVAjJrq/tbVsVhw', 'loginMgr');
// scripts/libs/loginMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var LoginMgr = cc.Class({
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    playerId: {
      get: function get() {
        return this._playerId;
      },
      set: function set(value) {
        this._playerId = value;

        if (value) {
          this.onPlayerIdSet();
        }
      }
    },
    LoginType: {
      get: function get() {
        return {
          ACCOUNT: 1,
          WE_CHAT_GAME: 2,
          DEVICE_ID: 3
        };
      }
    }
  },
  login: function login(loginType) {
    this._setPlayerIdFromServer(loginType);
  },
  onPlayerIdSet: function onPlayerIdSet() {
    this.updatePlayerDataFromServer(this.playerId);
  },
  updatePlayerDataFromServer: function updatePlayerDataFromServer(playerId) {
    var dataMgr = require("dataMgr");

    dataMgr.updatePlayerDataFromServer(playerId);
  },
  _genarateUUID: function _genarateUUID() {
    var time = cc.sys.now();
    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0,
          v = c == 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
    uuid = uuid + time.toString();
    return uuid;
  },
  _setPlayerIdFromServer: function _setPlayerIdFromServer(loginType) {
    var networkMgr = require("networkMgr");

    var msgObj = networkMgr.makeMessageObj("loginModule", "loginMessageType");
    msgObj.message.codeType = loginType;
    var asyncFlag = false;

    switch (loginType) {
      case this.LoginType.ACCOUNT:
        break;

      case this.LoginType.WE_CHAT_GAME:
        asyncFlag = true;
        var self = this;
        wx.login({
          success: function success(res) {
            var code = res.code;

            if (code != null) {
              msgObj.message.code = code;

              msgObj.successCallBack = function (xhr) {
                var response = xhr.responseText;
                response = JSON.parse(response);

                if (response.type == "login_success") {
                  var playerId = response.playerId;
                  self.playerId = playerId;
                } else if (response.type == "login_fail") {}
              };

              networkMgr.sendMessageByMsgObj(msgObj);
            }
          }
        });
        break;

      case this.LoginType.DEVICE_ID:
        var deviceId = cc.sys.localStorage.getItem("deviceId");

        if (deviceId == null) {
          var uuid = this._genarateUUID();

          cc.sys.localStorage.setItem("deviceId", uuid);
          deviceId = uuid;
        }

        msgObj.message.code = deviceId;
        break;

      default:
        cc.log("Login type erro: now it's " + loginType);
    }

    if (asyncFlag == true) {
      return;
    }

    var self = this;

    msgObj.successCallBack = function (xhr) {
      var response = xhr.responseText;
      response = JSON.parse(response);

      if (response.type == "login_success") {
        var playerId = response.playerId;
        self.playerId = playerId;
      } else if (response.type == "login_fail") {}
    };

    networkMgr.sendMessageByMsgObj(msgObj);
  }
});
var sharedLoginMgr = new LoginMgr();
module.exports = sharedLoginMgr;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/libs/resMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'df3f9Ff+ehEg4/MFicOafGk', 'resMgr');
// scripts/libs/resMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var ResMgr = cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    reses: null,
    resNum: null,
    loadedResNum: 0 //{
    //     get() {
    //         if (this._loadedResNum == null) {
    //             this._loadedResNum = 0
    //         }
    //         return this._loadedResNum
    //     },
    //     set(value) {
    //         this._loadedResNum = value
    //         if (value == this.resNum) {
    //         }
    //     }
    // }

  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {},
  loadReses: function loadReses() {
    var complet = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
    var resObj = {
      // ensureSysPrefab: "prefabs/ensureNode",
      // addSysPrefab: "prefabs/addUI",
      notiSysPrefab: "prefabs/notiNode",
      // mailSysTagPrefab: "prefabs/mailTagNode",
      // mailSysMailSectionNodePrefab: "prefabs/mailSectionNode",
      // mailSysSelectedTagEffectPrefab: "prefabs/selectedTagEffect",
      // mailUIPrefab: "prefabs/mailUI",
      // mailOptionPrefab: "prefabs/mailOptionNode",
      // mailSysMailPrefab: "prefabs/mailNode",
      // redPointPrefab: "prefabs/redPoint",
      wallPrefab: "prefabs/wall",
      bulletPrefab: "prefabs/bullet",
      targetPrefab: "prefabs/target",
      pathWayPrefab: "prefabs/pathWay",
      welfarySysPrefab: "prefabs/welfaryUI",
      signInSysPrefab: "prefabs/signInSysUI",
      addPropertyNumSysPrefab: "prefabs/addPropertyNumUI",
      mailSysPrefab: "prefabs/mailSysUI",
      selectSectionSysPrefab: "prefabs/selectSectionUI",
      storySysPrefab: "prefabs/storyNode",
      coverNodePrefab: "prefabs/fullSceneCoverNode",
      guildNodePrefab: "prefabs/guildNode",
      activityNodePrefab: "prefabs/activityNode"
    };
    var len = Object.keys(resObj).length;
    this.resNum = len;
    this.reses = {};
    var self = this;

    for (var key in resObj) {
      var temp = function temp(key) {
        var path = resObj[key];
        cc.loader.loadRes(path, function (err, res) {
          if (res) {
            self.reses[key] = res;
            self.loadedResNum += 1;

            if (self.loadedResNum == self.resNum) {
              complet();
            }
          } else {
            console.log("LOAD RES ERRO OF " + key + " :" + err);
          }
        });
      };

      temp(key);
    }
  } // update (dt) {},

});
var sharedResMgr = new ResMgr();
module.exports = sharedResMgr;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/libs/networkMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '06ef571V7VDkpNc4lgVqmds', 'networkMgr');
// scripts/libs/networkMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var Networkmgr = cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    delegate: null,
    retryDelta: 1.5,
    maxRetryTime: 3,
    retryWaitingNode: null,
    retryAction: null
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {},
  // update (dt) {},
  sendMessage: function sendMessage(msg, port, ip, suffix, successCallBack) {
    var xhr = new XMLHttpRequest();

    xhr.onreadystatechange = function () {
      if (xhr.readyState == 4 && xhr.status >= 200 && xhr.status < 400) {
        successCallBack(xhr);
      }
    };

    var url = "http://" + ip + ":" + port.toString() + "/" + suffix.toString();
    xhr.open("POST", url);
    xhr.send(msg);
  },
  makeMessageObj: function makeMessageObj(moduleName, messageTypeName) {
    var gloableConfig = require("gloableConfig");

    var netWorkMessageConfigs = gloableConfig.netWorkMessageConfigs;
    var moduleObj = netWorkMessageConfigs[moduleName];

    if (moduleObj != null) {
      var ip = gloableConfig.basicIp;
      var port = gloableConfig.basicPort;

      if (moduleObj.ip != null) {
        ip = moduleObj.ip;
      }

      if (moduleObj.port != null) {
        port = moduleObj.port;
      }

      var suffix = moduleObj.suffix;
      var message = moduleObj[messageTypeName];

      var successCallBack = function successCallBack(xhr) {};

      var obj = {
        ip: ip,
        port: port,
        suffix: suffix,
        message: message,
        successCallBack: successCallBack
      };
      return obj;
    } else {
      cc.error("no such module name of " + moduleName);
      return null;
    }
  },
  sendMessageByMsgObj: function sendMessageByMsgObj(msgObj) {
    var url = "https://" + msgObj.ip + ":" + msgObj.port.toString() + "/" + msgObj.suffix;
    var xhr = null;
    xhr = new XMLHttpRequest();
    var self = this;

    xhr.onreadystatechange = function () {
      if (xhr.readyState == 4 && xhr.status >= 200 && xhr.status < 400) {
        msgObj.successCallBack(xhr);

        if (self.retryingFlag == true) {
          self.retryResult = true;
        }
      }
    };

    var msgForSend = JSON.stringify(msgObj.message);

    xhr.onerror = function () {
      cc.log("err");

      if (self.retryAction == null) {
        self.retryAction = function () {
          xhr.send(msgForSend);
          xhr.currentRetryTime += 1;
        };
      }

      if (xhr.currentRetryTime == null || xhr.currentRetryTime == undefined) {
        xhr.currentRetryTime = 0;
      }

      var retry = function retry(xhr) {
        cc.log("retry", xhr.currentRetryTime);

        if (xhr.currentRetryTime > self.maxRetryTime) {
          self.retryWaitingNode.destroy();
          self.retryWaitingNode.removeFromParent();
          self.retryWaitingNode = null;
          self.retryAction = null;
          self.unscheduleAllCallbacks(); //do something else

          var currentScene = cc.director.getScene();

          if (currentScene.name == "loginScene") {
            var mgr = currentScene.getChildByName("Canvas").getComponent("loginSceneMgr");
            mgr.onAllRetryFailed();
          } else {
            cc.loader.loadRes("prefabs/backToLoginScene", function (err, res) {
              var node = cc.instantiate(res);
              var bg = node.getChildByName("bg");
              bg.width = cc.winSize.width;
              bg.height = cc.winSize.height;
              bg.on("touchstart", function () {});
              var ensureButtonNode = node.getChildByName("others").getChildByName("ensureButton");
              ensureButtonNode.on("click", function () {
                cc.director.loadScene("loginScene");
              });
              cc.director.getScene().getChildByName("Canvas").addChild(node);
            });
          }
        } else if (xhr.currentRetryTime == 0) {
          cc.director.getScene().getChildByName("Canvas").addChild(self.retryWaitingNode);
          self.schedule(self.retryAction, self.retryDelta);
        }
      };

      if (self.retryWaitingNode == null) {
        cc.loader.loadRes("prefabs/retryWaitingNode", function (err, res) {
          var node = cc.instantiate(res);
          var bg = node.getChildByName("bg");
          bg.width = cc.winSize.width;
          bg.height = cc.winSize.height;
          bg.on("touchstart", function () {});
          self.retryWaitingNode = node;
          retry(xhr);
        });
      } else {
        retry(xhr);
      }
    };

    xhr.ontimeout = function () {
      cc.log("time out!!!");
    };

    xhr.onabort = function () {
      cc.log("abord");
    };

    if (xhr.readyState == 0) {
      xhr.open("POST", url);
    }

    xhr.send(msgForSend);
  },
  onAllRetryFailed: function onAllRetryFailed() {},
  startHeartBeat: function startHeartBeat() {
    var messageObj = this.makeMessageObj("longConnectModule", "heartBeatMessageType");
    messageObj.message.playerId = require("dataMgr").playerData.id;

    messageObj.successCallBack = function (xhr) {
      var response = xhr.responseText;
      response = JSON.parse(response);

      if (response.type == "message") {
        var messages = response.messages;

        for (var index in messages) {
          var oneMessage = messages[index];

          if (oneMessage.type == "mailSysSendMail") {
            var mailId = oneMessage.mailId;
            var timeStamp = oneMessage.timeStamp;
            var tag = oneMessage.tag;
            var mail = {
              "status": 0,
              "tag": tag,
              "timeStamp": timeStamp,
              "selectedOptionIndex": -1
            };
            require("dataMgr").playerData.mails[mailId] = mail;
          }
        }
      }
    }; //this.sendMessageByMsgObj(messageObj,true)


    this.schedule(function () {
      this.sendMessageByMsgObj(messageObj);
    }, 60);
  }
});
var sharedMgr = new Networkmgr();
module.exports = sharedMgr;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/libs/gestureMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '9fa79MbD2xKKJly3Hl8wtuT', 'gestureMgr');
// scripts/libs/gestureMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    isDragEnable: true,
    isZoomEnable: true,
    zoomSpeed: 0.00333,
    maxZoomRatio: 1.2,
    minZoomRatio: 0.3,
    dragSpeed: 1,
    camaraNode: cc.Node,
    minBoundX: -960,
    maxBoundX: 960,
    minBoundY: -640,
    maxBoundY: 640,
    //logic properties
    touches: {
      "default": [],
      visible: false
    }
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    this.node.on("touchstart", function (event) {
      this.onTouchStart(event);
    }, this);
    this.node.on("touchmove", function (event) {
      this.onTouchMove(event);
    }, this);
    this.node.on("touchend", function (event) {
      this.onTouchEnd(event);
    }, this);
    this.node.on("touchcancel", function (event) {
      this.onTouchCancel(event);
    }, this);
  },
  // start () {
  // },
  // update (dt) {},
  onTouchStart: function onTouchStart(event) {
    var touchEvent = event;
    this.touches.push(touchEvent);
  },
  onTouchMove: function onTouchMove(event) {
    if (this.isDragEnable == true && this.touches.length == 1) {
      var delta = event.getDelta();
      var tempX = delta.x * -1;
      var tempY = delta.y * -1;
      tempX = tempX * this.dragSpeed;
      tempY = tempY * this.dragSpeed;
      var cama = this.camaraNode.getComponent(cc.Camera);
      var canvas = cc.find("Canvas");
      var tempCamaX = this.camaraNode.x + tempX;
      var tempCamaY = this.camaraNode.y + tempY;
      var camaMaxBoundX = tempCamaX + canvas.width / 2 * (1 / cama.zoomRatio);
      var camaMinBoundX = tempCamaX - canvas.width / 2 * (1 / cama.zoomRatio);
      var camaMaxBoundY = tempCamaY + canvas.height / 2 * (1 / cama.zoomRatio);
      var camaMinBoundY = tempCamaY - canvas.height / 2 * (1 / cama.zoomRatio);

      if (camaMaxBoundX <= this.maxBoundX && camaMinBoundX >= this.minBoundX) {
        this.camaraNode.x = tempCamaX;
      }

      if (camaMaxBoundY <= this.maxBoundY && camaMinBoundY >= this.minBoundY) {
        this.camaraNode.y = tempCamaY;
      }
    }

    if (this.isZoomEnable == true && this.touches.length == 2) {
      var firstTouch = this.touches[0];
      var seceondTouch = this.touches[1];
      var firstTouchLocation = firstTouch.getLocation();
      var seceondTouchLocation = seceondTouch.getLocation();
      var distance = this.distanceOfTwoVector(firstTouchLocation, seceondTouchLocation);
      var preFirstTouchLocation = firstTouch.getPreviousLocation();
      var preSeceondTouchLocation = seceondTouch.getPreviousLocation();
      var preDistance = this.distanceOfTwoVector(preFirstTouchLocation, preSeceondTouchLocation);
      var disDelta = distance - preDistance;
      var cama = this.camaraNode.getComponent(cc.Camera);
      var tempZoomRatio = cama.zoomRatio + this.zoomRatio * disDelta;

      if (tempZoomRatio >= minZoomRatio && tempZoomRatio <= maxZoomRatio) {
        cama.zoomRatio = tempZoomRatio;
      }
    }
  },
  onTouchEnd: function onTouchEnd(event) {
    this.deleteTouchEventFromTouchesArry(event);
  },
  onTouchCancel: function onTouchCancel(event) {
    this.deleteTouchEventFromTouchesArry(event);
  },
  deleteTouchEventFromTouchesArry: function deleteTouchEventFromTouchesArry(event) {
    var tempIndex = null;

    for (var index in this.touches) {
      var oneTouchEvent = this.touches[index];

      if (oneTouchEvent.getID() == event.getID()) {
        tempIndex = index;
        break;
      }
    }

    if (tempIndex != null) {
      this.touches.splice(index, 1);
    }
  },
  distanceOfTwoVector: function distanceOfTwoVector(a, b) {
    var distance = Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2);
    distance = Math.sqrt(distance);
    return distance;
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/libs/dataMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '0cd8087H/9I77MXIhlobXJP', 'dataMgr');
// scripts/libs/dataMgr.js

"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var dataMgr = cc.Class({
  "extends": cc.Component,
  properties: {
    playerData: {
      get: function get() {
        return this._playerData;
      },
      set: function set(value) {
        this._playerData = new Proxy(value, this.dataMonitoredProxyHandler);
        this.onPlayerDataUpdated(); //do something else
      }
    },
    dataMonitoredProxyHandler: {
      get: function get() {
        if (this._dataMonitoredProxyHandler == null) {
          var handler = {
            get: function get(target, key) {
              if (_typeof(target[key]) === "object") {
                return new Proxy(target[key], handler);
              }

              return target[key];
            },
            set: function set(target, key, value) {
              target[key] = value;

              var globalRedPointMgr = require("globalRedPointMgr");

              globalRedPointMgr.setupRedPoints();

              var systems = require("systemsMgr").systems;

              require("systemsMgr").systemsGloableDataMonitored(key, value);

              for (var k in systems) {
                var oneSys = systems[k];

                if (oneSys.opendNode != null) {
                  var mgr = oneSys.opendNode.getComponent(oneSys.mgrName);

                  if (mgr != null && typeof mgr.dataMonitored === "function") {
                    mgr.dataMonitored(key, value);
                  }
                }
              }

              var currentScene = cc.director.getScene();
              var mgrName = null;

              switch (currentScene.name) {
                case "mainScene":
                  mgrName = "mainSceneMgr";
                  break;

                case "levelScene":
                  mgrName = "levelMgr";
                  break;
              }

              if (mgrName != null) {
                var mgr = currentScene.getChildByName("Canvas").getComponent(mgrName);

                if (mgr != null && typeof mgr.dataMonitored === "function") {
                  mgr.dataMonitored(key, value);
                }
              }

              return true;
            }
          };
          this._dataMonitoredProxyHandler = handler;
        }

        return this._dataMonitoredProxyHandler;
      }
    },
    delegate: null
  },
  updatePlayerDataFromServer: function updatePlayerDataFromServer(playerId) {
    var networkMgr = require("networkMgr");

    var msgObj = networkMgr.makeMessageObj("dataModule", "queryMessageType");
    msgObj.message.playerId = playerId;
    var self = this;

    msgObj.successCallBack = function (xhr) {
      var response = xhr.responseText;
      response = JSON.parse(response);

      if (response.type == "success") {
        self.playerData = response.playerData;
      } else {//do something for erros
      }
    };

    networkMgr.sendMessageByMsgObj(msgObj);
  },
  onPlayerDataUpdated: function onPlayerDataUpdated() {
    cc.log("now player data is " + JSON.stringify(this.playerData));

    var timerSystemsMgr = require("timerSystemsMgr");

    timerSystemsMgr.initSetup();
    timerSystemsMgr.lunch();

    if (cc.director.getScene().name == "loginScene") {
      var loginSceneMgr = cc.director.getScene().getChildByName("Canvas").getComponent("loginSceneMgr");
      loginSceneMgr.onPlayerDataUpdated();
    }
  },
  commitPlayerDataToServer: function commitPlayerDataToServer(dataForCommit, successCallBack) {
    var networkMgr = require("networkMgr");

    var msgObj = networkMgr.makeMessageObj("dataModule", "commitMessageTyp");
    msgObj.message.playerId = this.playerData.id;

    if (msgObj.message.playerId == null) {
      cc.log("no player data");
      return;
    }

    msgObj.message.commitBody = dataForCommit;

    msgObj.successCallBack = function (xhr) {
      var response = xhr.responseText;
      response = JSON.parse(response);

      if (response.type == "commitSuccess") {
        successCallBack();
      }
    };

    networkMgr.sendMessageByMsgObj(msgObj);
  }
});
var shareDataMgr = new dataMgr();
module.exports = shareDataMgr;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/mainScene/selectSectionElementMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'db60cQ2kgJNgK6qR9e+RnsV', 'selectSectionElementMgr');
// scripts/mainScene/selectSectionElementMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    processBarNode: cc.Node,
    processLabelNode: cc.Node,
    iconNode: cc.Node,
    iconLabelNode: cc.Node,
    nameLabelNode: cc.Node,
    lockedIconSpriteFrame: cc.SpriteFrame,
    sectionKey: null,
    config: null,
    mailInfo: null,
    selectSectionUINode: null
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {},
  start: function start() {
    if (this.sectionKey == null) {
      return;
    }

    this.setupData(); // this.nameLabelNode.getComponent(cc.Label).string = this.config.sectionDescrip

    this.nameLabelNode.getComponent(cc.Label).string = require("textConfig").getTextByIdAndLanguageType(this.config.sectionDescripTextId);
    this.iconLabelNode.getComponent(cc.Label).string = this.sectionKey;

    if (parseInt(this.sectionKey) > require("dataMgr").playerData.currentSection) {
      this.iconNode.getComponent(cc.Sprite).spriteFrame = this.lockedIconSpriteFrame;
    }

    this.processLabelNode.getComponent(cc.Label).string = this.mailInfo.sendNum.toString() + " / " + this.mailInfo.totalNum.toString();
    this.processBarNode.getComponent(cc.ProgressBar).progress = this.mailInfo.sendNum / this.mailInfo.totalNum;
  },
  // update (dt) {},
  setupData: function setupData() {
    var sectionConfig = require("sectionConfig");

    this.config = sectionConfig[this.sectionKey];
    var mailIdsShouldToSend = [];
    var levels = this.config.levels;

    var mailSysConfig = require("mailSysConfig");

    for (var tag in mailSysConfig) {
      var conditions = mailSysConfig[tag].conditions;

      for (var index in conditions) {
        var oneCondition = conditions[index];
        var conditionType = oneCondition.conditionType;
        var conditionPara = oneCondition.conditionPara;

        if (conditionType == 1 && levels.indexOf(conditionPara) != -1) {
          mailIdsShouldToSend.push(oneCondition.mailId);
        } else if (conditionType == 2 && levels.indexOf(conditionPara.levelId) != -1) {
          mailIdsShouldToSend.push(oneCondition.mailId);
        }
      }
    }

    var totalMailNum = mailIdsShouldToSend.length;
    var sendMailNum = 0;

    if (totalMailNum > 0) {
      var currentMailIds = Object.keys(require("dataMgr").playerData.mails);

      for (var index in mailIdsShouldToSend) {
        var oneMailId = mailIdsShouldToSend[index];

        if (currentMailIds.indexOf(oneMailId.toString()) != -1) {
          sendMailNum += 1;
        }
      }
    }

    var result = {
      totalNum: totalMailNum,
      sendNum: sendMailNum
    };
    this.mailInfo = result;
  },
  onClick: function onClick() {
    if (parseInt(this.sectionKey) > require("dataMgr").playerData.currentSection) {
      require("notificationMgr").showNoti(require("textConfig").getTextByIdAndLanguageType(158));

      return;
    } else if (parseInt(this.sectionKey) <= require("dataMgr").playerData.currentSection) {
      var mainSceneMgr = cc.director.getScene().getChildByName("Canvas").getComponent("mainSceneMgr");

      if (mainSceneMgr == null) {
        cc.log("现在不是主界面，无法选择章节，这种情况应该不会出现的才对！");
      } else {
        if (parseInt(this.sectionKey) != mainSceneMgr.selectedSection) {
          mainSceneMgr.selectedSection = parseInt(this.sectionKey);
          mainSceneMgr.setupSectionPerformance();
          mainSceneMgr.playBgm();
        }
      }
    }

    require("systemsMgr").closeSystem("selectSectionSys");
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/mainScene/levelNodeMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'a65daQfIs1AIaVJClbi9PqX', 'levelNodeMgr');
// scripts/mainScene/levelNodeMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    status: {
      get: function get() {
        return this._status;
      },
      set: function set(value) {
        this._status = value;

        if (value == 0 || value == 2) {
          this.node.getComponent(cc.Sprite).spriteFrame = this.graySpriteFrame;
        }

        if (value == 2) {
          this.isRecommanded = true;
        }
      }
    },
    //0 = locked, 1 = unlocked, 2 = current
    levelNumLabelNode: cc.Node,
    mailTagNode: cc.Node,
    selectedEffectNode: cc.Node,
    graySpriteFrame: cc.SpriteFrame,
    mailTagSendSpriteFrame: cc.SpriteFrame,
    delegate: null,
    level: null,
    preChanllengeUIPrefab: cc.Prefab,
    preChanllengeUIOpend: false,
    isRecommanded: {
      get: function get() {
        return this._isRecommanded;
      },
      set: function set(value) {
        this._isRecommanded = value;

        if (value == true) {
          this.selectedEffectNode.active = true;
        }
      }
    }
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    cc.tween(this.selectedEffectNode).repeatForever(cc.tween().to(0.5, {
      opacity: 0
    }).to(0.5, {
      opacity: 255
    })).start();
    this.setupMailTag();
  },
  start: function start() {},
  onClick: function onClick() {
    if (this.status == 0) {
      return;
    }

    this.openPreChanllengeUI();
  },
  openPreChanllengeUI: function openPreChanllengeUI() {
    if (this.preChanllengeUIOpend == true) {
      return;
    }

    var ui = cc.instantiate(this.preChanllengeUIPrefab);
    var mgr = ui.getComponent("preChallengeUIMgr");
    mgr.level = this.level;
    mgr.levelStatus = this.status;
    mgr.delegate = this;
    cc.director.getScene().getChildByName("Canvas").addChild(ui);
    this.preChanllengeUIOpend = true;
  },
  setupMailTag: function setupMailTag() {
    var result = this._checkLevelMailTagStatus();

    if (result != false) {
      var mailHasSend = result[1];
      var mailTagWillShow = result[0];

      if (mailHasSend == true) {
        this.mailTagNode.getComponent(cc.Sprite).spriteFrame = this.mailTagSendSpriteFrame;
      }

      if (mailTagWillShow == true) {
        this.mailTagNode.active = true;
      }
    }
  },
  _checkLevelMailTagStatus: function _checkLevelMailTagStatus() {
    var mailSysConfig = require("mailSysConfig");

    var mailTagWillShow = false;
    var mailHasSend = false;

    for (var tag in mailSysConfig) {
      var conditions = mailSysConfig[tag].conditions;

      for (var index in conditions) {
        var oneElement = conditions[index];
        var conditionType = oneElement.conditionType;
        var conditionPara = oneElement.conditionPara;

        if (conditionType == 1) {
          if (conditionPara == this.level) {
            mailTagWillShow = true;

            var currentConditionIndex = require("dataMgr").playerData.mailConditionIndex[tag];

            if (this.level == 2) {
              cc.log(index, currentConditionIndex);
            }

            if (index < currentConditionIndex || currentConditionIndex == -1) {
              mailHasSend = true;
            }

            return [mailTagWillShow, mailHasSend];
          }
        } else if (conditionType == 2) {
          if (conditionPara.levelId == this.level) {
            mailTagWillShow = true;
          }

          var currentConditionIndex = require("dataMgr").playerData.mailConditionIndex[tag];

          if (index < currentConditionIndex || currentConditionIndex == -1) {
            mailHasSend = true;
          }

          return [mailTagWillShow, mailHasSend];
        }
      }
    }

    return false;
  },
  dataMonitored: function dataMonitored(key, value) {
    var mailConfig = require("mailConfig");

    var mailIds = Object.keys(mailConfig);

    if (mailIds.indexOf(key) != -1) {
      this.setupMailTag();
    }
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/mainScene/selectSectionUIMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd2250CWPMpIRr7o+jf81yog', 'selectSectionUIMgr');
// scripts/mainScene/selectSectionUIMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    containerContentNode: cc.Node,
    closeButtonNode: cc.Node,
    bgNode: cc.Node,
    othersNode: cc.Node,
    elementPrefab: cc.Prefab,
    elementDis: 100
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {
    this.setupUI();
  },
  setupUI: function setupUI() {
    this.bgNode.width = cc.winSize.width;
    this.bgNode.height = cc.winSize.height;
    this.bgNode.on("touchstart", function () {
      require("systemsMgr").closeSystem("selectSectionSys");
    });
    this.closeButtonNode.on("click", function () {
      require("systemsMgr").closeSystem("selectSectionSys");
    });

    var sectionConfig = require("sectionConfig");

    var contentHeight = 0;

    for (var key in sectionConfig) {
      var node = cc.instantiate(this.elementPrefab);
      var mgr = node.getComponent("selectSectionElementMgr");
      mgr.sectionKey = key;
      mgr.selectSectionUINode = this.node;
      node.y = contentHeight;
      contentHeight += node.height;
      contentHeight += this.elementDis;
      this.containerContentNode.addChild(node);
    }

    if (this.containerContentNode.height < contentHeight) {
      this.containerContentNode.height = contentHeight;
    }
  } // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL21haW5TY2VuZS9zZWxlY3RTZWN0aW9uVUlNZ3IuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJjb250YWluZXJDb250ZW50Tm9kZSIsIk5vZGUiLCJjbG9zZUJ1dHRvbk5vZGUiLCJiZ05vZGUiLCJvdGhlcnNOb2RlIiwiZWxlbWVudFByZWZhYiIsIlByZWZhYiIsImVsZW1lbnREaXMiLCJzdGFydCIsInNldHVwVUkiLCJ3aWR0aCIsIndpblNpemUiLCJoZWlnaHQiLCJvbiIsInJlcXVpcmUiLCJjbG9zZVN5c3RlbSIsInNlY3Rpb25Db25maWciLCJjb250ZW50SGVpZ2h0Iiwia2V5Iiwibm9kZSIsImluc3RhbnRpYXRlIiwibWdyIiwiZ2V0Q29tcG9uZW50Iiwic2VjdGlvbktleSIsInNlbGVjdFNlY3Rpb25VSU5vZGUiLCJ5IiwiYWRkQ2hpbGQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUFBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBR0xDLEVBQUFBLFVBQVUsRUFBRTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxJQUFBQSxvQkFBb0IsRUFBRUosRUFBRSxDQUFDSyxJQWhCakI7QUFpQlJDLElBQUFBLGVBQWUsRUFBRU4sRUFBRSxDQUFDSyxJQWpCWjtBQWtCUkUsSUFBQUEsTUFBTSxFQUFFUCxFQUFFLENBQUNLLElBbEJIO0FBbUJSRyxJQUFBQSxVQUFVLEVBQUVSLEVBQUUsQ0FBQ0ssSUFuQlA7QUFvQlJJLElBQUFBLGFBQWEsRUFBRVQsRUFBRSxDQUFDVSxNQXBCVjtBQXNCUkMsSUFBQUEsVUFBVSxFQUFFO0FBdEJKLEdBSFA7QUE0Qkw7QUFFQTtBQUVBQyxFQUFBQSxLQWhDSyxtQkFnQ0k7QUFDTCxTQUFLQyxPQUFMO0FBQ0gsR0FsQ0k7QUFvQ0xBLEVBQUFBLE9BcENLLHFCQW9DSztBQUNOLFNBQUtOLE1BQUwsQ0FBWU8sS0FBWixHQUFvQmQsRUFBRSxDQUFDZSxPQUFILENBQVdELEtBQS9CO0FBQ0EsU0FBS1AsTUFBTCxDQUFZUyxNQUFaLEdBQXFCaEIsRUFBRSxDQUFDZSxPQUFILENBQVdDLE1BQWhDO0FBQ0EsU0FBS1QsTUFBTCxDQUFZVSxFQUFaLENBQWUsWUFBZixFQUE0QixZQUFVO0FBQ2xDQyxNQUFBQSxPQUFPLENBQUMsWUFBRCxDQUFQLENBQXNCQyxXQUF0QixDQUFrQyxrQkFBbEM7QUFDSCxLQUZEO0FBSUEsU0FBS2IsZUFBTCxDQUFxQlcsRUFBckIsQ0FBd0IsT0FBeEIsRUFBZ0MsWUFBVTtBQUN0Q0MsTUFBQUEsT0FBTyxDQUFDLFlBQUQsQ0FBUCxDQUFzQkMsV0FBdEIsQ0FBa0Msa0JBQWxDO0FBQ0gsS0FGRDs7QUFJQSxRQUFJQyxhQUFhLEdBQUdGLE9BQU8sQ0FBQyxlQUFELENBQTNCOztBQUNBLFFBQUlHLGFBQWEsR0FBRyxDQUFwQjs7QUFDQSxTQUFLLElBQUlDLEdBQVQsSUFBZ0JGLGFBQWhCLEVBQStCO0FBQzNCLFVBQUlHLElBQUksR0FBR3ZCLEVBQUUsQ0FBQ3dCLFdBQUgsQ0FBZSxLQUFLZixhQUFwQixDQUFYO0FBQ0EsVUFBSWdCLEdBQUcsR0FBR0YsSUFBSSxDQUFDRyxZQUFMLENBQWtCLHlCQUFsQixDQUFWO0FBQ0FELE1BQUFBLEdBQUcsQ0FBQ0UsVUFBSixHQUFpQkwsR0FBakI7QUFDQUcsTUFBQUEsR0FBRyxDQUFDRyxtQkFBSixHQUEwQixLQUFLTCxJQUEvQjtBQUVBQSxNQUFBQSxJQUFJLENBQUNNLENBQUwsR0FBU1IsYUFBVDtBQUNBQSxNQUFBQSxhQUFhLElBQUlFLElBQUksQ0FBQ1AsTUFBdEI7QUFDQUssTUFBQUEsYUFBYSxJQUFJLEtBQUtWLFVBQXRCO0FBQ0EsV0FBS1Asb0JBQUwsQ0FBMEIwQixRQUExQixDQUFtQ1AsSUFBbkM7QUFDSDs7QUFFRCxRQUFJLEtBQUtuQixvQkFBTCxDQUEwQlksTUFBMUIsR0FBbUNLLGFBQXZDLEVBQXNEO0FBQ2xELFdBQUtqQixvQkFBTCxDQUEwQlksTUFBMUIsR0FBbUNLLGFBQW5DO0FBQ0g7QUFDSixHQWhFSSxDQWlFTDs7QUFqRUssQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGVhcm4gY2MuQ2xhc3M6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvY2xhc3MuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHA6Ly9kb2NzLmNvY29zMmQteC5vcmcvY3JlYXRvci9tYW51YWwvZW4vc2NyaXB0aW5nL2NsYXNzLmh0bWxcbi8vIExlYXJuIEF0dHJpYnV0ZTpcbi8vICAtIFtDaGluZXNlXSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL3poL3NjcmlwdGluZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1sXG4vLyAgLSBbRW5nbGlzaF0gaHR0cDovL2RvY3MuY29jb3MyZC14Lm9yZy9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxuLy8gTGVhcm4gbGlmZS1jeWNsZSBjYWxsYmFja3M6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHBzOi8vd3d3LmNvY29zMmQteC5vcmcvZG9jcy9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxuXG5jYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICAvLyBmb286IHtcbiAgICAgICAgLy8gICAgIC8vIEFUVFJJQlVURVM6XG4gICAgICAgIC8vICAgICBkZWZhdWx0OiBudWxsLCAgICAgICAgLy8gVGhlIGRlZmF1bHQgdmFsdWUgd2lsbCBiZSB1c2VkIG9ubHkgd2hlbiB0aGUgY29tcG9uZW50IGF0dGFjaGluZ1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGEgbm9kZSBmb3IgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgLy8gICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lLCAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0eXBlb2YgZGVmYXVsdFxuICAgICAgICAvLyAgICAgc2VyaWFsaXphYmxlOiB0cnVlLCAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHRydWVcbiAgICAgICAgLy8gfSxcbiAgICAgICAgLy8gYmFyOiB7XG4gICAgICAgIC8vICAgICBnZXQgKCkge1xuICAgICAgICAvLyAgICAgICAgIHJldHVybiB0aGlzLl9iYXI7XG4gICAgICAgIC8vICAgICB9LFxuICAgICAgICAvLyAgICAgc2V0ICh2YWx1ZSkge1xuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2JhciA9IHZhbHVlO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9LFxuICAgICAgICBjb250YWluZXJDb250ZW50Tm9kZTogY2MuTm9kZSxcbiAgICAgICAgY2xvc2VCdXR0b25Ob2RlOiBjYy5Ob2RlLFxuICAgICAgICBiZ05vZGU6IGNjLk5vZGUsXG4gICAgICAgIG90aGVyc05vZGU6IGNjLk5vZGUsXG4gICAgICAgIGVsZW1lbnRQcmVmYWI6IGNjLlByZWZhYixcblxuICAgICAgICBlbGVtZW50RGlzOiAxMDBcbiAgICB9LFxuXG4gICAgLy8gTElGRS1DWUNMRSBDQUxMQkFDS1M6XG5cbiAgICAvLyBvbkxvYWQgKCkge30sXG5cbiAgICBzdGFydCAoKSB7XG4gICAgICAgIHRoaXMuc2V0dXBVSSgpXG4gICAgfSxcblxuICAgIHNldHVwVUkoKSB7XG4gICAgICAgIHRoaXMuYmdOb2RlLndpZHRoID0gY2Mud2luU2l6ZS53aWR0aFxuICAgICAgICB0aGlzLmJnTm9kZS5oZWlnaHQgPSBjYy53aW5TaXplLmhlaWdodFxuICAgICAgICB0aGlzLmJnTm9kZS5vbihcInRvdWNoc3RhcnRcIixmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmVxdWlyZShcInN5c3RlbXNNZ3JcIikuY2xvc2VTeXN0ZW0oXCJzZWxlY3RTZWN0aW9uU3lzXCIpXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5jbG9zZUJ1dHRvbk5vZGUub24oXCJjbGlja1wiLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICByZXF1aXJlKFwic3lzdGVtc01nclwiKS5jbG9zZVN5c3RlbShcInNlbGVjdFNlY3Rpb25TeXNcIilcbiAgICAgICAgfSlcblxuICAgICAgICB2YXIgc2VjdGlvbkNvbmZpZyA9IHJlcXVpcmUoXCJzZWN0aW9uQ29uZmlnXCIpXG4gICAgICAgIHZhciBjb250ZW50SGVpZ2h0ID0gMFxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2VjdGlvbkNvbmZpZykge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSBjYy5pbnN0YW50aWF0ZSh0aGlzLmVsZW1lbnRQcmVmYWIpXG4gICAgICAgICAgICB2YXIgbWdyID0gbm9kZS5nZXRDb21wb25lbnQoXCJzZWxlY3RTZWN0aW9uRWxlbWVudE1nclwiKVxuICAgICAgICAgICAgbWdyLnNlY3Rpb25LZXkgPSBrZXlcbiAgICAgICAgICAgIG1nci5zZWxlY3RTZWN0aW9uVUlOb2RlID0gdGhpcy5ub2RlXG5cbiAgICAgICAgICAgIG5vZGUueSA9IGNvbnRlbnRIZWlnaHRcbiAgICAgICAgICAgIGNvbnRlbnRIZWlnaHQgKz0gbm9kZS5oZWlnaHRcbiAgICAgICAgICAgIGNvbnRlbnRIZWlnaHQgKz0gdGhpcy5lbGVtZW50RGlzXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckNvbnRlbnROb2RlLmFkZENoaWxkKG5vZGUpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jb250YWluZXJDb250ZW50Tm9kZS5oZWlnaHQgPCBjb250ZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckNvbnRlbnROb2RlLmhlaWdodCA9IGNvbnRlbnRIZWlnaHRcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcbn0pO1xuIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/singleInstanceSystems/globalRedPointMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd895aDdCFhBNIuhwEdMtJNe', 'globalRedPointMgr');
// scripts/singleInstanceSystems/globalRedPointMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var GlobalRedPointMgr = cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    currentRedPointMgrs: []
  },
  setupRedPoints: function setupRedPoints() {
    this.getRedPointMgrs();

    for (var index in this.currentRedPointMgrs) {
      var oneRedPointMgr = this.currentRedPointMgrs[index];

      if (typeof oneRedPointMgr.setupRedPoint === "function") {
        oneRedPointMgr.setupRedPoint();
      }
    }
  },
  getRedPointMgrs: function getRedPointMgrs() {
    this.currentRedPointMgrs = [];
    var currentScene = cc.director.getScene();
    var self = this;

    var temp = function temp(givenRootNode) {
      for (var index in givenRootNode.children) {
        var oneChildNode = givenRootNode.children[index];
        var oneRedPointMgr = oneChildNode.getComponent("redPointMgr");

        if (oneRedPointMgr != null) {
          self.currentRedPointMgrs.push(oneRedPointMgr);
        }

        temp(oneChildNode);
      }
    };

    temp(currentScene.getChildByName("Canvas"));
  }
});
module.exports = new GlobalRedPointMgr();

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL3NpbmdsZUluc3RhbmNlU3lzdGVtcy9nbG9iYWxSZWRQb2ludE1nci5qcyJdLCJuYW1lcyI6WyJHbG9iYWxSZWRQb2ludE1nciIsImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwiY3VycmVudFJlZFBvaW50TWdycyIsInNldHVwUmVkUG9pbnRzIiwiZ2V0UmVkUG9pbnRNZ3JzIiwiaW5kZXgiLCJvbmVSZWRQb2ludE1nciIsInNldHVwUmVkUG9pbnQiLCJjdXJyZW50U2NlbmUiLCJkaXJlY3RvciIsImdldFNjZW5lIiwic2VsZiIsInRlbXAiLCJnaXZlblJvb3ROb2RlIiwiY2hpbGRyZW4iLCJvbmVDaGlsZE5vZGUiLCJnZXRDb21wb25lbnQiLCJwdXNoIiwiZ2V0Q2hpbGRCeU5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLElBQUlBLGlCQUFpQixHQUFHQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUM3QixhQUFTRCxFQUFFLENBQUNFLFNBRGlCO0FBRzdCQyxFQUFBQSxVQUFVLEVBQUU7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsSUFBQUEsbUJBQW1CLEVBQUU7QUFoQmIsR0FIaUI7QUFzQjdCQyxFQUFBQSxjQXRCNkIsNEJBc0JaO0FBQ2IsU0FBS0MsZUFBTDs7QUFDQSxTQUFLLElBQUlDLEtBQVQsSUFBa0IsS0FBS0gsbUJBQXZCLEVBQTRDO0FBQ3hDLFVBQUlJLGNBQWMsR0FBRyxLQUFLSixtQkFBTCxDQUF5QkcsS0FBekIsQ0FBckI7O0FBQ0EsVUFBSSxPQUFPQyxjQUFjLENBQUNDLGFBQXRCLEtBQXdDLFVBQTVDLEVBQXdEO0FBQ3BERCxRQUFBQSxjQUFjLENBQUNDLGFBQWY7QUFDSDtBQUNKO0FBQ0osR0E5QjRCO0FBZ0M3QkgsRUFBQUEsZUFoQzZCLDZCQWdDWDtBQUNkLFNBQUtGLG1CQUFMLEdBQTJCLEVBQTNCO0FBQ0EsUUFBSU0sWUFBWSxHQUFHVixFQUFFLENBQUNXLFFBQUgsQ0FBWUMsUUFBWixFQUFuQjtBQUNBLFFBQUlDLElBQUksR0FBRyxJQUFYOztBQUNBLFFBQUlDLElBQUksR0FBRyxTQUFQQSxJQUFPLENBQVNDLGFBQVQsRUFBd0I7QUFDL0IsV0FBSyxJQUFJUixLQUFULElBQWtCUSxhQUFhLENBQUNDLFFBQWhDLEVBQTBDO0FBQ3RDLFlBQUlDLFlBQVksR0FBR0YsYUFBYSxDQUFDQyxRQUFkLENBQXVCVCxLQUF2QixDQUFuQjtBQUNBLFlBQUlDLGNBQWMsR0FBR1MsWUFBWSxDQUFDQyxZQUFiLENBQTBCLGFBQTFCLENBQXJCOztBQUNBLFlBQUlWLGNBQWMsSUFBSSxJQUF0QixFQUE0QjtBQUN4QkssVUFBQUEsSUFBSSxDQUFDVCxtQkFBTCxDQUF5QmUsSUFBekIsQ0FBOEJYLGNBQTlCO0FBQ0g7O0FBQ0RNLFFBQUFBLElBQUksQ0FBQ0csWUFBRCxDQUFKO0FBQ0g7QUFDSixLQVREOztBQVdBSCxJQUFBQSxJQUFJLENBQUNKLFlBQVksQ0FBQ1UsY0FBYixDQUE0QixRQUE1QixDQUFELENBQUo7QUFDSDtBQWhENEIsQ0FBVCxDQUF4QjtBQW1EQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLElBQUl2QixpQkFBSixFQUFqQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGVhcm4gY2MuQ2xhc3M6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvY2xhc3MuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHA6Ly9kb2NzLmNvY29zMmQteC5vcmcvY3JlYXRvci9tYW51YWwvZW4vc2NyaXB0aW5nL2NsYXNzLmh0bWxcbi8vIExlYXJuIEF0dHJpYnV0ZTpcbi8vICAtIFtDaGluZXNlXSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL3poL3NjcmlwdGluZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1sXG4vLyAgLSBbRW5nbGlzaF0gaHR0cDovL2RvY3MuY29jb3MyZC14Lm9yZy9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxuLy8gTGVhcm4gbGlmZS1jeWNsZSBjYWxsYmFja3M6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHBzOi8vd3d3LmNvY29zMmQteC5vcmcvZG9jcy9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxuXG52YXIgR2xvYmFsUmVkUG9pbnRNZ3IgPSBjYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICAvLyBmb286IHtcbiAgICAgICAgLy8gICAgIC8vIEFUVFJJQlVURVM6XG4gICAgICAgIC8vICAgICBkZWZhdWx0OiBudWxsLCAgICAgICAgLy8gVGhlIGRlZmF1bHQgdmFsdWUgd2lsbCBiZSB1c2VkIG9ubHkgd2hlbiB0aGUgY29tcG9uZW50IGF0dGFjaGluZ1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGEgbm9kZSBmb3IgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgLy8gICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lLCAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0eXBlb2YgZGVmYXVsdFxuICAgICAgICAvLyAgICAgc2VyaWFsaXphYmxlOiB0cnVlLCAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHRydWVcbiAgICAgICAgLy8gfSxcbiAgICAgICAgLy8gYmFyOiB7XG4gICAgICAgIC8vICAgICBnZXQgKCkge1xuICAgICAgICAvLyAgICAgICAgIHJldHVybiB0aGlzLl9iYXI7XG4gICAgICAgIC8vICAgICB9LFxuICAgICAgICAvLyAgICAgc2V0ICh2YWx1ZSkge1xuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2JhciA9IHZhbHVlO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9LFxuICAgICAgICBjdXJyZW50UmVkUG9pbnRNZ3JzOiBbXVxuICAgIH0sXG5cbiAgICBzZXR1cFJlZFBvaW50cygpIHtcbiAgICAgICAgdGhpcy5nZXRSZWRQb2ludE1ncnMoKVxuICAgICAgICBmb3IgKHZhciBpbmRleCBpbiB0aGlzLmN1cnJlbnRSZWRQb2ludE1ncnMpIHtcbiAgICAgICAgICAgIHZhciBvbmVSZWRQb2ludE1nciA9IHRoaXMuY3VycmVudFJlZFBvaW50TWdyc1tpbmRleF1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb25lUmVkUG9pbnRNZ3Iuc2V0dXBSZWRQb2ludCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgb25lUmVkUG9pbnRNZ3Iuc2V0dXBSZWRQb2ludCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0UmVkUG9pbnRNZ3JzKCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRSZWRQb2ludE1ncnMgPSBbXVxuICAgICAgICB2YXIgY3VycmVudFNjZW5lID0gY2MuZGlyZWN0b3IuZ2V0U2NlbmUoKVxuICAgICAgICB2YXIgc2VsZiA9IHRoaXNcbiAgICAgICAgdmFyIHRlbXAgPSBmdW5jdGlvbihnaXZlblJvb3ROb2RlKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpbmRleCBpbiBnaXZlblJvb3ROb2RlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9uZUNoaWxkTm9kZSA9IGdpdmVuUm9vdE5vZGUuY2hpbGRyZW5baW5kZXhdXG4gICAgICAgICAgICAgICAgdmFyIG9uZVJlZFBvaW50TWdyID0gb25lQ2hpbGROb2RlLmdldENvbXBvbmVudChcInJlZFBvaW50TWdyXCIpXG4gICAgICAgICAgICAgICAgaWYgKG9uZVJlZFBvaW50TWdyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50UmVkUG9pbnRNZ3JzLnB1c2gob25lUmVkUG9pbnRNZ3IpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRlbXAob25lQ2hpbGROb2RlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGVtcChjdXJyZW50U2NlbmUuZ2V0Q2hpbGRCeU5hbWUoXCJDYW52YXNcIikpXG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IEdsb2JhbFJlZFBvaW50TWdyKClcbiJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/singleInstanceSystems/notificationMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6adf2lw5wdC6oB912oNiN7C', 'notificationMgr');
// scripts/singleInstanceSystems/notificationMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var NotificationMgr = cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    lastTime: 2,
    moveTime: 0.5,
    moveDis: 200,
    noties: []
  },
  // LIFE-CYCLE CALLBACKS:
  // onLoad () {},
  start: function start() {},
  showNoti: function showNoti(str) {
    var notiPrefab = require("resMgr").reses.notiSysPrefab;

    var notiNode = cc.instantiate(notiPrefab);
    var label = notiNode.getChildByName("label");
    label.getComponent(cc.Label).string = str;
    var currentSceneCanvas = cc.director.getScene().getChildByName("Canvas");
    currentSceneCanvas.addChild(notiNode);
    var self = this;
    cc.tween(notiNode).by(self.moveTime, {
      y: self.moveDis
    }).delay(self.lastTime - self.moveTime) //.to(0.3, {opacity: 0})
    .call(function () {
      notiNode.destroy();
    }).start();
  },
  pushNoti: function pushNoti(str) {
    this.noties.push(str);
  } // update (dt) {},

});
var sharedNotificationMgr = new NotificationMgr();
module.exports = sharedNotificationMgr;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL3NpbmdsZUluc3RhbmNlU3lzdGVtcy9ub3RpZmljYXRpb25NZ3IuanMiXSwibmFtZXMiOlsiTm90aWZpY2F0aW9uTWdyIiwiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJsYXN0VGltZSIsIm1vdmVUaW1lIiwibW92ZURpcyIsIm5vdGllcyIsInN0YXJ0Iiwic2hvd05vdGkiLCJzdHIiLCJub3RpUHJlZmFiIiwicmVxdWlyZSIsInJlc2VzIiwibm90aVN5c1ByZWZhYiIsIm5vdGlOb2RlIiwiaW5zdGFudGlhdGUiLCJsYWJlbCIsImdldENoaWxkQnlOYW1lIiwiZ2V0Q29tcG9uZW50IiwiTGFiZWwiLCJzdHJpbmciLCJjdXJyZW50U2NlbmVDYW52YXMiLCJkaXJlY3RvciIsImdldFNjZW5lIiwiYWRkQ2hpbGQiLCJzZWxmIiwidHdlZW4iLCJieSIsInkiLCJkZWxheSIsImNhbGwiLCJkZXN0cm95IiwicHVzaE5vdGkiLCJwdXNoIiwic2hhcmVkTm90aWZpY2F0aW9uTWdyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxJQUFJQSxlQUFlLEdBQUdDLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQzNCLGFBQVNELEVBQUUsQ0FBQ0UsU0FEZTtBQUczQkMsRUFBQUEsVUFBVSxFQUFFO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FDLElBQUFBLFFBQVEsRUFBRSxDQWhCRjtBQWlCUkMsSUFBQUEsUUFBUSxFQUFFLEdBakJGO0FBa0JSQyxJQUFBQSxPQUFPLEVBQUUsR0FsQkQ7QUFvQlJDLElBQUFBLE1BQU0sRUFBRTtBQXBCQSxHQUhlO0FBMEIzQjtBQUVBO0FBRUFDLEVBQUFBLEtBOUIyQixtQkE4QmxCLENBRVIsQ0FoQzBCO0FBa0MzQkMsRUFBQUEsUUFsQzJCLG9CQWtDbEJDLEdBbENrQixFQWtDYjtBQUNWLFFBQUlDLFVBQVUsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBUCxDQUFrQkMsS0FBbEIsQ0FBd0JDLGFBQXpDOztBQUNBLFFBQUlDLFFBQVEsR0FBR2YsRUFBRSxDQUFDZ0IsV0FBSCxDQUFlTCxVQUFmLENBQWY7QUFDQSxRQUFJTSxLQUFLLEdBQUdGLFFBQVEsQ0FBQ0csY0FBVCxDQUF3QixPQUF4QixDQUFaO0FBQ0FELElBQUFBLEtBQUssQ0FBQ0UsWUFBTixDQUFtQm5CLEVBQUUsQ0FBQ29CLEtBQXRCLEVBQTZCQyxNQUE3QixHQUFzQ1gsR0FBdEM7QUFDQSxRQUFJWSxrQkFBa0IsR0FBR3RCLEVBQUUsQ0FBQ3VCLFFBQUgsQ0FBWUMsUUFBWixHQUF1Qk4sY0FBdkIsQ0FBc0MsUUFBdEMsQ0FBekI7QUFDQUksSUFBQUEsa0JBQWtCLENBQUNHLFFBQW5CLENBQTRCVixRQUE1QjtBQUNBLFFBQUlXLElBQUksR0FBRyxJQUFYO0FBQ0ExQixJQUFBQSxFQUFFLENBQUMyQixLQUFILENBQVNaLFFBQVQsRUFDS2EsRUFETCxDQUNRRixJQUFJLENBQUNyQixRQURiLEVBQ3NCO0FBQUN3QixNQUFBQSxDQUFDLEVBQUVILElBQUksQ0FBQ3BCO0FBQVQsS0FEdEIsRUFFS3dCLEtBRkwsQ0FFV0osSUFBSSxDQUFDdEIsUUFBTCxHQUFnQnNCLElBQUksQ0FBQ3JCLFFBRmhDLEVBR0k7QUFISixLQUlLMEIsSUFKTCxDQUlVLFlBQVU7QUFDWmhCLE1BQUFBLFFBQVEsQ0FBQ2lCLE9BQVQ7QUFDSCxLQU5MLEVBT0t4QixLQVBMO0FBUUgsR0FsRDBCO0FBb0QzQnlCLEVBQUFBLFFBcEQyQixvQkFvRGxCdkIsR0FwRGtCLEVBb0RiO0FBQ1YsU0FBS0gsTUFBTCxDQUFZMkIsSUFBWixDQUFpQnhCLEdBQWpCO0FBQ0gsR0F0RDBCLENBdUQzQjs7QUF2RDJCLENBQVQsQ0FBdEI7QUEwREEsSUFBSXlCLHFCQUFxQixHQUFHLElBQUlwQyxlQUFKLEVBQTVCO0FBQ0FxQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJGLHFCQUFqQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGVhcm4gY2MuQ2xhc3M6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvY2xhc3MuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHA6Ly9kb2NzLmNvY29zMmQteC5vcmcvY3JlYXRvci9tYW51YWwvZW4vc2NyaXB0aW5nL2NsYXNzLmh0bWxcbi8vIExlYXJuIEF0dHJpYnV0ZTpcbi8vICAtIFtDaGluZXNlXSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL3poL3NjcmlwdGluZy9yZWZlcmVuY2UvYXR0cmlidXRlcy5odG1sXG4vLyAgLSBbRW5nbGlzaF0gaHR0cDovL2RvY3MuY29jb3MyZC14Lm9yZy9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxuLy8gTGVhcm4gbGlmZS1jeWNsZSBjYWxsYmFja3M6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHBzOi8vd3d3LmNvY29zMmQteC5vcmcvZG9jcy9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxuXG52YXIgTm90aWZpY2F0aW9uTWdyID0gY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgLy8gZm9vOiB7XG4gICAgICAgIC8vICAgICAvLyBBVFRSSUJVVEVTOlxuICAgICAgICAvLyAgICAgZGVmYXVsdDogbnVsbCwgICAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdXNlZCBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBhdHRhY2hpbmdcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBhIG5vZGUgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgIC8vICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZSwgLy8gb3B0aW9uYWwsIGRlZmF1bHQgaXMgdHlwZW9mIGRlZmF1bHRcbiAgICAgICAgLy8gICAgIHNlcmlhbGl6YWJsZTogdHJ1ZSwgICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0cnVlXG4gICAgICAgIC8vIH0sXG4gICAgICAgIC8vIGJhcjoge1xuICAgICAgICAvLyAgICAgZ2V0ICgpIHtcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gdGhpcy5fYmFyO1xuICAgICAgICAvLyAgICAgfSxcbiAgICAgICAgLy8gICAgIHNldCAodmFsdWUpIHtcbiAgICAgICAgLy8gICAgICAgICB0aGlzLl9iYXIgPSB2YWx1ZTtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSxcbiAgICAgICAgbGFzdFRpbWU6IDIsXG4gICAgICAgIG1vdmVUaW1lOiAwLjUsXG4gICAgICAgIG1vdmVEaXM6IDIwMCxcblxuICAgICAgICBub3RpZXM6IFtdXG4gICAgfSxcblxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxuXG4gICAgLy8gb25Mb2FkICgpIHt9LFxuXG4gICAgc3RhcnQgKCkge1xuXG4gICAgfSxcblxuICAgIHNob3dOb3RpKHN0cikge1xuICAgICAgICB2YXIgbm90aVByZWZhYiA9IHJlcXVpcmUoXCJyZXNNZ3JcIikucmVzZXMubm90aVN5c1ByZWZhYlxuICAgICAgICB2YXIgbm90aU5vZGUgPSBjYy5pbnN0YW50aWF0ZShub3RpUHJlZmFiKVxuICAgICAgICB2YXIgbGFiZWwgPSBub3RpTm9kZS5nZXRDaGlsZEJ5TmFtZShcImxhYmVsXCIpXG4gICAgICAgIGxhYmVsLmdldENvbXBvbmVudChjYy5MYWJlbCkuc3RyaW5nID0gc3RyXG4gICAgICAgIHZhciBjdXJyZW50U2NlbmVDYW52YXMgPSBjYy5kaXJlY3Rvci5nZXRTY2VuZSgpLmdldENoaWxkQnlOYW1lKFwiQ2FudmFzXCIpXG4gICAgICAgIGN1cnJlbnRTY2VuZUNhbnZhcy5hZGRDaGlsZChub3RpTm9kZSlcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgICAgIGNjLnR3ZWVuKG5vdGlOb2RlKVxuICAgICAgICAgICAgLmJ5KHNlbGYubW92ZVRpbWUse3k6IHNlbGYubW92ZURpc30pXG4gICAgICAgICAgICAuZGVsYXkoc2VsZi5sYXN0VGltZSAtIHNlbGYubW92ZVRpbWUpXG4gICAgICAgICAgICAvLy50bygwLjMsIHtvcGFjaXR5OiAwfSlcbiAgICAgICAgICAgIC5jYWxsKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgbm90aU5vZGUuZGVzdHJveSgpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXJ0KClcbiAgICB9LFxuXG4gICAgcHVzaE5vdGkoc3RyKSB7XG4gICAgICAgIHRoaXMubm90aWVzLnB1c2goc3RyKVxuICAgIH1cbiAgICAvLyB1cGRhdGUgKGR0KSB7fSxcbn0pO1xuXG52YXIgc2hhcmVkTm90aWZpY2F0aW9uTWdyID0gbmV3IE5vdGlmaWNhdGlvbk1ncigpXG5tb2R1bGUuZXhwb3J0cyA9IHNoYXJlZE5vdGlmaWNhdGlvbk1nciJdfQ==
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/singleInstanceSystems/advertisMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd2cc9xBWpRNy65AgLl//eBO', 'advertisMgr');
// scripts/singleInstanceSystems/advertisMgr.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var AdvertisMgr = cc.Class({
  "extends": cc.Component,
  properties: {
    // foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
    videoAd: null,
    delegate: null,
    wechatAdId: "xxxxx",
    isReady: {
      get: function get() {
        return this._isReady;
      },
      set: function set(value) {
        this._isReady = value; //1 = ok , 2 = loading 3 = erro

        if (value == 1 && this.showStatus == 1) {
          sdkbox.PluginAdMob.show("rewarded");
        } else if (value == 3 && this.showStatus == 1) {
          this.showStatus = 0;
          this.removeActivityNode();

          require("notificationMgr").showNoti("something wrong with ad system , retry later");
        } else if (value == 2 && this.showStatus == 1) {
          this.showActivityNode();
        }
      }
    },
    showStatus: {
      get: function get() {
        return this._showStatus;
      },
      set: function set(value) {
        this._showStatus = value; //0 = init 1 = will show 2 = showing
      }
    },
    activityNode: null,
    isRewardSend: false
  },
  showActivityNode: function showActivityNode() {
    var activityNodePrefab = require("resMgr").reses["activityNodePrefab"];

    var activityNode = cc.instantiate(activityNodePrefab);
    var bg = activityNode.getChildByName("bg");
    bg.width = cc.winSize.width;
    bg.height = cc.winSize.height;
    bg.on("touchstart", function () {});
    var activity = activityNode.getChildByName("activity");
    cc.tween(activity).repeatForever(cc.tween().by(2, {
      angle: 360
    })).start();
    this.activityNode = activityNode;
    cc.director.getScene().getChildByName("Canvas").addChild(this.activityNode);
  },
  removeActivityNode: function removeActivityNode() {
    if (this.activityNode != null && this.activityNode.parent != null) {
      this.activityNode.destroy();
      this.activityNode.removeFromParent();
      this.activityNode = null;
    }
  },
  onVideoAdEnd: function onVideoAdEnd() {
    if (this.delegate != null && typeof this.delegate.onVideoAdEnd == "function") {
      this.delegate.onVideoAdEnd();
    }
  },
  onVideoAdNotEnd: function onVideoAdNotEnd() {
    var defaultNoti = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    if (defaultNoti == true) {
      var notificationSys = require("notificationMgr");

      notificationSys.showNoti("看完视频才能获得奖励哦~");
    }

    if (this.delegate != null && typeof this.delegate.onVideoAdNotEnd == "function") {
      this.delegate.onVideoAdNotEnd();
    }
  },
  onVideoAdLoadError: function onVideoAdLoadError(err) {
    console.log("拉取广告失败");

    if (this.delegate != null && typeof this.delegate.onVideoAdLoadError == "function") {
      this.delegate.onVideoAdLoadError(err);
    }
  },
  onVideoAdShowError: function onVideoAdShowError(err) {
    if (this.delegate != null && typeof this.delegate.onVideoAdShowError == "function") {
      this.delegate.onVideoAdShowError(err);
    }
  },
  initAds: function initAds() {
    if (this.videoAd == null) {
      if (cc.sys.platform == cc.sys.WECHAT_GAME) {
        var self = this;
        this.videoAd = wx.createRewardedVideoAd({
          adUnitId: this.wechatAdId
        });
        this.videoAd.onLoad(function () {
          console.log("拉取广告成功");
        });
        this.videoAd.onError(function (err) {
          self.onVideoAdLoadError(err);
        });
        this.videoAd.onClose(function (res) {
          if (res && res.isEnded) {
            self.onVideoAdEnd();
          } else {
            self.onVideoAdNotEnd();
          }
        });
      } else if (cc.sys.os == cc.sys.OS_IOS || cc.sys.os == cc.sys.OS_ANDROID) {
        var self = this;
        sdkbox.PluginAdMob.setListener({
          adViewDidReceiveAd: function adViewDidReceiveAd(name) {
            self.isReady = 1;
          },
          adViewDidFailToReceiveAdWithError: function adViewDidFailToReceiveAdWithError(name, msg) {
            self.isReady = 3;
            self.onVideoAdLoadError(msg);
          },
          adViewWillPresentScreen: function adViewWillPresentScreen(name) {
            self.removeActivityNode();
            self.showStatus = 2;
            self.isRewardSend = false;
            cc.audioEngine.pauseAll();
          },
          adViewDidDismissScreen: function adViewDidDismissScreen(name) {
            self.showStatus = 0;

            if (self.isRewardSend == false) {
              self.onVideoAdNotEnd(true);
            }

            self.isReady = 2;
            sdkbox.PluginAdMob.cache("rewarded");
            cc.audioEngine.resumeAll();
          },
          adViewWillDismissScreen: function adViewWillDismissScreen(name) {},
          adViewWillLeaveApplication: function adViewWillLeaveApplication(name) {},
          reward: function reward(name, currency, amount) {
            self.isRewardSend = true;
            self.onVideoAdEnd();
          }
        });
        this.isReady = 2;
        sdkbox.PluginAdMob.init();
        sdkbox.PluginAdMob.cache("rewarded");
      }
    }
  },
  showVideoAd: function showVideoAd() {
    if (cc.sys.platform == cc.sys.WECHAT_GAME) {
      var self = this;
      this.videoAd.load().then(function () {
        self.videoAd.show();
      })["catch"](function (err) {
        self.onVideoAdShowError(err);
      });
    } else if (cc.sys.os == cc.sys.OS_ANDROID || cc.sys.os == cc.sys.OS_IOS) {
      this.showStatus = 1;
      cc.log(this.isReady + " : current isready");

      if (this.isReady == 1) {
        this.showActivityNode();
        sdkbox.PluginAdMob.show("rewarded");
      } else if (this.isReady == 2) {
        //just wait set event of isReady to 1
        this.showActivityNode();
      } else if (this.isReady == 3) {
        //reload once and then show
        this.isReady = 2;
        sdkbox.PluginAdMob.cache("rewarded"); //wait set event of isReady to 1
      }
    }
  }
});
var sharedAdvertisMgr = new AdvertisMgr();
module.exports = sharedAdvertisMgr;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/systems/ensureSys_notUse/ensureSystem.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '2cfa2q87j1AbaAokGOxDLrP', 'ensureSystem');
// scripts/systems/ensureSys_notUse/ensureSystem.js

"use strict";

// Learn cc.Class:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
var EnsureSystem = cc.Class({
  "extends": cc.Component,
  properties: {// foo: {
    //     // ATTRIBUTES:
    //     default: null,        // The default value will be used only when the component attaching
    //                           // to a node for the first time
    //     type: cc.SpriteFrame, // optional, default is typeof default
    //     serializable: true,   // optional, default is true
    // },
    // bar: {
    //     get () {
    //         return this._bar;
    //     },
    //     set (value) {
    //         this._bar = value;
    //     }
    // },
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {},
  start: function start() {},
  create: function create() {
    var uiPrefab = require("resMgr").reses.ensureSysPrefab;

    var ui = cc.instantiate(uiPrefab);
    return ui;
  }
});
var sharedEnsureSystem = new EnsureSystem();
module.exports = sharedEnsureSystem;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL3N5c3RlbXMvZW5zdXJlU3lzX25vdFVzZS9lbnN1cmVTeXN0ZW0uanMiXSwibmFtZXMiOlsiRW5zdXJlU3lzdGVtIiwiY2MiLCJDbGFzcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJvbkxvYWQiLCJzdGFydCIsImNyZWF0ZSIsInVpUHJlZmFiIiwicmVxdWlyZSIsInJlc2VzIiwiZW5zdXJlU3lzUHJlZmFiIiwidWkiLCJpbnN0YW50aWF0ZSIsInNoYXJlZEVuc3VyZVN5c3RlbSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBSUEsWUFBWSxHQUFJQyxFQUFFLENBQUNDLEtBQUgsQ0FBUztBQUN6QixhQUFTRCxFQUFFLENBQUNFLFNBRGE7QUFHekJDLEVBQUFBLFVBQVUsRUFBRSxDQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWZRLEdBSGE7QUFzQnpCO0FBRUFDLEVBQUFBLE1BeEJ5QixvQkF3QmYsQ0FFVCxDQTFCd0I7QUE0QnpCQyxFQUFBQSxLQTVCeUIsbUJBNEJoQixDQUVSLENBOUJ3QjtBQWdDekJDLEVBQUFBLE1BaEN5QixvQkFnQ2hCO0FBQ0wsUUFBSUMsUUFBUSxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUFQLENBQWtCQyxLQUFsQixDQUF3QkMsZUFBdkM7O0FBQ0EsUUFBSUMsRUFBRSxHQUFHWCxFQUFFLENBQUNZLFdBQUgsQ0FBZUwsUUFBZixDQUFUO0FBQ0EsV0FBT0ksRUFBUDtBQUNIO0FBcEN3QixDQUFULENBQXBCO0FBdUNBLElBQUlFLGtCQUFrQixHQUFHLElBQUlkLFlBQUosRUFBekI7QUFDQWUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCRixrQkFBakIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExlYXJuIGNjLkNsYXNzOlxuLy8gIC0gW0NoaW5lc2VdIGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL2NsYXNzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwOi8vZG9jcy5jb2NvczJkLXgub3JnL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9jbGFzcy5odG1sXG4vLyBMZWFybiBBdHRyaWJ1dGU6XG4vLyAgLSBbQ2hpbmVzZV0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC96aC9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxuLy8gIC0gW0VuZ2xpc2hdIGh0dHA6Ly9kb2NzLmNvY29zMmQteC5vcmcvY3JlYXRvci9tYW51YWwvZW4vc2NyaXB0aW5nL3JlZmVyZW5jZS9hdHRyaWJ1dGVzLmh0bWxcbi8vIExlYXJuIGxpZmUtY3ljbGUgY2FsbGJhY2tzOlxuLy8gIC0gW0NoaW5lc2VdIGh0dHBzOi8vZG9jcy5jb2Nvcy5jb20vY3JlYXRvci9tYW51YWwvemgvc2NyaXB0aW5nL2xpZmUtY3ljbGUtY2FsbGJhY2tzLmh0bWxcbi8vICAtIFtFbmdsaXNoXSBodHRwczovL3d3dy5jb2NvczJkLXgub3JnL2RvY3MvY3JlYXRvci9tYW51YWwvZW4vc2NyaXB0aW5nL2xpZmUtY3ljbGUtY2FsbGJhY2tzLmh0bWxcblxudmFyIEVuc3VyZVN5c3RlbSA9ICBjYy5DbGFzcyh7XG4gICAgZXh0ZW5kczogY2MuQ29tcG9uZW50LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICAvLyBmb286IHtcbiAgICAgICAgLy8gICAgIC8vIEFUVFJJQlVURVM6XG4gICAgICAgIC8vICAgICBkZWZhdWx0OiBudWxsLCAgICAgICAgLy8gVGhlIGRlZmF1bHQgdmFsdWUgd2lsbCBiZSB1c2VkIG9ubHkgd2hlbiB0aGUgY29tcG9uZW50IGF0dGFjaGluZ1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGEgbm9kZSBmb3IgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgLy8gICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lLCAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyB0eXBlb2YgZGVmYXVsdFxuICAgICAgICAvLyAgICAgc2VyaWFsaXphYmxlOiB0cnVlLCAgIC8vIG9wdGlvbmFsLCBkZWZhdWx0IGlzIHRydWVcbiAgICAgICAgLy8gfSxcbiAgICAgICAgLy8gYmFyOiB7XG4gICAgICAgIC8vICAgICBnZXQgKCkge1xuICAgICAgICAvLyAgICAgICAgIHJldHVybiB0aGlzLl9iYXI7XG4gICAgICAgIC8vICAgICB9LFxuICAgICAgICAvLyAgICAgc2V0ICh2YWx1ZSkge1xuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2JhciA9IHZhbHVlO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9LFxuXG4gICAgfSxcblxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxuXG4gICAgb25Mb2FkICgpIHtcblxuICAgIH0sXG5cbiAgICBzdGFydCAoKSB7XG5cbiAgICB9LFxuXG4gICAgY3JlYXRlKCkge1xuICAgICAgICB2YXIgdWlQcmVmYWIgPSByZXF1aXJlKFwicmVzTWdyXCIpLnJlc2VzLmVuc3VyZVN5c1ByZWZhYlxuICAgICAgICB2YXIgdWkgPSBjYy5pbnN0YW50aWF0ZSh1aVByZWZhYilcbiAgICAgICAgcmV0dXJuIHVpXG4gICAgfVxufSk7XG5cbnZhciBzaGFyZWRFbnN1cmVTeXN0ZW0gPSBuZXcgRW5zdXJlU3lzdGVtKClcbm1vZHVsZS5leHBvcnRzID0gc2hhcmVkRW5zdXJlU3lzdGVtIl19
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/configs/levelConfig.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'cb3edynoalP+oqr1exCykM8', 'levelConfig');
// configs/levelConfig.js

"use strict";

var levelConfig = {
  "1": {
    physicalPowerCost: 2,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "2": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "3": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "4": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "5": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "6": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "7": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "8": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "9": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "10": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "11": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "12": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "13": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "14": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "15": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "16": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "17": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "18": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "19": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "20": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "21": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "22": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "23": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "24": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  },
  "25": {
    physicalPowerCost: 3,
    heartForRetryCost: 2,
    desTextId: 101,
    bgmPath: "musics/bgm_001"
  }
};
module.exports = levelConfig;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------

                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/configs/levelSceneConfig.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '32cc930TbVCP6zdMVgYejeo', 'levelSceneConfig');
// configs/levelSceneConfig.js

"use strict";

var levelSceneConfig = {
  "1": {
    "fillNodes": [{
      "x": -246.303,
      "y": 96.712,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -247,
      "y": 223.639,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -136.049,
      "y": 227.128,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -137.325,
      "y": 336.456,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -6.301,
      "y": 336.456,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -6.301,
      "y": 227.554,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 215.992,
      "y": 227.554,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 215.992,
      "y": -119.27,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -136.651,
      "y": -119.27,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -135.487,
      "y": 97.204,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -246.144,
      "y": 162.539,
      "width": 110,
      "height": 10,
      "angle": 90
    }, {
      "x": -86.144,
      "y": 327.539,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -141.144,
      "y": 270.039,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -141.1,
      "y": -10.2,
      "width": 235.6,
      "height": 10,
      "angle": 90
    }, {
      "x": -21.144,
      "y": 275.039,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": -193.644,
      "y": 222.539,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -193.644,
      "y": 102.539,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 78.856,
      "y": 222.539,
      "width": 210,
      "height": 10,
      "angle": 0
    }, {
      "x": 188.856,
      "y": 52.539,
      "width": 350,
      "height": 10,
      "angle": 90
    }, {
      "x": 24,
      "y": -127,
      "width": 339.6,
      "height": 10,
      "angle": 0
    }],
    "targets": [{
      "x": -81.144,
      "y": 267.539,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": []
    }],
    "bullets": [{
      "basic": {
        "x": -186.144,
        "y": 162.539,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 23.856,
        "y": 57.539,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": ""
      }
    }]
  },
  "2": {
    "fillNodes": [{
      "x": -284.502,
      "y": -16.414,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -284.502,
      "y": 317.328,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -178.726,
      "y": 317.328,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -178.726,
      "y": 372.952,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -123.102,
      "y": 372.952,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -123.102,
      "y": 427.664,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 102.128,
      "y": 428.576,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 102.128,
      "y": 373.864,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 204.257,
      "y": 372.952,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 204.257,
      "y": 318.24,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 260.793,
      "y": 318.24,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 260.793,
      "y": 264.44,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 363.834,
      "y": 264.44,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 363.834,
      "y": 142.25,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 261.705,
      "y": 142.25,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 261.705,
      "y": 97.569,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 87.539,
      "y": 97.569,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 87.539,
      "y": 141.338,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 40.122,
      "y": 141.338,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 40.122,
      "y": 99.392,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -24.62,
      "y": 97.568,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -24.62,
      "y": 43.768,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -164.135,
      "y": 43.768,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -164.135,
      "y": -11.856,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -282.792,
      "y": 153.095,
      "width": 320,
      "height": 10,
      "angle": 90
    }, {
      "x": -230.338,
      "y": 318.062,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -227.805,
      "y": -11.97,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": 149.939,
      "y": 373.555,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 179.5,
      "y": 98.5,
      "width": 175.15,
      "height": 10,
      "angle": 0
    }, {
      "x": -14.9,
      "y": 428.648,
      "width": 225,
      "height": 10,
      "angle": 0
    }, {
      "x": -177.835,
      "y": 340.852,
      "width": 55,
      "height": 10,
      "angle": 90
    }, {
      "x": 64.596,
      "y": 142.566,
      "width": 55,
      "height": 10,
      "angle": 0
    }, {
      "x": 229.763,
      "y": 318.267,
      "width": 55,
      "height": 10,
      "angle": 0
    }, {
      "x": 14.8,
      "y": 98.7,
      "width": 45,
      "height": 10,
      "angle": 0
    }, {
      "x": -84.356,
      "y": 42.763,
      "width": 167.5,
      "height": 10,
      "angle": 0
    }, {
      "x": 262.246,
      "y": 290.782,
      "width": 65,
      "height": 10,
      "angle": 90
    }, {
      "x": 309.706,
      "y": 263.221,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 309.706,
      "y": 143.221,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 367.226,
      "y": 203.232,
      "width": 130,
      "height": 10,
      "angle": 90
    }, {
      "x": 207.453,
      "y": 345.95,
      "width": 65,
      "height": 10,
      "angle": 90
    }, {
      "x": -122.511,
      "y": 396.16,
      "width": 55,
      "height": 10,
      "angle": 90
    }, {
      "x": 261.987,
      "y": 120.68,
      "width": 55,
      "height": 10,
      "angle": 90
    }, {
      "x": -0.619,
      "y": 70.797,
      "width": 65,
      "height": 10,
      "angle": 90
    }, {
      "x": 87,
      "y": 120.52,
      "width": 54.1,
      "height": 10,
      "angle": 90
    }, {
      "x": 42.06,
      "y": 120.58,
      "width": 54.02,
      "height": 10,
      "angle": 90
    }, {
      "x": -162.898,
      "y": 15.454,
      "width": 65,
      "height": 10,
      "angle": 90
    }, {
      "x": 102.382,
      "y": 401.191,
      "width": 65,
      "height": 10,
      "angle": 90
    }, {
      "x": -150.459,
      "y": 373.511,
      "width": 65,
      "height": 10,
      "angle": 0
    }],
    "targets": [{
      "x": 307.226,
      "y": 203.221,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": []
    }],
    "bullets": [{
      "basic": {
        "x": -222.792,
        "y": 48.03,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }]
  },
  "3": {
    "fillNodes": [{
      "x": -285.304,
      "y": 92.657,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -285.304,
      "y": 212.645,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -177.982,
      "y": 211.978,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -179.982,
      "y": 423.29,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 151.318,
      "y": 424.623,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 151.985,
      "y": 319.967,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 255.308,
      "y": 317.301,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 255.308,
      "y": 195.98,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 151.319,
      "y": 195.98,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 151.319,
      "y": 93.99,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 31.091,
      "y": 94.975,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 29.12,
      "y": 303.896,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -59.573,
      "y": 305.867,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -61.544,
      "y": 94.975,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -282.792,
      "y": 153.095,
      "width": 110,
      "height": 10,
      "angle": 90
    }, {
      "x": -177.792,
      "y": 313.095,
      "width": 210,
      "height": 10,
      "angle": 90
    }, {
      "x": 152.208,
      "y": 370.595,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": -17.792,
      "y": 423.095,
      "width": 330,
      "height": 10,
      "angle": 0
    }, {
      "x": -230.292,
      "y": 213.095,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 199.708,
      "y": 318.095,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 204.708,
      "y": 198.095,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 257.208,
      "y": 263.095,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": 152.208,
      "y": 150.595,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 92.208,
      "y": 93.095,
      "width": 130,
      "height": 10,
      "angle": 0
    }, {
      "x": 32.208,
      "y": 203.095,
      "width": 210,
      "height": 10,
      "angle": 90
    }, {
      "x": -57.792,
      "y": 203.095,
      "width": 210,
      "height": 10,
      "angle": 90
    }, {
      "x": -170.292,
      "y": 93.095,
      "width": 235,
      "height": 10,
      "angle": 0
    }, {
      "x": -12.792,
      "y": 303.095,
      "width": 100,
      "height": 10,
      "angle": 0
    }],
    "targets": [{
      "x": -222.792,
      "y": 153.095,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 197.208,
      "y": 258.095,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": []
    }],
    "bullets": [{
      "basic": {
        "x": -117.792,
        "y": 363.095,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 92.208,
        "y": 363.095,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }]
  },
  "4": {
    "fillNodes": [{
      "x": -285.304,
      "y": 92.657,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -285.304,
      "y": 212.645,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -177.982,
      "y": 211.978,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -179.982,
      "y": 423.29,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 151.318,
      "y": 424.623,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 151.985,
      "y": 319.967,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 255.308,
      "y": 317.301,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 255.308,
      "y": 195.98,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 151.319,
      "y": 195.98,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 151.319,
      "y": 93.99,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 31.091,
      "y": 94.975,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 29.12,
      "y": 303.896,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -59.573,
      "y": 305.867,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -61.544,
      "y": 94.975,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -282.792,
      "y": 153.095,
      "width": 110,
      "height": 10,
      "angle": 90
    }, {
      "x": -177.792,
      "y": 313.095,
      "width": 210,
      "height": 10,
      "angle": 90
    }, {
      "x": 152.208,
      "y": 370.595,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": -17.792,
      "y": 423.095,
      "width": 330,
      "height": 10,
      "angle": 0
    }, {
      "x": -230.292,
      "y": 213.095,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 199.708,
      "y": 318.095,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 204.708,
      "y": 198.095,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 257.208,
      "y": 263.095,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": 152.208,
      "y": 150.595,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 92.208,
      "y": 93.095,
      "width": 130,
      "height": 10,
      "angle": 0
    }, {
      "x": 32.208,
      "y": 203.095,
      "width": 210,
      "height": 10,
      "angle": 90
    }, {
      "x": -57.792,
      "y": 203.095,
      "width": 210,
      "height": 10,
      "angle": 90
    }, {
      "x": -170.292,
      "y": 93.095,
      "width": 235,
      "height": 10,
      "angle": 0
    }, {
      "x": -12.792,
      "y": 303.095,
      "width": 100,
      "height": 10,
      "angle": 0
    }],
    "targets": [{
      "x": -222.792,
      "y": 153.095,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 197.208,
      "y": 258.095,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": [{
        "x": -12.792,
        "y": 363.095,
        "width": 210,
        "height": 10,
        "angle": 0
      }]
    }],
    "bullets": [{
      "basic": {
        "x": -117.792,
        "y": 153.095,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 92.208,
        "y": 153.095,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": -12.792,
        "y": 363.095,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay01"
      }
    }]
  },
  "5": {
    "fillNodes": [{
      "x": -284.185,
      "y": 94.113,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -285.108,
      "y": 212.216,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -73.815,
      "y": 213.139,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -74.738,
      "y": 319.247,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 46.133,
      "y": 319.247,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 47.978,
      "y": 214.062,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 150.395,
      "y": 214.062,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 147.627,
      "y": 93.191,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -58.13,
      "y": 94.114,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -63.666,
      "y": -11.994,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -178.078,
      "y": -11.994,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -180.846,
      "y": 92.269,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -282.792,
      "y": 153.095,
      "width": 110,
      "height": 10,
      "angle": 90
    }, {
      "x": -17.792,
      "y": 318.095,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -112.792,
      "y": -11.905,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -72.792,
      "y": 260.595,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 47.208,
      "y": 265.595,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": -57.792,
      "y": 45.595,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -177.792,
      "y": 40.595,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": -230.292,
      "y": 93.095,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 94.708,
      "y": 213.095,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 47.208,
      "y": 93.095,
      "width": 220,
      "height": 10,
      "angle": 0
    }, {
      "x": 152.208,
      "y": 158.095,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": -177.792,
      "y": 213.095,
      "width": 220,
      "height": 10,
      "angle": 0
    }],
    "targets": [{
      "x": -12.792,
      "y": 258.095,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": [{
        "x": -117.792,
        "y": 100.595,
        "width": 105,
        "height": 10,
        "angle": 90
      }]
    }],
    "bullets": [{
      "basic": {
        "x": -222.792,
        "y": 153.095,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": -117.792,
        "y": 153.095,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay01"
      }
    }]
  },
  "6": {
    "fillNodes": [{
      "x": -53.126,
      "y": -114.868,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -56.723,
      "y": -13.548,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -159.242,
      "y": -12.948,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -159.242,
      "y": 91.37,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -262.96,
      "y": 90.171,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -264.159,
      "y": 213.674,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -160.441,
      "y": 211.875,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -159.242,
      "y": 317.991,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -55.524,
      "y": 315.593,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -55.524,
      "y": 407.92,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -158.643,
      "y": 407.32,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -159.243,
      "y": 529.024,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 66.779,
      "y": 526.626,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 66.779,
      "y": 421.709,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 171.097,
      "y": 422.908,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 171.697,
      "y": 301.204,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 65.581,
      "y": 298.806,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 66.78,
      "y": 211.874,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 172.896,
      "y": 211.274,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 171.097,
      "y": -14.748,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 66.18,
      "y": -14.148,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 66.78,
      "y": -119.665,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -52.526,
      "y": -119.665,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -261.967,
      "y": 152.284,
      "width": 110,
      "height": 10,
      "angle": 90
    }, {
      "x": -156.967,
      "y": 44.784,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -51.967,
      "y": -60.216,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 68.033,
      "y": -65.216,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 173.033,
      "y": 94.784,
      "width": 225,
      "height": 10,
      "angle": 90
    }, {
      "x": 115.533,
      "y": -12.716,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 120.533,
      "y": 212.284,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -104.467,
      "y": -12.716,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 3.033,
      "y": -117.716,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -156.967,
      "y": 259.784,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -156.967,
      "y": 462.284,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": 68.033,
      "y": 474.784,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 173.033,
      "y": 367.284,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": -51.967,
      "y": 362.284,
      "width": 100,
      "height": 10,
      "angle": 90
    }, {
      "x": -209.467,
      "y": 212.284,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -209.467,
      "y": 92.284,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -49.467,
      "y": 527.284,
      "width": 225,
      "height": 10,
      "angle": 0
    }, {
      "x": -99.467,
      "y": 407.284,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 115.533,
      "y": 422.284,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 120.533,
      "y": 302.284,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 68.033,
      "y": 257.284,
      "width": 100,
      "height": 10,
      "angle": 90
    }, {
      "x": -104.467,
      "y": 317.284,
      "width": 115,
      "height": 10,
      "angle": 0
    }],
    "targets": [{
      "x": -96.967,
      "y": 467.284,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 113.033,
      "y": 362.284,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": []
    }],
    "bullets": [{
      "basic": {
        "x": -201.967,
        "y": 152.284,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 113.033,
        "y": 47.284,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }]
  },
  "7": {
    "fillNodes": [{
      "x": -65.714,
      "y": 86.196,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -66.567,
      "y": 192.021,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -170.685,
      "y": 190.314,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -170.685,
      "y": 259.683,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -118.658,
      "y": 259.683,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -118.016,
      "y": 313.637,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 105.507,
      "y": 313.637,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 108.719,
      "y": 260.325,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 157.534,
      "y": 260.325,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 160.103,
      "y": 192.883,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 54.764,
      "y": 191.598,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 55.406,
      "y": 87.544,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -169.889,
      "y": 227.311,
      "width": 57.5,
      "height": 10,
      "angle": 90
    }, {
      "x": 160.111,
      "y": 232.311,
      "width": 67.5,
      "height": 10,
      "angle": 90
    }, {
      "x": -143.639,
      "y": 261.061,
      "width": 62.5,
      "height": 10,
      "angle": 0
    }, {
      "x": 128.861,
      "y": 261.061,
      "width": 52.5,
      "height": 10,
      "angle": 0
    }, {
      "x": 107.611,
      "y": 193.561,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 55.111,
      "y": 146.061,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -64.889,
      "y": 141.061,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": -117.389,
      "y": 193.561,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 0.111,
      "y": 88.561,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -117.389,
      "y": 282.311,
      "width": 52.5,
      "height": 10,
      "angle": 90
    }, {
      "x": 107.611,
      "y": 287.311,
      "width": 62.5,
      "height": 10,
      "angle": 90
    }, {
      "x": -9.889,
      "y": 313.561,
      "width": 225,
      "height": 10,
      "angle": 0
    }],
    "targets": [{
      "x": -4.889,
      "y": 148.561,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": -136.389,
      "y": 227.061,
      "width": 47.5,
      "height": 47.5,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": []
    }],
    "bullets": [{
      "basic": {
        "x": -57.389,
        "y": 253.561,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 126.611,
        "y": 227.061,
        "width": 47.5,
        "height": 47.5,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }]
  },
  "8": {
    "fillNodes": [{
      "x": 26.664,
      "y": -28.232,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 25.096,
      "y": 76.854,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -133.317,
      "y": 76.854,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -131.749,
      "y": 144.297,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -76.853,
      "y": 144.297,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -76.853,
      "y": 302.71,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 197.626,
      "y": 302.71,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 197.626,
      "y": 79.99,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 145.867,
      "y": 76.853,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 145.867,
      "y": -26.665,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -131.128,
      "y": 112.528,
      "width": 57.5,
      "height": 10,
      "angle": 90
    }, {
      "x": -52.378,
      "y": 78.778,
      "width": 167.5,
      "height": 10,
      "angle": 0
    }, {
      "x": 172.622,
      "y": 78.778,
      "width": 62.5,
      "height": 10,
      "angle": 0
    }, {
      "x": 146.372,
      "y": 31.278,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 26.372,
      "y": 26.278,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 91.372,
      "y": -26.222,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -104.878,
      "y": 146.278,
      "width": 62.5,
      "height": 10,
      "angle": 0
    }, {
      "x": -78.628,
      "y": 220.028,
      "width": 157.5,
      "height": 10,
      "angle": 90
    }, {
      "x": 55.122,
      "y": 303.778,
      "width": 277.5,
      "height": 10,
      "angle": 0
    }, {
      "x": 198.872,
      "y": 196.278,
      "width": 225,
      "height": 10,
      "angle": 90
    }],
    "targets": [{
      "x": 86.372,
      "y": 33.778,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": -97.628,
      "y": 112.278,
      "width": 47.5,
      "height": 47.5,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": []
    }],
    "bullets": [{
      "basic": {
        "x": 138.872,
        "y": 138.778,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 60.122,
        "y": 217.528,
        "width": 152.5,
        "height": 47.5,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 60.122,
        "y": 112.278,
        "width": 47.5,
        "height": 47.5,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }]
  },
  "9": {
    "fillNodes": [{
      "x": -309,
      "y": -92.364,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -309.536,
      "y": 357.505,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 285.855,
      "y": 359.141,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 288.035,
      "y": -93.949,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -307.493,
      "y": 133.088,
      "width": 440,
      "height": 10,
      "angle": 90
    }, {
      "x": 287.507,
      "y": 138.088,
      "width": 450,
      "height": 10,
      "angle": 90
    }, {
      "x": -277.493,
      "y": -91.912,
      "width": 70,
      "height": 10,
      "angle": 0
    }, {
      "x": -9.993,
      "y": 358.088,
      "width": 445,
      "height": 10,
      "angle": 0
    }, {
      "x": -9.993,
      "y": -91.912,
      "width": 445,
      "height": 10,
      "angle": 0
    }, {
      "x": 252.507,
      "y": 358.088,
      "width": 60,
      "height": 10,
      "angle": 0
    }, {
      "x": 257.507,
      "y": -91.912,
      "width": 70,
      "height": 10,
      "angle": 0
    }, {
      "x": 102.507,
      "y": 238.088,
      "width": 240,
      "height": 10,
      "angle": 0
    }, {
      "x": -12.493,
      "y": 138.088,
      "width": 210,
      "height": 10,
      "angle": 90
    }, {
      "x": 107.507,
      "y": 128.088,
      "width": 210,
      "height": 10,
      "angle": 90
    }, {
      "x": 162.507,
      "y": 28.088,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -277.493,
      "y": 358.088,
      "width": 70,
      "height": 10,
      "angle": 0
    }, {
      "x": -237.493,
      "y": 303.088,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": 217.507,
      "y": 303.088,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": 217.507,
      "y": -36.912,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": -237.493,
      "y": 38.088,
      "width": 270,
      "height": 10,
      "angle": 90
    }, {
      "x": -189.993,
      "y": 238.088,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": -119.993,
      "y": 28.088,
      "width": 225,
      "height": 10,
      "angle": 0
    }, {
      "x": -184.993,
      "y": 168.088,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -132.493,
      "y": 208.088,
      "width": 70,
      "height": 10,
      "angle": 90
    }],
    "targets": [{
      "x": -177.493,
      "y": 88.088,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 47.507,
      "y": 178.088,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": -167.493,
      "y": 203.088,
      "width": 50,
      "height": 50,
      "angle": 0
    }, {
      "x": 142.507,
      "y": 63.088,
      "width": 50,
      "height": 50,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": []
    }],
    "bullets": [{
      "basic": {
        "x": -72.493,
        "y": 193.088,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": -272.493,
        "y": 203.088,
        "width": 50,
        "height": 50,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 197.507,
        "y": 133.088,
        "width": 50,
        "height": 50,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 197.507,
        "y": 198.088,
        "width": 50,
        "height": 70,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 197.507,
        "y": 68.088,
        "width": 50,
        "height": 70,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 47.507,
        "y": 73.088,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }]
  },
  "10": {
    "fillNodes": [{
      "x": -156.535,
      "y": -114.391,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -159.545,
      "y": 0,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -53.817,
      "y": 2.057,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -55.799,
      "y": 303.962,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -160.838,
      "y": 303.301,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -158.062,
      "y": 530.91,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -39.631,
      "y": 529.06,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -39.631,
      "y": 426.358,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 67.697,
      "y": 423.582,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 67.697,
      "y": 216.328,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 171.324,
      "y": 214.478,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 171.324,
      "y": 93.272,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 64.921,
      "y": 92.347,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 66.771,
      "y": -100.103,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 169.473,
      "y": -101.953,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 172.249,
      "y": -220.383,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -50.734,
      "y": -220.383,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -56.285,
      "y": -115.831,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -157.787,
      "y": 415.383,
      "width": 215,
      "height": 10,
      "angle": 90
    }, {
      "x": -102.787,
      "y": 527.883,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": 67.213,
      "y": 317.883,
      "width": 220,
      "height": 10,
      "angle": 90
    }, {
      "x": -37.787,
      "y": 475.383,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 9.713,
      "y": 422.883,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": -105.287,
      "y": 302.883,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -105.287,
      "y": 2.883,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -105.287,
      "y": -117.117,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -52.787,
      "y": -164.617,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 172.213,
      "y": -167.117,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": 54.713,
      "y": -222.117,
      "width": 225,
      "height": 10,
      "angle": 0
    }, {
      "x": 119.713,
      "y": -102.117,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 114.713,
      "y": 212.883,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 119.713,
      "y": 92.883,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 67.213,
      "y": -4.617,
      "width": 205,
      "height": 10,
      "angle": 90
    }, {
      "x": 172.213,
      "y": 157.883,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": -157.787,
      "y": -52.117,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": -52.787,
      "y": 152.883,
      "width": 310,
      "height": 10,
      "angle": 90
    }],
    "targets": [{
      "x": -97.787,
      "y": -57.117,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 112.213,
      "y": -162.117,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": [{
        "x": 59.713,
        "y": 152.883,
        "width": 105,
        "height": 10,
        "angle": 0
      }]
    }],
    "bullets": [{
      "basic": {
        "x": -97.787,
        "y": 467.883,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 7.213,
        "y": 257.883,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 112.213,
        "y": 152.883,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay01"
      }
    }]
  },
  "11": {
    "fillNodes": [{
      "x": -79.376,
      "y": -16.916,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -80.677,
      "y": 192.585,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -183.476,
      "y": 192.585,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -184.777,
      "y": 314.903,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 23.423,
      "y": 308.397,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 23.423,
      "y": 417.703,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 147.042,
      "y": 417.703,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 147.042,
      "y": 209.503,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 249.841,
      "y": 208.202,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 253.745,
      "y": 88.487,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 40.34,
      "y": 88.487,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 42.943,
      "y": -16.914,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -182.283,
      "y": 253.09,
      "width": 110,
      "height": 10,
      "angle": 90
    }, {
      "x": 27.717,
      "y": 360.59,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 82.717,
      "y": 418.09,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": 195.217,
      "y": 208.09,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 252.717,
      "y": 153.09,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": 42.717,
      "y": 40.59,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -12.283,
      "y": -16.91,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -77.283,
      "y": 313.09,
      "width": 220,
      "height": 10,
      "angle": 0
    }, {
      "x": -129.783,
      "y": 193.09,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 147.717,
      "y": 313.09,
      "width": 220,
      "height": 10,
      "angle": 90
    }, {
      "x": -77.283,
      "y": 88.09,
      "width": 220,
      "height": 10,
      "angle": 90
    }, {
      "x": 147.717,
      "y": 88.09,
      "width": 220,
      "height": 10,
      "angle": 0
    }],
    "targets": [{
      "x": -122.283,
      "y": 253.09,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 87.717,
      "y": 358.09,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": [{
        "x": 35.217,
        "y": 148.09,
        "width": 105,
        "height": 10,
        "angle": 0
      }, {
        "x": 35.217,
        "y": 253.09,
        "width": 105,
        "height": 10,
        "angle": 0
      }, {
        "x": 87.717,
        "y": 200.59,
        "width": 105,
        "height": 10,
        "angle": 90
      }, {
        "x": -17.283,
        "y": 200.59,
        "width": 105,
        "height": 10,
        "angle": 90
      }]
    }],
    "bullets": [{
      "basic": {
        "x": -17.283,
        "y": 43.09,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 192.717,
        "y": 148.09,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": -17.283,
        "y": 148.09,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay01"
      }
    }, {
      "basic": {
        "x": 87.717,
        "y": 148.09,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay01"
      }
    }]
  },
  "12": {
    "fillNodes": [{
      "x": -21.081,
      "y": -30.305,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -22.399,
      "y": 76.42,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -126.488,
      "y": 79.055,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -129.123,
      "y": 185.78,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -328.079,
      "y": 183.145,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -326.761,
      "y": 301.728,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -222.672,
      "y": 301.728,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -222.672,
      "y": 408.453,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -11.858,
      "y": 408.453,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -11.858,
      "y": 512.543,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 108.043,
      "y": 512.543,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 108.043,
      "y": 409.771,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 305.681,
      "y": 408.453,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 308.316,
      "y": 287.235,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 204.227,
      "y": 287.235,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 202.909,
      "y": 183.146,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 96.185,
      "y": 184.463,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 98.82,
      "y": -27.669,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -327.363,
      "y": 242.677,
      "width": 110,
      "height": 10,
      "angle": 90
    }, {
      "x": -12.363,
      "y": 25.177,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": -59.863,
      "y": 77.677,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": -117.363,
      "y": 130.177,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 265.137,
      "y": 287.677,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 160.137,
      "y": 182.677,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 52.637,
      "y": -27.323,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": 212.637,
      "y": 240.177,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 107.637,
      "y": 82.677,
      "width": 210,
      "height": 10,
      "angle": 90
    }, {
      "x": -274.863,
      "y": 302.677,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -222.363,
      "y": 350.177,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 317.637,
      "y": 352.677,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": -12.363,
      "y": 455.177,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 107.637,
      "y": 460.177,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 42.637,
      "y": 512.677,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -117.363,
      "y": 407.677,
      "width": 220,
      "height": 10,
      "angle": 0
    }, {
      "x": -222.363,
      "y": 182.677,
      "width": 220,
      "height": 10,
      "angle": 0
    }, {
      "x": 207.637,
      "y": 407.677,
      "width": 210,
      "height": 10,
      "angle": 0
    }],
    "targets": [{
      "x": 47.637,
      "y": 452.677,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": [{
        "x": -4.863,
        "y": 242.677,
        "width": 105,
        "height": 10,
        "angle": 0
      }, {
        "x": 47.637,
        "y": 295.177,
        "width": 105,
        "height": 10,
        "angle": 90
      }, {
        "x": -4.863,
        "y": 347.677,
        "width": 105,
        "height": 10,
        "angle": 0
      }, {
        "x": -57.363,
        "y": 295.177,
        "width": 105,
        "height": 10,
        "angle": 90
      }]
    }],
    "bullets": [{
      "basic": {
        "x": -267.363,
        "y": 242.677,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 47.637,
        "y": 347.677,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay01"
      }
    }, {
      "basic": {
        "x": 47.637,
        "y": 242.677,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay01"
      }
    }, {
      "basic": {
        "x": -57.363,
        "y": 242.677,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay01"
      }
    }]
  },
  "13": {
    "fillNodes": [{
      "x": -147.249,
      "y": -10.205,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -149.322,
      "y": 94.495,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -252.985,
      "y": 94.495,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -254.022,
      "y": 213.708,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -148.286,
      "y": 210.598,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -150.359,
      "y": 302.858,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -254.022,
      "y": 302.858,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -254.022,
      "y": 529.88,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -134.81,
      "y": 528.843,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -133.773,
      "y": 424.143,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 63.186,
      "y": 424.143,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 60.076,
      "y": 528.843,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 181.362,
      "y": 528.843,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 183.435,
      "y": 423.107,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 287.098,
      "y": 423.107,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 288.135,
      "y": 303.895,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 182.399,
      "y": 302.858,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 183.436,
      "y": 110.045,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 285.026,
      "y": 109.008,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 289.173,
      "y": -11.241,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 63.188,
      "y": -12.278,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 63.188,
      "y": 91.385,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -29.072,
      "y": 92.422,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -28.035,
      "y": -13.314,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -251.799,
      "y": 152.854,
      "width": 110,
      "height": 10,
      "angle": 90
    }, {
      "x": -199.299,
      "y": 212.854,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -194.299,
      "y": 302.854,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": -251.799,
      "y": 410.354,
      "width": 225,
      "height": 10,
      "angle": 90
    }, {
      "x": -196.799,
      "y": 527.854,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -131.799,
      "y": 475.354,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 63.201,
      "y": 470.354,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 183.201,
      "y": 475.354,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 230.701,
      "y": 422.854,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 235.701,
      "y": 302.854,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 230.701,
      "y": 107.854,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 180.701,
      "y": -12.146,
      "width": 225,
      "height": 10,
      "angle": 0
    }, {
      "x": 288.201,
      "y": 52.854,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": 62.932,
      "y": 40.354,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": -27.068,
      "y": 45.354,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -147.068,
      "y": 40.354,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": -199.568,
      "y": 92.854,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 17.932,
      "y": 92.854,
      "width": 100,
      "height": 10,
      "angle": 0
    }, {
      "x": -82.068,
      "y": -12.146,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": 288.201,
      "y": 367.854,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": 118.201,
      "y": 527.854,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -34.299,
      "y": 422.854,
      "width": 205,
      "height": 10,
      "angle": 0
    }, {
      "x": 183.201,
      "y": 205.354,
      "width": 205,
      "height": 10,
      "angle": 90
    }, {
      "x": -146.799,
      "y": 257.854,
      "width": 100,
      "height": 10,
      "angle": 90
    }],
    "targets": [{
      "x": -191.799,
      "y": 467.854,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": -87.068,
      "y": 47.854,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 228.201,
      "y": 47.854,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": []
    }],
    "bullets": [{
      "basic": {
        "x": -191.799,
        "y": 152.854,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 122.932,
        "y": 47.854,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 17.932,
        "y": 362.854,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 17.932,
        "y": 257.854,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": ""
      }
    }]
  },
  "14": {
    "fillNodes": [{
      "x": -90.937,
      "y": 17.549,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -299.932,
      "y": 19.144,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -301.527,
      "y": 445.111,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 15.953,
      "y": 445.111,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 14.358,
      "y": 548.811,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 134.011,
      "y": 550.406,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 135.606,
      "y": 445.111,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 344.601,
      "y": 446.706,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 343.006,
      "y": 323.862,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 239.306,
      "y": 325.457,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 239.306,
      "y": 236.116,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 344.601,
      "y": 234.521,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 346.196,
      "y": 11.168,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 224.947,
      "y": 9.573,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 224.947,
      "y": 114.868,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 28.715,
      "y": 118.059,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 28.715,
      "y": -82.959,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -87.748,
      "y": -84.554,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -89.799,
      "y": -37.566,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -34.799,
      "y": -94.894,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": 15.201,
      "y": 492.434,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 70.201,
      "y": 549.934,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": 135.201,
      "y": 497.434,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 235.201,
      "y": 444.934,
      "width": 210,
      "height": 10,
      "angle": 0
    }, {
      "x": 345.201,
      "y": 389.934,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": 292.701,
      "y": 324.934,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 240.201,
      "y": 279.934,
      "width": 100,
      "height": 10,
      "angle": 90
    }, {
      "x": 287.701,
      "y": 234.934,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 290.201,
      "y": 9.934,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": 225.201,
      "y": 62.434,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 127.701,
      "y": 114.934,
      "width": 205,
      "height": 10,
      "angle": 0
    }, {
      "x": 30.201,
      "y": 9.934,
      "width": 220,
      "height": 10,
      "angle": 90
    }, {
      "x": 345.201,
      "y": 127.434,
      "width": 225,
      "height": 10,
      "angle": 90
    }, {
      "x": -189.799,
      "y": 9.934,
      "width": 210,
      "height": 10,
      "angle": 0
    }, {
      "x": -299.799,
      "y": 222.434,
      "width": 435,
      "height": 10,
      "angle": 90
    }, {
      "x": -142.299,
      "y": 444.934,
      "width": 325,
      "height": 10,
      "angle": 0
    }],
    "targets": [{
      "x": 75.201,
      "y": 489.934,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 285.201,
      "y": 69.934,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": []
    }],
    "bullets": [{
      "basic": {
        "x": -29.799,
        "y": -34.894,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": -239.799,
        "y": 384.934,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": -82.299,
        "y": 279.934,
        "width": 205,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": -134.799,
        "y": 177.434,
        "width": 100,
        "height": 105,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": ""
      }
    }]
  },
  "15": {
    "fillNodes": [{
      "x": -20.613,
      "y": 95.894,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -23.302,
      "y": 411.358,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -111.13,
      "y": 411.358,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -112.026,
      "y": 303.813,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -335.181,
      "y": 305.605,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -335.181,
      "y": 424.8,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -232.118,
      "y": 423.008,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -231.222,
      "y": 532.345,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 205.229,
      "y": 531.449,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 203.437,
      "y": 319.945,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 308.293,
      "y": 320.841,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 309.189,
      "y": 199.854,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 201.644,
      "y": 197.165,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 201.644,
      "y": 94.177,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -335.69,
      "y": 365.146,
      "width": 110,
      "height": 10,
      "angle": 90
    }, {
      "x": -283.19,
      "y": 425.146,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -65.69,
      "y": 410.146,
      "width": 100,
      "height": 10,
      "angle": 0
    }, {
      "x": -110.69,
      "y": 362.646,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -223.19,
      "y": 305.146,
      "width": 235,
      "height": 10,
      "angle": 0
    }, {
      "x": 251.81,
      "y": 320.146,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 256.81,
      "y": 200.146,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 204.31,
      "y": 152.646,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 96.81,
      "y": 95.146,
      "width": 225,
      "height": 10,
      "angle": 0
    }, {
      "x": -20.69,
      "y": 252.646,
      "width": 325,
      "height": 10,
      "angle": 90
    }, {
      "x": 309.31,
      "y": 265.146,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": -230.69,
      "y": 472.646,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 204.31,
      "y": 425.146,
      "width": 220,
      "height": 10,
      "angle": 90
    }, {
      "x": -18.19,
      "y": 530.146,
      "width": 435,
      "height": 10,
      "angle": 0
    }],
    "targets": [{
      "x": -275.69,
      "y": 365.146,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 249.31,
      "y": 260.146,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": [{
        "x": 144.31,
        "y": 417.646,
        "width": 105,
        "height": 10,
        "angle": 90
      }]
    }],
    "bullets": [{
      "basic": {
        "x": 39.31,
        "y": 155.146,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 144.31,
        "y": 155.146,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 144.31,
        "y": 470.146,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay01"
      }
    }]
  },
  "16": {
    "fillNodes": [{
      "x": -73.888,
      "y": 18.808,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -76.575,
      "y": 120.907,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -178.674,
      "y": 123.594,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -184.048,
      "y": 331.823,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -284.804,
      "y": 331.823,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -284.804,
      "y": 451.386,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -180.018,
      "y": 452.729,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -182.705,
      "y": 659.614,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -59.111,
      "y": 663.644,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -60.454,
      "y": 558.858,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 44.332,
      "y": 557.515,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 47.019,
      "y": 437.952,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -60.454,
      "y": 433.922,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -60.454,
      "y": 347.944,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 138.371,
      "y": 346.601,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 138.371,
      "y": 451.387,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 252.561,
      "y": 448.7,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 256.591,
      "y": 227.037,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 149.118,
      "y": 227.037,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 149.118,
      "y": 134.342,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 255.247,
      "y": 135.685,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 255.247,
      "y": -87.321,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 30.898,
      "y": -87.321,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 30.898,
      "y": 16.122,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -285.496,
      "y": 391.439,
      "width": 110,
      "height": 10,
      "angle": 90
    }, {
      "x": -232.996,
      "y": 331.439,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -232.996,
      "y": 451.439,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -180.496,
      "y": 551.439,
      "width": 210,
      "height": 10,
      "angle": 90
    }, {
      "x": -125.496,
      "y": 661.439,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -60.496,
      "y": 608.939,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": -12.996,
      "y": 556.439,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": -7.996,
      "y": 436.439,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -60.496,
      "y": 391.439,
      "width": 100,
      "height": 10,
      "angle": 90
    }, {
      "x": 134.504,
      "y": 393.939,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 189.504,
      "y": 451.439,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": 202.004,
      "y": 226.439,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 149.504,
      "y": 181.439,
      "width": 100,
      "height": 10,
      "angle": 90
    }, {
      "x": 29.504,
      "y": -36.061,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": -17.996,
      "y": 16.439,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": -75.496,
      "y": 68.939,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": -122.996,
      "y": 121.439,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": -180.496,
      "y": 226.439,
      "width": 220,
      "height": 10,
      "angle": 90
    }, {
      "x": 197.004,
      "y": 136.439,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 254.504,
      "y": 28.939,
      "width": 225,
      "height": 10,
      "angle": 90
    }, {
      "x": 147.004,
      "y": -88.561,
      "width": 225,
      "height": 10,
      "angle": 0
    }, {
      "x": 254.504,
      "y": 343.939,
      "width": 225,
      "height": 10,
      "angle": 90
    }, {
      "x": 37.004,
      "y": 346.439,
      "width": 205,
      "height": 10,
      "angle": 0
    }, {
      "x": 44.504,
      "y": 501.439,
      "width": 120,
      "height": 10,
      "angle": 90
    }],
    "targets": [{
      "x": -225.496,
      "y": 391.439,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": -15.496,
      "y": 496.439,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 194.504,
      "y": 391.439,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": [{
        "x": -120.496,
        "y": 286.439,
        "width": 210,
        "height": 10,
        "angle": 90
      }]
    }],
    "bullets": [{
      "basic": {
        "x": -120.496,
        "y": 601.439,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 89.504,
        "y": -28.561,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 89.504,
        "y": 76.439,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": -120.496,
        "y": 181.439,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay01"
      }
    }]
  },
  "17": {
    "fillNodes": [{
      "x": -148.358,
      "y": -19.662,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -153.154,
      "y": 142.211,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -258.671,
      "y": 141.012,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -258.671,
      "y": 248.927,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -360.591,
      "y": 245.33,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -360.591,
      "y": 370.094,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -261.316,
      "y": 364.728,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -257.291,
      "y": 473.393,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -33.252,
      "y": 472.051,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -30.569,
      "y": 367.41,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 280.67,
      "y": 367.41,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 284.695,
      "y": 209.107,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 387.994,
      "y": 209.107,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 390.677,
      "y": 87.026,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 282.012,
      "y": 87.026,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 282.012,
      "y": 32.023,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 176.03,
      "y": 32.023,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 178.713,
      "y": -22.98,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -361.292,
      "y": 307.346,
      "width": 110,
      "height": 10,
      "angle": 90
    }, {
      "x": -308.792,
      "y": 367.346,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -308.792,
      "y": 247.346,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -256.292,
      "y": 199.846,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -203.792,
      "y": 142.346,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -151.292,
      "y": 64.846,
      "width": 165,
      "height": 10,
      "angle": 90
    }, {
      "x": -256.292,
      "y": 414.846,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -31.292,
      "y": 419.846,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 283.708,
      "y": 287.346,
      "width": 170,
      "height": 10,
      "angle": 90
    }, {
      "x": 331.208,
      "y": 207.346,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 336.208,
      "y": 87.346,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 283.708,
      "y": 64.846,
      "width": 55,
      "height": 10,
      "angle": 90
    }, {
      "x": 178.708,
      "y": 9.846,
      "width": 55,
      "height": 10,
      "angle": 90
    }, {
      "x": 231.208,
      "y": 32.346,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 388.708,
      "y": 152.346,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": 121.208,
      "y": 367.346,
      "width": 315,
      "height": 10,
      "angle": 0
    }, {
      "x": 13.708,
      "y": -22.654,
      "width": 340,
      "height": 10,
      "angle": 0
    }, {
      "x": -148.792,
      "y": 472.346,
      "width": 225,
      "height": 10,
      "angle": 0
    }],
    "targets": [{
      "x": -301.292,
      "y": 307.346,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": [{
        "x": 66.208,
        "y": 307.346,
        "width": 105,
        "height": 10,
        "angle": 0
      }, {
        "x": 13.708,
        "y": 254.846,
        "width": 105,
        "height": 10,
        "angle": 90
      }, {
        "x": -38.792,
        "y": 202.346,
        "width": 105,
        "height": 10,
        "angle": 0
      }]
    }],
    "bullets": [{
      "basic": {
        "x": -196.292,
        "y": 202.346,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": -91.292,
        "y": 202.346,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay01"
      }
    }, {
      "basic": {
        "x": 149.958,
        "y": 226.096,
        "width": 47.5,
        "height": 47.5,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay01"
      }
    }]
  },
  "18": {
    "fillNodes": [{
      "x": -173.315,
      "y": -8.753,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -173.315,
      "y": 110.292,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -70.026,
      "y": 106.791,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -70.026,
      "y": 199.576,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -385.145,
      "y": 201.327,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -386.896,
      "y": 322.123,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -280.106,
      "y": 318.622,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -283.607,
      "y": 423.661,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -161.061,
      "y": 425.412,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -162.812,
      "y": 322.123,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -66.526,
      "y": 318.622,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -66.526,
      "y": 532.203,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 47.267,
      "y": 532.203,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 49.018,
      "y": 428.914,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 155.808,
      "y": 425.413,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 155.808,
      "y": 217.084,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 364.137,
      "y": 215.333,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 365.888,
      "y": 92.787,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 154.058,
      "y": 92.787,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 154.058,
      "y": -10.502,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -175.066,
      "y": -10.502,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -385.938,
      "y": 263.611,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": -333.438,
      "y": 318.611,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -228.438,
      "y": 198.611,
      "width": 325,
      "height": 10,
      "angle": 0
    }, {
      "x": -280.938,
      "y": 366.111,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -225.938,
      "y": 423.611,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -15.938,
      "y": 528.611,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": 49.062,
      "y": 476.111,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 96.562,
      "y": 423.611,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 154.062,
      "y": 318.611,
      "width": 220,
      "height": 10,
      "angle": 90
    }, {
      "x": 254.062,
      "y": 213.611,
      "width": 210,
      "height": 10,
      "angle": 0
    }, {
      "x": 259.062,
      "y": 93.611,
      "width": 220,
      "height": 10,
      "angle": 0
    }, {
      "x": 154.062,
      "y": 46.111,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -175.938,
      "y": 43.611,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": -123.438,
      "y": 108.611,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -70.938,
      "y": 153.611,
      "width": 100,
      "height": 10,
      "angle": 90
    }, {
      "x": -5.938,
      "y": -11.389,
      "width": 330,
      "height": 10,
      "angle": 0
    }, {
      "x": 364.062,
      "y": 158.611,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": -115.938,
      "y": 318.611,
      "width": 100,
      "height": 10,
      "angle": 0
    }, {
      "x": -70.938,
      "y": 418.611,
      "width": 210,
      "height": 10,
      "angle": 90
    }, {
      "x": -160.938,
      "y": 371.111,
      "width": 115,
      "height": 10,
      "angle": 90
    }],
    "targets": [{
      "x": -220.938,
      "y": 363.611,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": -10.938,
      "y": 468.611,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 304.062,
      "y": 153.611,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": [{
        "x": 146.562,
        "y": 153.611,
        "width": 105,
        "height": 10,
        "angle": 0
      }, {
        "x": 94.062,
        "y": 101.111,
        "width": 105,
        "height": 10,
        "angle": 90
      }]
    }, {
      "name": "pathWay02",
      "children": [{
        "x": -10.938,
        "y": 311.111,
        "width": 105,
        "height": 10,
        "angle": 90
      }, {
        "x": -63.438,
        "y": 258.611,
        "width": 105,
        "height": 10,
        "angle": 0
      }]
    }],
    "bullets": [{
      "basic": {
        "x": -115.938,
        "y": 48.611,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": -10.938,
        "y": 153.611,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 94.062,
        "y": 363.611,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 199.062,
        "y": 153.611,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay01"
      }
    }, {
      "basic": {
        "x": -10.938,
        "y": 363.611,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay02"
      }
    }]
  },
  "19": {
    "fillNodes": [{
      "x": -152.523,
      "y": -16.947,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -152.523,
      "y": 297.986,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -245.732,
      "y": 297.986,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -245.732,
      "y": 193.479,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -362.949,
      "y": 192.067,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -362.949,
      "y": 418.028,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -46.604,
      "y": 418.028,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -48.016,
      "y": 523.947,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 70.613,
      "y": 525.359,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 73.438,
      "y": 419.44,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 388.371,
      "y": 419.44,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 388.371,
      "y": 297.986,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 176.533,
      "y": 299.398,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 176.533,
      "y": 207.601,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 279.628,
      "y": 210.426,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 282.453,
      "y": 87.56,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 176.534,
      "y": 88.972,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 175.122,
      "y": -16.947,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 56.493,
      "y": -19.772,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 55.081,
      "y": 87.559,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -33.891,
      "y": 86.147,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -33.891,
      "y": -18.36,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -362.312,
      "y": 304.684,
      "width": 215,
      "height": 10,
      "angle": 90
    }, {
      "x": -204.812,
      "y": 417.184,
      "width": 325,
      "height": 10,
      "angle": 0
    }, {
      "x": -47.312,
      "y": 464.684,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 7.688,
      "y": 522.184,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": 72.688,
      "y": 469.684,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 225.188,
      "y": 417.184,
      "width": 315,
      "height": 10,
      "angle": 0
    }, {
      "x": 387.688,
      "y": 362.184,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": 282.688,
      "y": 297.184,
      "width": 220,
      "height": 10,
      "angle": 0
    }, {
      "x": 177.688,
      "y": 252.184,
      "width": 100,
      "height": 10,
      "angle": 90
    }, {
      "x": 225.188,
      "y": 207.184,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 230.188,
      "y": 87.184,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 177.688,
      "y": 39.684,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 122.688,
      "y": -17.816,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": 57.688,
      "y": 34.684,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 12.688,
      "y": 87.184,
      "width": 100,
      "height": 10,
      "angle": 0
    }, {
      "x": -197.312,
      "y": 297.184,
      "width": 100,
      "height": 10,
      "angle": 0
    }, {
      "x": -242.312,
      "y": 249.684,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -302.312,
      "y": 192.184,
      "width": 130,
      "height": 10,
      "angle": 0
    }, {
      "x": -32.312,
      "y": 39.684,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -87.312,
      "y": -17.816,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -152.312,
      "y": 139.684,
      "width": 325,
      "height": 10,
      "angle": 90
    }, {
      "x": 282.688,
      "y": 152.184,
      "width": 120,
      "height": 10,
      "angle": 90
    }],
    "targets": [{
      "x": -302.312,
      "y": 252.184,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 12.688,
      "y": 462.184,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 222.688,
      "y": 147.184,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": [{
        "x": 12.688,
        "y": 357.184,
        "width": 420,
        "height": 10,
        "angle": 0
      }]
    }, {
      "name": "pathWay02",
      "children": []
    }],
    "bullets": [{
      "basic": {
        "x": -302.312,
        "y": 357.184,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 327.688,
        "y": 357.184,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": -92.312,
        "y": 42.184,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": -197.312,
        "y": 357.184,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay01"
      }
    }, {
      "basic": {
        "x": 12.688,
        "y": 252.184,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": ""
      }
    }]
  },
  "20": {
    "fillNodes": [{
      "x": -45.85,
      "y": -112.716,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -45.85,
      "y": 205.161,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -151.055,
      "y": 207.423,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -151.055,
      "y": 312.628,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -255.129,
      "y": 312.628,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -255.129,
      "y": 431.408,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -148.793,
      "y": 433.67,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -148.793,
      "y": 536.612,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -31.144,
      "y": 536.612,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -28.882,
      "y": 434.801,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 75.192,
      "y": 432.539,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 74.061,
      "y": 328.465,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 180.397,
      "y": 326.203,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 179.266,
      "y": 119.187,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 282.208,
      "y": 115.793,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 285.602,
      "y": -1.856,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 178.135,
      "y": -7.512,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 180.397,
      "y": -107.061,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -255.556,
      "y": 371.284,
      "width": 110,
      "height": 10,
      "angle": 90
    }, {
      "x": -93.056,
      "y": 206.284,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": -150.556,
      "y": 258.784,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": -203.056,
      "y": 431.284,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -203.056,
      "y": 311.284,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -150.556,
      "y": 478.784,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -95.556,
      "y": 536.284,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -30.556,
      "y": 483.784,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 16.944,
      "y": 431.284,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 74.444,
      "y": 378.784,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 121.944,
      "y": 326.284,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 226.944,
      "y": 116.284,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 231.944,
      "y": -3.716,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 179.444,
      "y": -51.216,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 71.944,
      "y": -108.716,
      "width": 225,
      "height": 10,
      "angle": 0
    }, {
      "x": -45.556,
      "y": 48.784,
      "width": 325,
      "height": 10,
      "angle": 90
    }, {
      "x": 284.444,
      "y": 61.284,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": 179.444,
      "y": 221.284,
      "width": 220,
      "height": 10,
      "angle": 90
    }],
    "targets": [{
      "x": -90.556,
      "y": 476.284,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 224.444,
      "y": 56.284,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": [{
        "x": 119.444,
        "y": 213.784,
        "width": 105,
        "height": 10,
        "angle": 90
      }]
    }, {
      "name": "pathWay02",
      "children": []
    }],
    "bullets": [{
      "basic": {
        "x": 14.444,
        "y": -48.716,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 119.444,
        "y": 56.284,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 119.444,
        "y": 266.284,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay01"
      }
    }]
  },
  "21": {
    "fillNodes": [{
      "x": -128.307,
      "y": -54.391,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -129.702,
      "y": 153.411,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -232.906,
      "y": 154.806,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -235.695,
      "y": 276.14,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -131.097,
      "y": 273.351,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -129.702,
      "y": 365.398,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -232.906,
      "y": 366.793,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -235.695,
      "y": 485.338,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -23.709,
      "y": 485.338,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -25.104,
      "y": 589.936,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 93.441,
      "y": 588.541,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 96.23,
      "y": 483.943,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 198.039,
      "y": 483.943,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 202.223,
      "y": 362.609,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 93.441,
      "y": 359.82,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 97.625,
      "y": 171.543,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 308.217,
      "y": 170.148,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 308.217,
      "y": 46.024,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -8.368,
      "y": 48.813,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -9.763,
      "y": -55.785,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -233.664,
      "y": 424.043,
      "width": 110,
      "height": 10,
      "angle": 90
    }, {
      "x": -181.164,
      "y": 364.043,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -128.664,
      "y": 484.043,
      "width": 220,
      "height": 10,
      "angle": 0
    }, {
      "x": -23.664,
      "y": 531.543,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 31.336,
      "y": 589.043,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": 96.336,
      "y": 536.543,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 143.836,
      "y": 484.043,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 148.836,
      "y": 364.043,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 96.336,
      "y": 266.543,
      "width": 205,
      "height": 10,
      "angle": 90
    }, {
      "x": 196.336,
      "y": 169.043,
      "width": 210,
      "height": 10,
      "angle": 0
    }, {
      "x": 306.336,
      "y": 114.043,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": -8.664,
      "y": 1.543,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -63.664,
      "y": -55.957,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -128.664,
      "y": 49.043,
      "width": 220,
      "height": 10,
      "angle": 90
    }, {
      "x": -176.164,
      "y": 154.043,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": -233.664,
      "y": 209.043,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": -181.164,
      "y": 274.043,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -128.664,
      "y": 319.043,
      "width": 100,
      "height": 10,
      "angle": 90
    }, {
      "x": 148.836,
      "y": 49.043,
      "width": 325,
      "height": 10,
      "angle": 0
    }, {
      "x": 201.336,
      "y": 429.043,
      "width": 120,
      "height": 10,
      "angle": 90
    }],
    "targets": [{
      "x": -173.664,
      "y": 214.043,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 141.336,
      "y": 424.043,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": [{
        "x": 36.336,
        "y": 266.543,
        "width": 315,
        "height": 10,
        "angle": 90
      }, {
        "x": -68.664,
        "y": 266.543,
        "width": 315,
        "height": 10,
        "angle": 90
      }, {
        "x": -16.164,
        "y": 109.043,
        "width": 105,
        "height": 10,
        "angle": 0
      }, {
        "x": -16.164,
        "y": 424.043,
        "width": 105,
        "height": 10,
        "angle": 0
      }]
    }, {
      "name": "pathWay02",
      "children": []
    }],
    "bullets": [{
      "basic": {
        "x": 246.336,
        "y": 109.043,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 141.336,
        "y": 109.043,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 36.336,
        "y": 424.043,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay01"
      }
    }]
  },
  "22": {
    "fillNodes": [{
      "x": -118.583,
      "y": -116.212,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -122.14,
      "y": -10.673,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -224.122,
      "y": -11.859,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -225.308,
      "y": 215.821,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -120.955,
      "y": 211.078,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -120.955,
      "y": 303.573,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -225.308,
      "y": 305.945,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -227.68,
      "y": 528.881,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -104.353,
      "y": 531.253,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -101.981,
      "y": 425.714,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -11.858,
      "y": 424.528,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -13.044,
      "y": 528.881,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 107.911,
      "y": 528.881,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 106.725,
      "y": 424.528,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 316.617,
      "y": 423.342,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 316.617,
      "y": 304.759,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 3.557,
      "y": 303.573,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 1.185,
      "y": 214.636,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 105.538,
      "y": 212.264,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 103.166,
      "y": 2.372,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 209.891,
      "y": 2.372,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 212.263,
      "y": -116.211,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -119.77,
      "y": -118.583,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -223.616,
      "y": 415.765,
      "width": 215,
      "height": 10,
      "angle": 90
    }, {
      "x": -168.616,
      "y": 528.265,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -103.616,
      "y": 475.765,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": -58.616,
      "y": 423.265,
      "width": 100,
      "height": 10,
      "angle": 0
    }, {
      "x": -13.616,
      "y": 470.765,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 41.384,
      "y": 528.265,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": 106.384,
      "y": 475.765,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 206.384,
      "y": 423.265,
      "width": 210,
      "height": 10,
      "angle": 0
    }, {
      "x": 316.384,
      "y": 368.265,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": 1.384,
      "y": 258.265,
      "width": 100,
      "height": 10,
      "angle": 90
    }, {
      "x": 48.884,
      "y": 213.265,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 153.884,
      "y": 3.265,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 211.384,
      "y": -51.735,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": -118.616,
      "y": -64.235,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": -166.116,
      "y": -11.735,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": -223.616,
      "y": 95.765,
      "width": 225,
      "height": 10,
      "angle": 90
    }, {
      "x": -171.116,
      "y": 213.265,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -171.116,
      "y": 303.265,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -118.616,
      "y": 258.265,
      "width": 100,
      "height": 10,
      "angle": 90
    }, {
      "x": 51.384,
      "y": -116.735,
      "width": 330,
      "height": 10,
      "angle": 0
    }, {
      "x": 106.384,
      "y": 108.265,
      "width": 220,
      "height": 10,
      "angle": 90
    }, {
      "x": 158.884,
      "y": 303.265,
      "width": 325,
      "height": 10,
      "angle": 0
    }],
    "targets": [{
      "x": -163.616,
      "y": 468.265,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 46.384,
      "y": 468.265,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": [{
        "x": -58.616,
        "y": 48.265,
        "width": 210,
        "height": 10,
        "angle": 0
      }, {
        "x": -58.616,
        "y": 153.265,
        "width": 420,
        "height": 10,
        "angle": 90
      }]
    }, {
      "name": "pathWay02",
      "children": []
    }],
    "bullets": [{
      "basic": {
        "x": 256.384,
        "y": 363.265,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": -163.616,
        "y": 153.265,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 46.384,
        "y": 46.384,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay01"
      }
    }]
  },
  "23": {
    "fillNodes": [{
      "x": -95.749,
      "y": -72.384,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -96.961,
      "y": 34.268,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -199.977,
      "y": 33.056,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -201.189,
      "y": 154.252,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -98.173,
      "y": 154.252,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -98.173,
      "y": 193.035,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -146.937,
      "y": 191.557,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -147.676,
      "y": 258.792,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -95.957,
      "y": 258.792,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -93.74,
      "y": 362.969,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 22.997,
      "y": 365.186,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 25.952,
      "y": 294.996,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -26.506,
      "y": 297.213,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -26.506,
      "y": 258.793,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 115.352,
      "y": 258.054,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 114.613,
      "y": 309.773,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 181.109,
      "y": 311.251,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 183.326,
      "y": -2.757,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 235.045,
      "y": -4.235,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 235.045,
      "y": -69.253,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -199.745,
      "y": 94.586,
      "width": 110,
      "height": 10,
      "angle": 90
    }, {
      "x": -147.245,
      "y": 34.586,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -94.745,
      "y": -12.914,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 235.255,
      "y": -41.664,
      "width": 67.5,
      "height": 10,
      "angle": 90
    }, {
      "x": 209.005,
      "y": -2.914,
      "width": 62.5,
      "height": 10,
      "angle": 0
    }, {
      "x": 182.755,
      "y": 154.586,
      "width": 325,
      "height": 10,
      "angle": 90
    }, {
      "x": 65.255,
      "y": -70.414,
      "width": 330,
      "height": 10,
      "angle": 0
    }, {
      "x": -147.245,
      "y": 154.586,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": -94.745,
      "y": 173.336,
      "width": 47.5,
      "height": 10,
      "angle": 90
    }, {
      "x": -115.995,
      "y": 192.086,
      "width": 52.5,
      "height": 10,
      "angle": 0
    }, {
      "x": -147.245,
      "y": 220.836,
      "width": 67.5,
      "height": 10,
      "angle": 90
    }, {
      "x": -120.995,
      "y": 259.586,
      "width": 62.5,
      "height": 10,
      "angle": 0
    }, {
      "x": -94.745,
      "y": 307.086,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -39.745,
      "y": 364.586,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": 25.255,
      "y": 335.836,
      "width": 67.5,
      "height": 10,
      "angle": 90
    }, {
      "x": -0.995,
      "y": 297.086,
      "width": 62.5,
      "height": 10,
      "angle": 0
    }, {
      "x": -27.245,
      "y": 278.336,
      "width": 47.5,
      "height": 10,
      "angle": 90
    }, {
      "x": 44.005,
      "y": 259.586,
      "width": 152.5,
      "height": 10,
      "angle": 0
    }, {
      "x": 115.255,
      "y": 280.836,
      "width": 52.5,
      "height": 10,
      "angle": 90
    }, {
      "x": 144.005,
      "y": 312.086,
      "width": 67.5,
      "height": 10,
      "angle": 0
    }],
    "targets": [{
      "x": -139.745,
      "y": 94.586,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 201.505,
      "y": -36.664,
      "width": 47.5,
      "height": 47.5,
      "angle": 0
    }, {
      "x": 149.005,
      "y": 278.336,
      "width": 47.5,
      "height": 47.5,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": []
    }],
    "bullets": [{
      "basic": {
        "x": 70.255,
        "y": 199.586,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 70.255,
        "y": 15.836,
        "width": 100,
        "height": 47.5,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 96.505,
        "y": 68.336,
        "width": 47.5,
        "height": 152.5,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 149.005,
        "y": 225.836,
        "width": 47.5,
        "height": 47.5,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 149.005,
        "y": 173.336,
        "width": 47.5,
        "height": 47.5,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }]
  },
  "24": {
    "fillNodes": [{
      "x": -139.743,
      "y": -2.598,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -139.743,
      "y": 312.888,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -296.972,
      "y": 311.86,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -299.027,
      "y": 380.712,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -246.617,
      "y": 381.74,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -247.645,
      "y": 434.15,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 14.404,
      "y": 433.122,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 17.487,
      "y": 485.532,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 136.694,
      "y": 485.532,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 136.694,
      "y": 433.122,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 190.131,
      "y": 433.122,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 190.131,
      "y": 365.298,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 136.694,
      "y": 364.27,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 138.749,
      "y": 275.893,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 241.513,
      "y": 276.921,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 241.513,
      "y": 156.687,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 135.666,
      "y": 154.632,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 136.694,
      "y": 103.25,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 85.312,
      "y": 103.25,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 85.312,
      "y": -3.625,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -297.079,
      "y": 348.54,
      "width": 57.5,
      "height": 10,
      "angle": 90
    }, {
      "x": -218.329,
      "y": 314.79,
      "width": 167.5,
      "height": 10,
      "angle": 0
    }, {
      "x": -139.579,
      "y": 162.29,
      "width": 315,
      "height": 10,
      "angle": 90
    }, {
      "x": -32.079,
      "y": -0.21,
      "width": 225,
      "height": 10,
      "angle": 0
    }, {
      "x": 85.421,
      "y": 52.29,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": 106.671,
      "y": 104.79,
      "width": 52.5,
      "height": 10,
      "angle": 0
    }, {
      "x": 137.921,
      "y": 131.04,
      "width": 62.5,
      "height": 10,
      "angle": 90
    }, {
      "x": 185.421,
      "y": 157.29,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 242.921,
      "y": 212.29,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": 190.421,
      "y": 277.29,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 137.921,
      "y": 322.29,
      "width": 100,
      "height": 10,
      "angle": 90
    }, {
      "x": 159.171,
      "y": 367.29,
      "width": 52.5,
      "height": 10,
      "angle": 0
    }, {
      "x": 190.421,
      "y": 396.04,
      "width": 67.5,
      "height": 10,
      "angle": 90
    }, {
      "x": 164.171,
      "y": 434.79,
      "width": 62.5,
      "height": 10,
      "angle": 0
    }, {
      "x": 137.921,
      "y": 456.04,
      "width": 52.5,
      "height": 10,
      "angle": 90
    }, {
      "x": 82.921,
      "y": 487.29,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": 17.921,
      "y": 461.04,
      "width": 62.5,
      "height": 10,
      "angle": 90
    }, {
      "x": -113.329,
      "y": 434.79,
      "width": 272.5,
      "height": 10,
      "angle": 0
    }, {
      "x": -270.829,
      "y": 382.29,
      "width": 62.5,
      "height": 10,
      "angle": 0
    }, {
      "x": -244.579,
      "y": 403.54,
      "width": 52.5,
      "height": 10,
      "angle": 90
    }],
    "targets": [{
      "x": 182.921,
      "y": 217.29,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": 156.921,
      "y": 401.29,
      "width": 47.5,
      "height": 47.5,
      "angle": 0
    }, {
      "x": -53.329,
      "y": 296.04,
      "width": 47.5,
      "height": 47.5,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": []
    }],
    "bullets": [{
      "basic": {
        "x": 77.921,
        "y": 164.79,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": -27.079,
        "y": 164.79,
        "width": 100,
        "height": 205,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": -0.829,
        "y": 293.54,
        "width": 47.5,
        "height": 52.5,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 51.421,
        "y": 453.79,
        "width": 47.5,
        "height": 47.5,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": 104.421,
        "y": 453.79,
        "width": 47.5,
        "height": 47.5,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }]
  },
  "25": {
    "fillNodes": [{
      "x": -179.903,
      "y": -34.363,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -179.903,
      "y": 69.663,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -285.874,
      "y": 70.635,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -286.846,
      "y": 186.328,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -183.792,
      "y": 187.3,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -180.875,
      "y": 279.66,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -286.846,
      "y": 279.66,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -284.902,
      "y": 400.214,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 29.122,
      "y": 398.27,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 28.15,
      "y": 505.213,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 148.704,
      "y": 505.213,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 150.649,
      "y": 293.272,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 253.703,
      "y": 295.216,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 255.647,
      "y": 174.662,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 148.704,
      "y": 174.662,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": 150.648,
      "y": 68.691,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -61.293,
      "y": 67.719,
      "width": 0,
      "height": 0,
      "angle": 0
    }, {
      "x": -60.321,
      "y": -35.335,
      "width": 0,
      "height": 0,
      "angle": 0
    }],
    "walls": [{
      "x": -285.436,
      "y": 130.242,
      "width": 110,
      "height": 10,
      "angle": 90
    }, {
      "x": -232.936,
      "y": 190.242,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 197.064,
      "y": 295.242,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": 254.564,
      "y": 240.242,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": 202.064,
      "y": 175.242,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 149.564,
      "y": 127.742,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -60.436,
      "y": 22.742,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": -115.436,
      "y": -34.758,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": -180.436,
      "y": 17.742,
      "width": 115,
      "height": 10,
      "angle": 90
    }, {
      "x": -232.936,
      "y": 70.242,
      "width": 115,
      "height": 10,
      "angle": 0
    }, {
      "x": 44.564,
      "y": 70.242,
      "width": 220,
      "height": 10,
      "angle": 0
    }, {
      "x": -180.436,
      "y": 235.242,
      "width": 100,
      "height": 10,
      "angle": 90
    }, {
      "x": 29.564,
      "y": 447.742,
      "width": 105,
      "height": 10,
      "angle": 90
    }, {
      "x": 84.564,
      "y": 505.242,
      "width": 120,
      "height": 10,
      "angle": 0
    }, {
      "x": 149.564,
      "y": 400.242,
      "width": 220,
      "height": 10,
      "angle": 90
    }, {
      "x": -227.936,
      "y": 280.242,
      "width": 105,
      "height": 10,
      "angle": 0
    }, {
      "x": -285.436,
      "y": 335.242,
      "width": 120,
      "height": 10,
      "angle": 90
    }, {
      "x": -127.936,
      "y": 400.242,
      "width": 325,
      "height": 10,
      "angle": 0
    }],
    "targets": [{
      "x": -120.436,
      "y": 25.242,
      "width": 100,
      "height": 100,
      "angle": 0
    }, {
      "x": -225.436,
      "y": 340.242,
      "width": 100,
      "height": 100,
      "angle": 0
    }],
    "pathWaysNode": [{
      "name": "pathWay01",
      "children": [{
        "x": 37.064,
        "y": 235.242,
        "width": 315,
        "height": 10,
        "angle": 0
      }, {
        "x": -15.436,
        "y": 235.242,
        "width": 210,
        "height": 10,
        "angle": 90
      }]
    }],
    "bullets": [{
      "basic": {
        "x": -225.436,
        "y": 130.242,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }, {
      "basic": {
        "x": -15.436,
        "y": 235.242,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 2,
        "pathWaysNodeName": "pathWay"
      }
    }, {
      "basic": {
        "x": 89.564,
        "y": 445.242,
        "width": 100,
        "height": 100,
        "angle": 0
      },
      "mgr": {
        "bulletType": 1,
        "pathWaysNodeName": ""
      }
    }]
  }
};
module.exports = levelSceneConfig;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//------QC-SOURCE-SPLIT------
