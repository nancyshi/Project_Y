{"version":3,"sources":["assets/scripts/components/redPointMgr.js"],"names":["cc","Class","Component","properties","redPointPrefab","Prefab","redPoint","offset","v2","redPointShowCondition","get","_redPointShowCondition","set","value","setupRedPoint","start","log","node","name","showRedPoint","hideRedPoint","oneRedPoint","instantiate","getNodeRightHeadPoint","givenNode","x","anchorX","width","y","anchorY","height","targetX","targetY","addChild","active"],"mappings":"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","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n        redPointPrefab: cc.Prefab,\n        redPoint: null,\n        offset: cc.v2(5,10),\n        redPointShowCondition: {\n            get() {\n                return this._redPointShowCondition\n            },\n            set(value) {\n                //init setup\n                this._redPointShowCondition = value\n                this.setupRedPoint()\n            }\n        }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    setupRedPoint() {\n        if (this.redPointShowCondition == null || typeof this.redPointShowCondition !== \"function\") {\n            cc.log(\"no condition of redpoint, or condition is not a function from node \" + this.node.name)\n            return\n        }\n\n        if (this.redPointShowCondition() == true) {\n            this.showRedPoint()\n        }\n        else {\n            this.hideRedPoint()\n        }\n    },\n\n    showRedPoint() {\n        if (this.redPoint == null) {\n            var oneRedPoint = cc.instantiate(this.redPointPrefab)\n            var getNodeRightHeadPoint = function(givenNode) {\n                var x = (1 - givenNode.anchorX) * givenNode.width\n                var y = (1 - givenNode.anchorY) * givenNode.height\n                return cc.v2(x,y)\n            }\n            var targetX = getNodeRightHeadPoint(this.node).x + this.offset.x\n            var targetY = getNodeRightHeadPoint(this.node).y + this.offset.y\n            oneRedPoint.x = targetX\n            oneRedPoint.y = targetY\n            this.redPoint = oneRedPoint\n            this.node.addChild(oneRedPoint)\n        }\n        \n        this.redPoint.active = true\n    },\n\n    hideRedPoint() {\n        if (this.redPoint == null) {\n            var oneRedPoint = cc.instantiate(this.redPointPrefab)\n            var getNodeRightHeadPoint = function(givenNode) {\n                var x = (1 - givenNode.anchorX) * givenNode.width\n                var y = (1 - givenNode.anchorY) * givenNode.height\n                return cc.v2(x,y)\n            }\n            var targetX = getNodeRightHeadPoint(this.node).x + this.offset.x\n            var targetY = getNodeRightHeadPoint(this.node).y + this.offset.y\n            oneRedPoint.x = targetX\n            oneRedPoint.y = targetY\n            this.redPoint = oneRedPoint\n            this.node.addChild(oneRedPoint)\n        }\n\n        this.redPoint.active = false\n    }\n\n    // update (dt) {},\n});\n"]}