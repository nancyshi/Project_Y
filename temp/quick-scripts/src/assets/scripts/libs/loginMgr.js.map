{"version":3,"sources":["assets/scripts/libs/loginMgr.js"],"names":["LoginMgr","cc","Class","properties","playerId","get","_playerId","set","value","onPlayerIdSet","LoginType","ACCOUNT","WE_CHAT_GAME","DEVICE_ID","login","loginType","_setPlayerIdFromServer","updatePlayerDataFromServer","dataMgr","require","_genarateUUID","time","sys","now","uuid","replace","c","r","Math","random","v","toString","networkMgr","msgObj","makeMessageObj","message","codeType","asyncFlag","self","wx","success","res","code","successCallBack","xhr","response","responseText","JSON","parse","type","sendMessageByMsgObj","deviceId","localStorage","getItem","setItem","log","sharedLoginMgr","module","exports"],"mappings":"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","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\n\nvar LoginMgr = cc.Class({\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n        playerId: {\n            get() {\n                return this._playerId\n            },\n            set(value) {\n                this._playerId = value\n                if (value) {\n                    this.onPlayerIdSet()\n                }\n            }\n        },\n        LoginType: {\n            get() {\n                return {\n                    ACCOUNT: 1,\n                    WE_CHAT_GAME: 2,\n                    DEVICE_ID: 3\n                }\n            }\n        }\n        \n    },\n\n    login(loginType) {\n        this._setPlayerIdFromServer(loginType)\n    },\n\n    onPlayerIdSet() {\n        this.updatePlayerDataFromServer(this.playerId)\n    },\n\n    updatePlayerDataFromServer(playerId) {\n        var dataMgr = require(\"dataMgr\")\n        dataMgr.updatePlayerDataFromServer(playerId)\n    },\n\n    _genarateUUID() {\n        var time = cc.sys.now()\n        var uuid =  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0,\n                v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n        uuid = uuid + time.toString()\n        return uuid\n    },\n\n    _setPlayerIdFromServer(loginType) {\n\n        var networkMgr = require(\"networkMgr\")\n        var msgObj = networkMgr.makeMessageObj(\"loginModule\",\"loginMessageType\")\n        msgObj.message.codeType = loginType\n        var asyncFlag = false\n        switch(loginType) {\n            case this.LoginType.ACCOUNT:\n                break\n            case this.LoginType.WE_CHAT_GAME:\n                asyncFlag = true\n                var self = this\n                wx.login({\n                    success: function(res) {\n                        var code = res.code\n                        if (code != null) {\n                            msgObj.message.code = code\n                            msgObj.successCallBack = function(xhr) {\n                                var response = xhr.responseText\n                                response = JSON.parse(response)\n                                if (response.type == \"login_success\") {\n                                    var playerId = response.playerId\n                                    self.playerId = playerId\n                                }\n                                else if (response.type == \"login_fail\") {\n                                            \n                                }\n                            }\n                            networkMgr.sendMessageByMsgObj(msgObj)\n                        }\n                    }\n                })\n                break\n            case this.LoginType.DEVICE_ID:\n                var deviceId = cc.sys.localStorage.getItem(\"deviceId\")\n                if (deviceId == null) {\n                    var uuid = this._genarateUUID()\n                    cc.sys.localStorage.setItem(\"deviceId\",uuid)\n                    deviceId = uuid\n                }\n                msgObj.message.code = deviceId\n                break\n            default:\n                cc.log(\"Login type erro: now it's \" + loginType)\n        }\n        if (asyncFlag == true) {\n            return\n        }\n        var self = this\n        msgObj.successCallBack = function(xhr) {\n            var response = xhr.responseText\n            response = JSON.parse(response)\n            if (response.type == \"login_success\") {\n                var playerId = response.playerId\n                self.playerId = playerId\n            }\n            else if (response.type == \"login_fail\") {\n                        \n            }\n        }\n        networkMgr.sendMessageByMsgObj(msgObj)\n    }\n});\n\nvar sharedLoginMgr = new LoginMgr()\nmodule.exports = sharedLoginMgr"]}