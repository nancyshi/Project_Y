{"version":3,"sources":["assets/scripts/bulletMgr.js"],"names":["cc","Class","Component","properties","bulletType","status","disFromBorder","moveSpeed","movingDirection","targetPosition","movingTime","vx","vy","levelMgr","helper","_rayTestLength","pathWaysNode","Node","pathWaysHeight","sliderFrame","SpriteFrame","faltalTorence","onLoad","find","getComponent","Helper","require","start","move","direction","checkWhetherCanMove","update","dt","moveUpdate","tempX","node","x","tempY","y","v2","mag","getNearestWallInfo","givenDirection","result","walls","disToSelfBounder","getDisToSelfBorder","index","wallNode","bounderLines","getLinesOfOneNode","key","line","dis","isOneNodeWillCollidWithOneLineInDirection","targetDis","suitablePosition","getSuitablePoint","moveDis","children","length","position","selectedPathNode","onePath","isTwoNodeCross","_isPathNodeMoveDirection","ray","makeRay","currentDis","lines","rayTest","toString","getMaxDisFromPathNode","givenNode","ray1","ray2","self","getDis","dist","dis1","dis2","isPathNodeMoveDirection","givenPathNode","verticalDirection","rotate","Math","PI","normalizeSelf","angle","rotatedDirection","fuzzyEquals"],"mappings":"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","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n\n        // bulletType: {\n        //     type: cc.Integer,\n        //     get() {\n        //         // if (this._bulletType == null) {\n        //         //     this._bulletType = 1\n        //         // }\n        //         return this._bulletType\n        //     },\n        //     set(value) {\n        //         this._bulletType = value\n        //         if (value == 2) {\n        //             this.node.getComponent(cc.Sprite).spriteFrame = this.sliderFrame\n        //         }\n        //     }\n        // }, //1 is normal , 2 is slider bullet\n        bulletType: 1,\n        status: 0, //0 is static, 1 is moving , 2 is reached target\n        disFromBorder: 5,\n        moveSpeed: 500,\n        movingDirection: null,\n        targetPosition: null,\n        movingTime: 0.3,\n        vx: null,\n        vy: null,\n\n        levelMgr: null,\n        helper: null,\n\n        _rayTestLength: 3000,\n        pathWaysNode: cc.Node,\n        pathWaysHeight: 10,\n        sliderFrame: cc.SpriteFrame,\n        faltalTorence: 0.01\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.levelMgr = cc.find(\"Canvas\").getComponent(\"levelMgr\")\n        var Helper = require(\"helper\")\n        this.helper = new Helper()\n        // if (this.bulletType == 2) {\n        //     this.node.getComponent(cc.Sprite).spriteFrame = this.sliderFrame\n        // }\n    },\n\n    start () {\n        \n    },\n    move(direction) {\n\n    },\n    checkWhetherCanMove(direction) {\n\n    },\n    update (dt) {\n        this.moveUpdate(dt)\n    },\n\n    moveUpdate(dt) {\n        if (this.status != 1) {\n            return\n        }\n\n        var tempX = this.node.x + this.vx * dt\n        var tempY = this.node.y + this.vy * dt\n        if (cc.v2(tempX - this.node.x, tempY - this.node.y).mag() >= cc.v2(this.targetPosition.x - this.node.x, this.targetPosition.y - this.node.y).mag()) {\n            tempX = this.targetPosition.x\n            tempY = this.targetPosition.y\n\n            this.node.x = tempX\n            this.node.y = tempY\n            this.status = 0\n            return\n        }\n\n        this.node.x = tempX\n        this.node.y = tempY\n    },\n    getNearestWallInfo(givenDirection) {\n        if (this.bulletType == 1) {\n            //normal bullet\n\n            var result = null\n            var walls = this.levelMgr.walls\n            var disToSelfBounder = this.helper.getDisToSelfBorder(this.node,givenDirection)\n\n            for (var index in walls) {\n                var wallNode = walls[index]\n                var bounderLines = this.helper.getLinesOfOneNode(wallNode)\n                for (var key in bounderLines) {\n                    var line = bounderLines[key]\n                    var dis = this.helper.isOneNodeWillCollidWithOneLineInDirection(this.node,line,givenDirection)\n                    if (dis == false) {\n                        continue\n                    }\n                    var targetDis = this.disFromBorder + disToSelfBounder\n                    if (result == null || dis < result.dis + targetDis) {\n                        var suitablePosition = this.helper.getSuitablePoint(cc.v2(this.node.x, this.node.y),dis,targetDis,givenDirection)\n                        var moveDis = cc.v2(suitablePosition.x - this.node.x, suitablePosition.y - this.node.y).mag()\n                        result = {\n                            dis: moveDis,\n                            suitablePosition: suitablePosition\n                        }\n                    }\n                }\n            }\n            return result\n        }\n        \n        if (this.bulletType == 2) {\n            if (this.pathWaysNode == null || this.pathWaysNode.children.length == 0) {\n                return {\n                    dis: 0,\n                    suitablePosition: this.node.position\n                }\n            }\n            var selectedPathNode = null\n            for (var index in this.pathWaysNode.children) {\n                var onePath = this.pathWaysNode.children[index]\n                if (this.helper.isTwoNodeCross(this.node,onePath) == false) {\n                    continue\n                }\n\n                if (selectedPathNode == null || this._isPathNodeMoveDirection(onePath,givenDirection) == true) {\n                    selectedPathNode = onePath\n                }\n            }\n            if (this._isPathNodeMoveDirection(selectedPathNode,givenDirection) == false) {\n                return {\n                    dis: 0,\n                    suitablePosition: this.node.position\n                }\n            }\n            var ray = this.helper.makeRay(this.node.position,3000,givenDirection)\n            var currentDis = null\n            var lines = this.helper.getLinesOfOneNode(selectedPathNode)\n            for (var key in lines) {\n                var line = lines[key]\n                var dis = this.helper.rayTest(ray,line)\n                if (dis.toString() != \"false\") {\n                    if (currentDis == null || dis > currentDis) {\n                        currentDis = dis \n                    }\n                }\n            }\n\n            if (currentDis == null) {\n                currentDis = 5\n            }\n            var suitablePosition = this.helper.getSuitablePoint(this.node.position,currentDis,0,givenDirection)\n            var dis = cc.v2(suitablePosition.x - this.node.x, suitablePosition.y - this.node.y).mag()\n            return {\n                suitablePosition: suitablePosition,\n                dis: dis\n            }\n        }\n    },\n\n    getMaxDisFromPathNode(givenNode,direction) {\n        var ray1 = this.helper.makeRay(this.node.position,3000,direction)\n        var ray2 = this.helper.makeRay(this.node.position,3000,cc.v2(-direction.x, -direction.y))\n\n        var lines = this.helper.getLinesOfOneNode(givenNode)\n        var self = this\n        var getDis = function(ray) {\n            var dis = null\n            for (var key in lines) {\n                var line = lines[key]\n                var dist = self.helper.rayTest(ray,line)\n                if (dist != false) {\n                    return dist\n                }\n            }\n            \n            if (dis == null) {\n                dis = 5\n            }\n            return dis\n        }\n\n        var dis1 = getDis(ray1)\n        var dis2 = getDis(ray2)\n        \n        if (dis1 >= dis2) {\n            return dis1\n        }\n        else {\n            return dis2\n        }\n    },\n\n    isPathNodeMoveDirection(givenPathNode, givenDirection) {\n        var dis1 = this.getMaxDisFromPathNode(givenPathNode,givenDirection)\n        var verticalDirection = givenDirection.rotate(Math.PI/2)\n        var dis2 = this.getMaxDisFromPathNode(givenPathNode,verticalDirection)\n        if (dis1 > dis2) {\n            return true\n        }\n\n        return false\n    },\n\n    _isPathNodeMoveDirection(givenPathNode,givenDirection) {\n        givenDirection.normalizeSelf()\n        var angle = -givenPathNode.angle * Math.PI / 180\n        var rotatedDirection = cc.v2(1,0).rotate(angle)\n        if (givenDirection.fuzzyEquals(rotatedDirection,0.001) == true || givenDirection.fuzzyEquals(cc.v2(-rotatedDirection.x, -rotatedDirection.y),0.001) == true) {\n            return true\n        }\n        else {\n            return false\n        }\n\n    }\n \n});\n"]}