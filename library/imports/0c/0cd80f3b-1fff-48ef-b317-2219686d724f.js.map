{"version":3,"sources":["../../../../../assets/scripts/libs/assets/scripts/libs/dataMgr.js"],"names":["dataMgr","cc","Class","extends","Component","properties","playerData","get","_playerData","set","value","Proxy","dataMonitoredProxyHandler","onPlayerDataUpdated","_dataMonitoredProxyHandler","handler","target","key","globalRedPointMgr","require","setupRedPoints","systems","systemsGloableDataMonitored","k","oneSys","opendNode","mgr","getComponent","mgrName","dataMonitored","currentScene","director","getScene","name","getChildByName","delegate","updatePlayerDataFromServer","playerId","networkMgr","msgObj","makeMessageObj","message","self","successCallBack","xhr","response","responseText","JSON","parse","type","sendMessageByMsgObj","log","stringify","timerSystemsMgr","initSetup","lunch","loginSceneMgr","commitPlayerDataToServer","dataForCommit","id","commitBody","shareDataMgr","module","exports"],"mappings":"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","file":"dataMgr.js","sourceRoot":"../../../../../assets/scripts/libs","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nvar dataMgr = cc.Class({\n    \n    extends: cc.Component,\n    properties: {\n\n        playerData: {\n            get() {\n                return this._playerData\n            },\n            set(value) {\n                this._playerData = new Proxy(value,this.dataMonitoredProxyHandler)\n                this.onPlayerDataUpdated()\n                //do something else\n            }\n        },\n\n        dataMonitoredProxyHandler: {\n            get() {\n                if (this._dataMonitoredProxyHandler == null) {\n                    var handler = {\n                        get(target, key) {\n                            if (typeof target[key] === \"object\") {\n                                return new Proxy(target[key],handler)\n                            }\n                            return target[key]\n                        },\n                        set(target, key, value) {\n                            target[key] = value\n                            var globalRedPointMgr = require(\"globalRedPointMgr\")\n                            globalRedPointMgr.setupRedPoints()\n                            var systems = require(\"systemsMgr\").systems\n                            require(\"systemsMgr\").systemsGloableDataMonitored(key,value)\n                            for (var k in systems) {\n                                var oneSys = systems[k]\n                                if (oneSys.opendNode != null) {\n                                    var mgr = oneSys.opendNode.getComponent(oneSys.mgrName)\n                                    if (mgr != null && typeof mgr.dataMonitored === \"function\") {\n                                        mgr.dataMonitored(key,value)\n                                    }\n                                }\n                            }\n\n                            var currentScene = cc.director.getScene()\n                            var mgrName = null\n                            switch(currentScene.name) {\n                                case \"mainScene\":\n                                    mgrName = \"mainSceneMgr\"\n                                    break\n                                case \"levelScene\":\n                                    mgrName = \"levelMgr\"\n                                    break\n                            }\n                            if (mgrName != null) {\n                                var mgr = currentScene.getChildByName(\"Canvas\").getComponent(mgrName)\n                                if (mgr != null && typeof mgr.dataMonitored === \"function\") {\n                                    mgr.dataMonitored(key,value)\n                                }\n                            }\n                            return true\n                        }\n                    }\n                    this._dataMonitoredProxyHandler = handler\n                }\n\n                return this._dataMonitoredProxyHandler\n            }\n        },\n        \n        delegate: null\n        \n    },\n\n    updatePlayerDataFromServer(playerId) {\n\n        var networkMgr = require(\"networkMgr\")\n        var msgObj = networkMgr.makeMessageObj(\"dataModule\",\"queryMessageType\")\n        msgObj.message.playerId = playerId\n        var self = this\n        msgObj.successCallBack = function(xhr) {\n            var response = xhr.responseText\n            response = JSON.parse(response)  \n            if (response.type == \"success\") {\n                self.playerData = response.playerData\n            }\n            else {\n                //do something for erros\n            }\n        }\n        networkMgr.sendMessageByMsgObj(msgObj)\n    },\n    onPlayerDataUpdated () {\n        cc.log(\"now player data is \" + JSON.stringify(this.playerData))\n        var timerSystemsMgr = require(\"timerSystemsMgr\")\n        timerSystemsMgr.initSetup()\n        timerSystemsMgr.lunch()\n        if (cc.director.getScene().name == \"loginScene\") {\n            var loginSceneMgr = cc.director.getScene().getChildByName(\"Canvas\").getComponent(\"loginSceneMgr\")\n            loginSceneMgr.onPlayerDataUpdated()\n        }\n    },\n\n    commitPlayerDataToServer(dataForCommit, successCallBack) {\n        var networkMgr = require(\"networkMgr\")\n        var msgObj = networkMgr.makeMessageObj(\"dataModule\",\"commitMessageTyp\")\n        msgObj.message.playerId = this.playerData.id\n        if (msgObj.message.playerId == null) {\n            cc.log(\"no player data\")\n            return\n        }\n        \n\n        msgObj.message.commitBody = dataForCommit\n        msgObj.successCallBack = function(xhr) {\n            var response = xhr.responseText\n            response = JSON.parse(response)\n            if (response.type == \"commitSuccess\") {\n                successCallBack()\n            }\n        }\n        networkMgr.sendMessageByMsgObj(msgObj)\n    }\n});\n\nvar shareDataMgr = new dataMgr()\nmodule.exports = shareDataMgr\n"]}