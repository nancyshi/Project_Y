{"version":3,"sources":["../../../../assets/scripts/assets/scripts/bulletMgr.js"],"names":["cc","Class","extends","Component","properties","bulletType","status","disFromBorder","moveSpeed","movingDirection","targetPosition","movingTime","vx","vy","levelMgr","helper","_rayTestLength","pathWaysNode","Node","pathWaysHeight","sliderFrame","SpriteFrame","faltalTorence","onLoad","find","getComponent","Helper","require","start","node","Sprite","spriteFrame","move","direction","checkWhetherCanMove","update","dt","moveUpdate","tempX","x","tempY","y","v2","mag","getNearestWallInfo","givenDirection","result","walls","disToSelfBounder","getDisToSelfBorder","index","wallNode","bounderLines","getLinesOfOneNode","key","line","dis","isOneNodeWillCollidWithOneLineInDirection","targetDis","suitablePosition","getSuitablePoint","moveDis","children","length","position","selectedPathNode","onePath","isTwoNodeCross","getMaxDisFromPathNode","_isPathNodeMoveDirection","ray","makeRay","currentDis","lines","rayTest","toString","givenNode","ray1","ray2","self","getDis","dist","dis1","dis2","isPathNodeMoveDirection","givenPathNode","verticalDirection","rotate","Math","PI","normalizeSelf","angle","rotatedDirection","equals"],"mappings":"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","file":"bulletMgr.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n\n        bulletType: 1, //1 is normal , 2 is slider bullet\n        status: 0, //0 is static, 1 is moving , 2 is reached target\n        disFromBorder: 5,\n        moveSpeed: 500,\n        movingDirection: null,\n        targetPosition: null,\n        movingTime: 0.3,\n        vx: null,\n        vy: null,\n\n        levelMgr: null,\n        helper: null,\n\n        _rayTestLength: 3000,\n        pathWaysNode: cc.Node,\n        pathWaysHeight: 10,\n        sliderFrame: cc.SpriteFrame,\n        faltalTorence: 0.01\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.levelMgr = cc.find(\"Canvas\").getComponent(\"levelMgr\")\n        var Helper = require(\"helper\")\n        this.helper = new Helper()\n    },\n\n    start () {\n        if (this.bulletType == 2) {\n            this.node.getComponent(cc.Sprite).spriteFrame = this.sliderFrame\n        }\n    },\n    move(direction) {\n\n    },\n    checkWhetherCanMove(direction) {\n\n    },\n    update (dt) {\n        this.moveUpdate(dt)\n    },\n\n    moveUpdate(dt) {\n        if (this.status != 1) {\n            return\n        }\n\n        var tempX = this.node.x + this.vx * dt\n        var tempY = this.node.y + this.vy * dt\n        if (cc.v2(tempX - this.node.x, tempY - this.node.y).mag() >= cc.v2(this.targetPosition.x - this.node.x, this.targetPosition.y - this.node.y).mag()) {\n            tempX = this.targetPosition.x\n            tempY = this.targetPosition.y\n\n            this.node.x = tempX\n            this.node.y = tempY\n            this.status = 0\n            return\n        }\n\n        this.node.x = tempX\n        this.node.y = tempY\n    },\n    getNearestWallInfo(givenDirection) {\n        if (this.bulletType == 1) {\n            //normal bullet\n\n            var result = null\n            var walls = this.levelMgr.walls\n            var disToSelfBounder = this.helper.getDisToSelfBorder(this.node,givenDirection)\n\n            for (var index in walls) {\n                var wallNode = walls[index]\n                var bounderLines = this.helper.getLinesOfOneNode(wallNode)\n                for (var key in bounderLines) {\n                    var line = bounderLines[key]\n                    var dis = this.helper.isOneNodeWillCollidWithOneLineInDirection(this.node,line,givenDirection)\n                    if (dis == false) {\n                        continue\n                    }\n                    var targetDis = this.disFromBorder + disToSelfBounder\n                    if (result == null || dis < result.dis + targetDis) {\n                        var suitablePosition = this.helper.getSuitablePoint(cc.v2(this.node.x, this.node.y),dis,targetDis,givenDirection)\n                        var moveDis = cc.v2(suitablePosition.x - this.node.x, suitablePosition.y - this.node.y).mag()\n                        result = {\n                            dis: moveDis,\n                            suitablePosition: suitablePosition\n                        }\n                    }\n                }\n            }\n            return result\n        }\n        \n        if (this.bulletType == 2) {\n            if (this.pathWaysNode == null || this.pathWaysNode.children.length == 0) {\n                return {\n                    dis: 0,\n                    suitablePosition: this.node.position\n                }\n            }\n            var selectedPathNode = null\n            for (var index in this.pathWaysNode.children) {\n                var onePath = this.pathWaysNode.children[index]\n                if (this.helper.isTwoNodeCross(this.node,onePath) == false) {\n                    continue\n                }\n\n                if (selectedPathNode == null || this.getMaxDisFromPathNode(onePath,givenDirection) > this.getMaxDisFromPathNode(selectedPathNode,givenDirection)) {\n                    selectedPathNode = onePath\n                }\n            }\n            if (this._isPathNodeMoveDirection(selectedPathNode,givenDirection) == false) {\n                return {\n                    dis: 0,\n                    suitablePosition: this.node.position\n                }\n            }\n            var ray = this.helper.makeRay(this.node.position,3000,givenDirection)\n            var currentDis = null\n            var lines = this.helper.getLinesOfOneNode(selectedPathNode)\n            for (var key in lines) {\n                var line = lines[key]\n                var dis = this.helper.rayTest(ray,line)\n                if (dis.toString() != \"false\") {\n                    if (currentDis == null || dis > currentDis)\n                    currentDis = dis\n                }\n            }\n\n            if (currentDis == null) {\n                currentDis = 5\n            }\n            var suitablePosition = this.helper.getSuitablePoint(this.node.position,currentDis,0,givenDirection)\n            var dis = cc.v2(suitablePosition.x - this.node.x, suitablePosition.y - this.node.y).mag()\n            \n            return {\n                suitablePosition: suitablePosition,\n                dis: dis\n            }\n        }\n    },\n\n    getMaxDisFromPathNode(givenNode,direction) {\n        var ray1 = this.helper.makeRay(this.node.position,3000,direction)\n        var ray2 = this.helper.makeRay(this.node.position,3000,cc.v2(-direction.x, -direction.y))\n\n        var lines = this.helper.getLinesOfOneNode(givenNode)\n        var self = this\n        var getDis = function(ray) {\n            var dis = null\n            for (var key in lines) {\n                var line = lines[key]\n                var dist = self.helper.rayTest(ray,line)\n                if (dist != false) {\n                    return dist\n                }\n            }\n            \n            if (dis == null) {\n                dis = 5\n            }\n            return dis\n        }\n\n        var dis1 = getDis(ray1)\n        var dis2 = getDis(ray2)\n        \n        if (dis1 >= dis2) {\n            return dis1\n        }\n        else {\n            return dis2\n        }\n    },\n\n    isPathNodeMoveDirection(givenPathNode, givenDirection) {\n        var dis1 = this.getMaxDisFromPathNode(givenPathNode,givenDirection)\n        var verticalDirection = givenDirection.rotate(Math.PI/2)\n        var dis2 = this.getMaxDisFromPathNode(givenPathNode,verticalDirection)\n        if (dis1 > dis2) {\n            return true\n        }\n\n        return false\n    },\n\n    _isPathNodeMoveDirection(givenPathNode,givenDirection) {\n        givenDirection.normalizeSelf()\n        var angle = -givenPathNode.angle * Math.PI / 180\n        var rotatedDirection = cc.v2(1,0).rotate(angle)\n\n        if (givenDirection.equals(rotatedDirection) == true || givenDirection.equals(cc.v2(-rotatedDirection.x, -rotatedDirection.y))) {\n            return true\n        }\n        else {\n            return false\n        }\n\n    }\n \n});\n"]}