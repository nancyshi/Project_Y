{"version":3,"sources":["../../../../assets/scripts/assets/scripts/bulletMgr.js"],"names":["cc","Class","extends","Component","properties","bulletType","status","disFromBorder","moveSpeed","movingDirection","targetPosition","movingTime","vx","vy","levelMgr","helper","_rayTestLength","pathWaysNode","Node","pathWaysHeight","sliderFrame","SpriteFrame","onLoad","find","getComponent","Helper","require","start","node","Sprite","spriteFrame","move","direction","checkWhetherCanMove","update","dt","moveUpdate","tempX","x","tempY","y","v2","mag","getNearestWallInfo","givenDirection","result","walls","disToSelfBounder","getDisToSelfBorder","index","wallNode","bounderLines","getLinesOfOneNode","key","line","dis","isOneNodeWillCollidWithOneLineInDirection","targetDis","suitablePosition","getSuitablePoint","children","length","position","selectedPathNode","onePath","isTwoNodeCross","getMaxDisFromPathNode","ray","makeRay","currentDis","lines","rayTest","givenNode","ray1","ray2","self","getDis","dis1","dis2"],"mappings":"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","file":"bulletMgr.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n\n        bulletType: 1, //1 is normal , 2 is slider bullet\n        status: 0, //0 is static, 1 is moving , 2 is reached target\n        disFromBorder: 10,\n        moveSpeed: 500,\n        movingDirection: null,\n        targetPosition: null,\n        movingTime: 0.3,\n        vx: null,\n        vy: null,\n\n        levelMgr: null,\n        helper: null,\n\n        _rayTestLength: 3000,\n        pathWaysNode: cc.Node,\n        pathWaysHeight: 10,\n        sliderFrame: cc.SpriteFrame\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.levelMgr = cc.find(\"Canvas\").getComponent(\"levelMgr\")\n        var Helper = require(\"helper\")\n        this.helper = new Helper()\n    },\n\n    start () {\n        if (this.bulletType == 2) {\n            this.node.getComponent(cc.Sprite).spriteFrame = this.sliderFrame\n        }\n    },\n    move(direction) {\n\n    },\n    checkWhetherCanMove(direction) {\n\n    },\n    update (dt) {\n        this.moveUpdate(dt)\n    },\n\n    moveUpdate(dt) {\n        if (this.status != 1) {\n            return\n        }\n\n        var tempX = this.node.x + this.vx * dt\n        var tempY = this.node.y + this.vy * dt\n        if (cc.v2(tempX - this.node.x, tempY - this.node.y).mag() >= cc.v2(this.targetPosition.x - this.node.x, this.targetPosition.y - this.node.y).mag()) {\n            tempX = this.targetPosition.x\n            tempY = this.targetPosition.y\n\n            this.node.x = tempX\n            this.node.y = tempY\n            this.status = 0\n            return\n        }\n\n        this.node.x = tempX\n        this.node.y = tempY\n    },\n    getNearestWallInfo(givenDirection) {\n        if (this.bulletType == 1) {\n            //normal bullet\n\n            var result = null\n            var walls = this.levelMgr.walls\n            var disToSelfBounder = this.helper.getDisToSelfBorder(this.node,givenDirection)\n\n            for (var index in walls) {\n                var wallNode = walls[index]\n                var bounderLines = this.helper.getLinesOfOneNode(wallNode)\n                for (var key in bounderLines) {\n                    var line = bounderLines[key]\n                    var dis = this.helper.isOneNodeWillCollidWithOneLineInDirection(this.node,line,givenDirection)\n                    if (dis == false) {\n                        continue\n                    }\n\n                    if (result == null || dis < result.dis) {\n                        var targetDis = this.disFromBorder + disToSelfBounder\n                        var suitablePosition = this.helper.getSuitablePoint(cc.v2(this.node.x, this.node.y),dis,targetDis,givenDirection)\n                        result = {\n                            dis: dis,\n                            suitablePosition: suitablePosition\n                        }\n                    }\n                }\n            }\n            return result\n        }\n        \n        if (this.bulletType == 2) {\n            if (this.pathWaysNode == null || this.pathWaysNode.children.length == 0) {\n                return {\n                    dis: 0,\n                    suitablePosition: this.node.position\n                }\n            }\n            var selectedPathNode = null\n            for (var index in this.pathWaysNode.children) {\n                var onePath = this.pathWaysNode.children[index]\n                if (this.helper.isTwoNodeCross(this.node,onePath) == false) {\n                    continue\n                }\n\n                if (selectedPathNode == null || this.getMaxDisFromPathNode(onePath,givenDirection) > this.getMaxDisFromPathNode(selectedPathNode,givenDirection)) {\n                    selectedPathNode = onePath\n                }\n            }\n            var ray = this.helper.makeRay(this.node.position,3000,givenDirection)\n            var currentDis = null\n            var lines = this.helper.getLinesOfOneNode(selectedPathNode)\n            for (var key in lines) {\n                var line = lines[key]\n                var dis = this.helper.rayTest(ray,line)\n                if (dis != false) {\n                    currentDis = dis\n                    break\n                }\n            }\n\n            var suitablePosition = this.helper.getSuitablePoint(this.node.position,currentDis,0,givenDirection)\n            var dis = cc.v2(suitablePosition.x - this.node.x, suitablePosition.y - this.node.y).mag()\n            return {\n                suitablePosition: suitablePosition,\n                dis: dis\n            }\n        }\n    },\n\n    getMaxDisFromPathNode(givenNode,direction) {\n        var ray1 = this.helper.makeRay(this.node.position,3000,direction)\n        var ray2 = this.helper.makeRay(this.node.position,3000,cc.v2(-direction.x, -direction.y))\n\n        var lines = this.helper.getLinesOfOneNode(givenNode)\n        var self = this\n        var getDis = function(ray) {\n            for (var key in lines) {\n                var line = lines[key]\n                var dis = self.helper.rayTest(ray,line)\n                if (dis != false) {\n                    return dis\n                }\n            }\n        }\n\n        var dis1 = getDis(ray1)\n        var dis2 = getDis(ray2)\n\n        if (dis1 >= dis2) {\n            return dis1\n        }\n        else {\n            return dis2\n        }\n    }\n \n});\n"]}