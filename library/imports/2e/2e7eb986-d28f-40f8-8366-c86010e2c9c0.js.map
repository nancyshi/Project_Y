{"version":3,"sources":["../../../../assets/scripts/assets/scripts/bulletMgr.js"],"names":["cc","Class","extends","Component","properties","bulletType","get","_bulletType","set","value","node","getComponent","Sprite","spriteFrame","sliderFrame","status","disFromBorder","moveSpeed","movingDirection","targetPosition","movingTime","vx","vy","levelMgr","helper","_rayTestLength","pathWaysNode","Node","pathWaysHeight","SpriteFrame","faltalTorence","onLoad","find","Helper","require","start","move","direction","checkWhetherCanMove","update","dt","moveUpdate","tempX","x","tempY","y","v2","mag","getNearestWallInfo","givenDirection","result","walls","disToSelfBounder","getDisToSelfBorder","index","wallNode","bounderLines","getLinesOfOneNode","key","line","dis","isOneNodeWillCollidWithOneLineInDirection","targetDis","suitablePosition","getSuitablePoint","moveDis","children","length","position","selectedPathNode","onePath","isTwoNodeCross","_isPathNodeMoveDirection","ray","makeRay","currentDis","lines","rayTest","toString","getMaxDisFromPathNode","givenNode","ray1","ray2","self","getDis","dist","dis1","dis2","isPathNodeMoveDirection","givenPathNode","verticalDirection","rotate","Math","PI","normalizeSelf","angle","rotatedDirection","fuzzyEquals"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;;AAERC,oBAAY;AACRC,eADQ,iBACF;AACF,oBAAI,KAAKC,WAAL,IAAoB,IAAxB,EAA8B;AAC1B,yBAAKA,WAAL,GAAmB,CAAnB;AACH;AACD,uBAAO,KAAKA,WAAZ;AACH,aANO;AAORC,eAPQ,eAOJC,KAPI,EAOG;AACP,qBAAKF,WAAL,GAAmBE,KAAnB;AACA,oBAAIA,SAAS,CAAb,EAAgB;AACZ,yBAAKC,IAAL,CAAUC,YAAV,CAAuBX,GAAGY,MAA1B,EAAkCC,WAAlC,GAAgD,KAAKC,WAArD;AACH;AACJ;AAZO,SAFJ,EAeL;AACHC,gBAAQ,CAhBA,EAgBG;AACXC,uBAAe,CAjBP;AAkBRC,mBAAW,GAlBH;AAmBRC,yBAAiB,IAnBT;AAoBRC,wBAAgB,IApBR;AAqBRC,oBAAY,GArBJ;AAsBRC,YAAI,IAtBI;AAuBRC,YAAI,IAvBI;;AAyBRC,kBAAU,IAzBF;AA0BRC,gBAAQ,IA1BA;;AA4BRC,wBAAgB,IA5BR;AA6BRC,sBAAc1B,GAAG2B,IA7BT;AA8BRC,wBAAgB,EA9BR;AA+BRd,qBAAad,GAAG6B,WA/BR;AAgCRC,uBAAe;AAhCP,KAHP;;AAsCL;;AAEAC,UAxCK,oBAwCK;AACN,aAAKR,QAAL,GAAgBvB,GAAGgC,IAAH,CAAQ,QAAR,EAAkBrB,YAAlB,CAA+B,UAA/B,CAAhB;AACA,YAAIsB,SAASC,QAAQ,QAAR,CAAb;AACA,aAAKV,MAAL,GAAc,IAAIS,MAAJ,EAAd;AACA;AACA;AACA;AACH,KA/CI;AAiDLE,SAjDK,mBAiDI,CAER,CAnDI;AAoDLC,QApDK,gBAoDAC,SApDA,EAoDW,CAEf,CAtDI;AAuDLC,uBAvDK,+BAuDeD,SAvDf,EAuD0B,CAE9B,CAzDI;AA0DLE,UA1DK,kBA0DGC,EA1DH,EA0DO;AACR,aAAKC,UAAL,CAAgBD,EAAhB;AACH,KA5DI;AA8DLC,cA9DK,sBA8DMD,EA9DN,EA8DU;AACX,YAAI,KAAKzB,MAAL,IAAe,CAAnB,EAAsB;AAClB;AACH;;AAED,YAAI2B,QAAQ,KAAKhC,IAAL,CAAUiC,CAAV,GAAc,KAAKtB,EAAL,GAAUmB,EAApC;AACA,YAAII,QAAQ,KAAKlC,IAAL,CAAUmC,CAAV,GAAc,KAAKvB,EAAL,GAAUkB,EAApC;AACA,YAAIxC,GAAG8C,EAAH,CAAMJ,QAAQ,KAAKhC,IAAL,CAAUiC,CAAxB,EAA2BC,QAAQ,KAAKlC,IAAL,CAAUmC,CAA7C,EAAgDE,GAAhD,MAAyD/C,GAAG8C,EAAH,CAAM,KAAK3B,cAAL,CAAoBwB,CAApB,GAAwB,KAAKjC,IAAL,CAAUiC,CAAxC,EAA2C,KAAKxB,cAAL,CAAoB0B,CAApB,GAAwB,KAAKnC,IAAL,CAAUmC,CAA7E,EAAgFE,GAAhF,EAA7D,EAAoJ;AAChJL,oBAAQ,KAAKvB,cAAL,CAAoBwB,CAA5B;AACAC,oBAAQ,KAAKzB,cAAL,CAAoB0B,CAA5B;;AAEA,iBAAKnC,IAAL,CAAUiC,CAAV,GAAcD,KAAd;AACA,iBAAKhC,IAAL,CAAUmC,CAAV,GAAcD,KAAd;AACA,iBAAK7B,MAAL,GAAc,CAAd;AACA;AACH;;AAED,aAAKL,IAAL,CAAUiC,CAAV,GAAcD,KAAd;AACA,aAAKhC,IAAL,CAAUmC,CAAV,GAAcD,KAAd;AACH,KAjFI;AAkFLI,sBAlFK,8BAkFcC,cAlFd,EAkF8B;AAC/B,YAAI,KAAK5C,UAAL,IAAmB,CAAvB,EAA0B;AACtB;;AAEA,gBAAI6C,SAAS,IAAb;AACA,gBAAIC,QAAQ,KAAK5B,QAAL,CAAc4B,KAA1B;AACA,gBAAIC,mBAAmB,KAAK5B,MAAL,CAAY6B,kBAAZ,CAA+B,KAAK3C,IAApC,EAAyCuC,cAAzC,CAAvB;;AAEA,iBAAK,IAAIK,KAAT,IAAkBH,KAAlB,EAAyB;AACrB,oBAAII,WAAWJ,MAAMG,KAAN,CAAf;AACA,oBAAIE,eAAe,KAAKhC,MAAL,CAAYiC,iBAAZ,CAA8BF,QAA9B,CAAnB;AACA,qBAAK,IAAIG,GAAT,IAAgBF,YAAhB,EAA8B;AAC1B,wBAAIG,OAAOH,aAAaE,GAAb,CAAX;AACA,wBAAIE,MAAM,KAAKpC,MAAL,CAAYqC,yCAAZ,CAAsD,KAAKnD,IAA3D,EAAgEiD,IAAhE,EAAqEV,cAArE,CAAV;AACA,wBAAIW,OAAO,KAAX,EAAkB;AACd;AACH;AACD,wBAAIE,YAAY,KAAK9C,aAAL,GAAqBoC,gBAArC;AACA,wBAAIF,UAAU,IAAV,IAAkBU,MAAMV,OAAOU,GAAP,GAAaE,SAAzC,EAAoD;AAChD,4BAAIC,mBAAmB,KAAKvC,MAAL,CAAYwC,gBAAZ,CAA6BhE,GAAG8C,EAAH,CAAM,KAAKpC,IAAL,CAAUiC,CAAhB,EAAmB,KAAKjC,IAAL,CAAUmC,CAA7B,CAA7B,EAA6De,GAA7D,EAAiEE,SAAjE,EAA2Eb,cAA3E,CAAvB;AACA,4BAAIgB,UAAUjE,GAAG8C,EAAH,CAAMiB,iBAAiBpB,CAAjB,GAAqB,KAAKjC,IAAL,CAAUiC,CAArC,EAAwCoB,iBAAiBlB,CAAjB,GAAqB,KAAKnC,IAAL,CAAUmC,CAAvE,EAA0EE,GAA1E,EAAd;AACAG,iCAAS;AACLU,iCAAKK,OADA;AAELF,8CAAkBA;AAFb,yBAAT;AAIH;AACJ;AACJ;AACD,mBAAOb,MAAP;AACH;;AAED,YAAI,KAAK7C,UAAL,IAAmB,CAAvB,EAA0B;AACtB,gBAAI,KAAKqB,YAAL,IAAqB,IAArB,IAA6B,KAAKA,YAAL,CAAkBwC,QAAlB,CAA2BC,MAA3B,IAAqC,CAAtE,EAAyE;AACrE,uBAAO;AACHP,yBAAK,CADF;AAEHG,sCAAkB,KAAKrD,IAAL,CAAU0D;AAFzB,iBAAP;AAIH;AACD,gBAAIC,mBAAmB,IAAvB;AACA,iBAAK,IAAIf,KAAT,IAAkB,KAAK5B,YAAL,CAAkBwC,QAApC,EAA8C;AAC1C,oBAAII,UAAU,KAAK5C,YAAL,CAAkBwC,QAAlB,CAA2BZ,KAA3B,CAAd;AACA,oBAAI,KAAK9B,MAAL,CAAY+C,cAAZ,CAA2B,KAAK7D,IAAhC,EAAqC4D,OAArC,KAAiD,KAArD,EAA4D;AACxD;AACH;;AAED,oBAAID,oBAAoB,IAApB,IAA4B,KAAKG,wBAAL,CAA8BF,OAA9B,EAAsCrB,cAAtC,KAAyD,IAAzF,EAA+F;AAC3FoB,uCAAmBC,OAAnB;AACH;AACJ;AACD,gBAAI,KAAKE,wBAAL,CAA8BH,gBAA9B,EAA+CpB,cAA/C,KAAkE,KAAtE,EAA6E;AACzE,uBAAO;AACHW,yBAAK,CADF;AAEHG,sCAAkB,KAAKrD,IAAL,CAAU0D;AAFzB,iBAAP;AAIH;AACD,gBAAIK,MAAM,KAAKjD,MAAL,CAAYkD,OAAZ,CAAoB,KAAKhE,IAAL,CAAU0D,QAA9B,EAAuC,IAAvC,EAA4CnB,cAA5C,CAAV;AACA,gBAAI0B,aAAa,IAAjB;AACA,gBAAIC,QAAQ,KAAKpD,MAAL,CAAYiC,iBAAZ,CAA8BY,gBAA9B,CAAZ;AACA,iBAAK,IAAIX,GAAT,IAAgBkB,KAAhB,EAAuB;AACnB,oBAAIjB,OAAOiB,MAAMlB,GAAN,CAAX;AACA,oBAAIE,MAAM,KAAKpC,MAAL,CAAYqD,OAAZ,CAAoBJ,GAApB,EAAwBd,IAAxB,CAAV;AACA,oBAAIC,IAAIkB,QAAJ,MAAkB,OAAtB,EAA+B;AAC3B,wBAAIH,cAAc,IAAd,IAAsBf,MAAMe,UAAhC,EAA4C;AACxCA,qCAAaf,GAAb;AACH;AACJ;AACJ;;AAED,gBAAIe,cAAc,IAAlB,EAAwB;AACpBA,6BAAa,CAAb;AACH;AACD,gBAAIZ,mBAAmB,KAAKvC,MAAL,CAAYwC,gBAAZ,CAA6B,KAAKtD,IAAL,CAAU0D,QAAvC,EAAgDO,UAAhD,EAA2D,CAA3D,EAA6D1B,cAA7D,CAAvB;AACA,gBAAIW,MAAM5D,GAAG8C,EAAH,CAAMiB,iBAAiBpB,CAAjB,GAAqB,KAAKjC,IAAL,CAAUiC,CAArC,EAAwCoB,iBAAiBlB,CAAjB,GAAqB,KAAKnC,IAAL,CAAUmC,CAAvE,EAA0EE,GAA1E,EAAV;AACA,mBAAO;AACHgB,kCAAkBA,gBADf;AAEHH,qBAAKA;AAFF,aAAP;AAIH;AACJ,KAhKI;AAkKLmB,yBAlKK,iCAkKiBC,SAlKjB,EAkK2B3C,SAlK3B,EAkKsC;AACvC,YAAI4C,OAAO,KAAKzD,MAAL,CAAYkD,OAAZ,CAAoB,KAAKhE,IAAL,CAAU0D,QAA9B,EAAuC,IAAvC,EAA4C/B,SAA5C,CAAX;AACA,YAAI6C,OAAO,KAAK1D,MAAL,CAAYkD,OAAZ,CAAoB,KAAKhE,IAAL,CAAU0D,QAA9B,EAAuC,IAAvC,EAA4CpE,GAAG8C,EAAH,CAAM,CAACT,UAAUM,CAAjB,EAAoB,CAACN,UAAUQ,CAA/B,CAA5C,CAAX;;AAEA,YAAI+B,QAAQ,KAAKpD,MAAL,CAAYiC,iBAAZ,CAA8BuB,SAA9B,CAAZ;AACA,YAAIG,OAAO,IAAX;AACA,YAAIC,SAAS,SAATA,MAAS,CAASX,GAAT,EAAc;AACvB,gBAAIb,MAAM,IAAV;AACA,iBAAK,IAAIF,GAAT,IAAgBkB,KAAhB,EAAuB;AACnB,oBAAIjB,OAAOiB,MAAMlB,GAAN,CAAX;AACA,oBAAI2B,OAAOF,KAAK3D,MAAL,CAAYqD,OAAZ,CAAoBJ,GAApB,EAAwBd,IAAxB,CAAX;AACA,oBAAI0B,QAAQ,KAAZ,EAAmB;AACf,2BAAOA,IAAP;AACH;AACJ;;AAED,gBAAIzB,OAAO,IAAX,EAAiB;AACbA,sBAAM,CAAN;AACH;AACD,mBAAOA,GAAP;AACH,SAdD;;AAgBA,YAAI0B,OAAOF,OAAOH,IAAP,CAAX;AACA,YAAIM,OAAOH,OAAOF,IAAP,CAAX;;AAEA,YAAII,QAAQC,IAAZ,EAAkB;AACd,mBAAOD,IAAP;AACH,SAFD,MAGK;AACD,mBAAOC,IAAP;AACH;AACJ,KAjMI;AAmMLC,2BAnMK,mCAmMmBC,aAnMnB,EAmMkCxC,cAnMlC,EAmMkD;AACnD,YAAIqC,OAAO,KAAKP,qBAAL,CAA2BU,aAA3B,EAAyCxC,cAAzC,CAAX;AACA,YAAIyC,oBAAoBzC,eAAe0C,MAAf,CAAsBC,KAAKC,EAAL,GAAQ,CAA9B,CAAxB;AACA,YAAIN,OAAO,KAAKR,qBAAL,CAA2BU,aAA3B,EAAyCC,iBAAzC,CAAX;AACA,YAAIJ,OAAOC,IAAX,EAAiB;AACb,mBAAO,IAAP;AACH;;AAED,eAAO,KAAP;AACH,KA5MI;AA8MLf,4BA9MK,oCA8MoBiB,aA9MpB,EA8MkCxC,cA9MlC,EA8MkD;AACnDA,uBAAe6C,aAAf;AACA,YAAIC,QAAQ,CAACN,cAAcM,KAAf,GAAuBH,KAAKC,EAA5B,GAAiC,GAA7C;AACA,YAAIG,mBAAmBhG,GAAG8C,EAAH,CAAM,CAAN,EAAQ,CAAR,EAAW6C,MAAX,CAAkBI,KAAlB,CAAvB;AACA,YAAI9C,eAAegD,WAAf,CAA2BD,gBAA3B,EAA4C,KAA5C,KAAsD,IAAtD,IAA8D/C,eAAegD,WAAf,CAA2BjG,GAAG8C,EAAH,CAAM,CAACkD,iBAAiBrD,CAAxB,EAA2B,CAACqD,iBAAiBnD,CAA7C,CAA3B,EAA2E,KAA3E,KAAqF,IAAvJ,EAA6J;AACzJ,mBAAO,IAAP;AACH,SAFD,MAGK;AACD,mBAAO,KAAP;AACH;AAEJ;AAzNI,CAAT","file":"bulletMgr.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n\n        bulletType: {\n            get() {\n                if (this._bulletType == null) {\n                    this._bulletType = 1\n                }\n                return this._bulletType\n            },\n            set(value) {\n                this._bulletType = value\n                if (value == 2) {\n                    this.node.getComponent(cc.Sprite).spriteFrame = this.sliderFrame\n                }\n            }\n        }, //1 is normal , 2 is slider bullet\n        status: 0, //0 is static, 1 is moving , 2 is reached target\n        disFromBorder: 5,\n        moveSpeed: 500,\n        movingDirection: null,\n        targetPosition: null,\n        movingTime: 0.3,\n        vx: null,\n        vy: null,\n\n        levelMgr: null,\n        helper: null,\n\n        _rayTestLength: 3000,\n        pathWaysNode: cc.Node,\n        pathWaysHeight: 10,\n        sliderFrame: cc.SpriteFrame,\n        faltalTorence: 0.01\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.levelMgr = cc.find(\"Canvas\").getComponent(\"levelMgr\")\n        var Helper = require(\"helper\")\n        this.helper = new Helper()\n        // if (this.bulletType == 2) {\n        //     this.node.getComponent(cc.Sprite).spriteFrame = this.sliderFrame\n        // }\n    },\n\n    start () {\n        \n    },\n    move(direction) {\n\n    },\n    checkWhetherCanMove(direction) {\n\n    },\n    update (dt) {\n        this.moveUpdate(dt)\n    },\n\n    moveUpdate(dt) {\n        if (this.status != 1) {\n            return\n        }\n\n        var tempX = this.node.x + this.vx * dt\n        var tempY = this.node.y + this.vy * dt\n        if (cc.v2(tempX - this.node.x, tempY - this.node.y).mag() >= cc.v2(this.targetPosition.x - this.node.x, this.targetPosition.y - this.node.y).mag()) {\n            tempX = this.targetPosition.x\n            tempY = this.targetPosition.y\n\n            this.node.x = tempX\n            this.node.y = tempY\n            this.status = 0\n            return\n        }\n\n        this.node.x = tempX\n        this.node.y = tempY\n    },\n    getNearestWallInfo(givenDirection) {\n        if (this.bulletType == 1) {\n            //normal bullet\n\n            var result = null\n            var walls = this.levelMgr.walls\n            var disToSelfBounder = this.helper.getDisToSelfBorder(this.node,givenDirection)\n\n            for (var index in walls) {\n                var wallNode = walls[index]\n                var bounderLines = this.helper.getLinesOfOneNode(wallNode)\n                for (var key in bounderLines) {\n                    var line = bounderLines[key]\n                    var dis = this.helper.isOneNodeWillCollidWithOneLineInDirection(this.node,line,givenDirection)\n                    if (dis == false) {\n                        continue\n                    }\n                    var targetDis = this.disFromBorder + disToSelfBounder\n                    if (result == null || dis < result.dis + targetDis) {\n                        var suitablePosition = this.helper.getSuitablePoint(cc.v2(this.node.x, this.node.y),dis,targetDis,givenDirection)\n                        var moveDis = cc.v2(suitablePosition.x - this.node.x, suitablePosition.y - this.node.y).mag()\n                        result = {\n                            dis: moveDis,\n                            suitablePosition: suitablePosition\n                        }\n                    }\n                }\n            }\n            return result\n        }\n        \n        if (this.bulletType == 2) {\n            if (this.pathWaysNode == null || this.pathWaysNode.children.length == 0) {\n                return {\n                    dis: 0,\n                    suitablePosition: this.node.position\n                }\n            }\n            var selectedPathNode = null\n            for (var index in this.pathWaysNode.children) {\n                var onePath = this.pathWaysNode.children[index]\n                if (this.helper.isTwoNodeCross(this.node,onePath) == false) {\n                    continue\n                }\n\n                if (selectedPathNode == null || this._isPathNodeMoveDirection(onePath,givenDirection) == true) {\n                    selectedPathNode = onePath\n                }\n            }\n            if (this._isPathNodeMoveDirection(selectedPathNode,givenDirection) == false) {\n                return {\n                    dis: 0,\n                    suitablePosition: this.node.position\n                }\n            }\n            var ray = this.helper.makeRay(this.node.position,3000,givenDirection)\n            var currentDis = null\n            var lines = this.helper.getLinesOfOneNode(selectedPathNode)\n            for (var key in lines) {\n                var line = lines[key]\n                var dis = this.helper.rayTest(ray,line)\n                if (dis.toString() != \"false\") {\n                    if (currentDis == null || dis > currentDis) {\n                        currentDis = dis \n                    }\n                }\n            }\n\n            if (currentDis == null) {\n                currentDis = 5\n            }\n            var suitablePosition = this.helper.getSuitablePoint(this.node.position,currentDis,0,givenDirection)\n            var dis = cc.v2(suitablePosition.x - this.node.x, suitablePosition.y - this.node.y).mag()\n            return {\n                suitablePosition: suitablePosition,\n                dis: dis\n            }\n        }\n    },\n\n    getMaxDisFromPathNode(givenNode,direction) {\n        var ray1 = this.helper.makeRay(this.node.position,3000,direction)\n        var ray2 = this.helper.makeRay(this.node.position,3000,cc.v2(-direction.x, -direction.y))\n\n        var lines = this.helper.getLinesOfOneNode(givenNode)\n        var self = this\n        var getDis = function(ray) {\n            var dis = null\n            for (var key in lines) {\n                var line = lines[key]\n                var dist = self.helper.rayTest(ray,line)\n                if (dist != false) {\n                    return dist\n                }\n            }\n            \n            if (dis == null) {\n                dis = 5\n            }\n            return dis\n        }\n\n        var dis1 = getDis(ray1)\n        var dis2 = getDis(ray2)\n        \n        if (dis1 >= dis2) {\n            return dis1\n        }\n        else {\n            return dis2\n        }\n    },\n\n    isPathNodeMoveDirection(givenPathNode, givenDirection) {\n        var dis1 = this.getMaxDisFromPathNode(givenPathNode,givenDirection)\n        var verticalDirection = givenDirection.rotate(Math.PI/2)\n        var dis2 = this.getMaxDisFromPathNode(givenPathNode,verticalDirection)\n        if (dis1 > dis2) {\n            return true\n        }\n\n        return false\n    },\n\n    _isPathNodeMoveDirection(givenPathNode,givenDirection) {\n        givenDirection.normalizeSelf()\n        var angle = -givenPathNode.angle * Math.PI / 180\n        var rotatedDirection = cc.v2(1,0).rotate(angle)\n        if (givenDirection.fuzzyEquals(rotatedDirection,0.001) == true || givenDirection.fuzzyEquals(cc.v2(-rotatedDirection.x, -rotatedDirection.y),0.001) == true) {\n            return true\n        }\n        else {\n            return false\n        }\n\n    }\n \n});\n"]}