{"version":3,"sources":["../../../../assets/scripts/assets/scripts/helper.js"],"names":["Helper","cc","Class","properties","segmentsIntr","a","b","c","d","denominator","y","x","similarMinus","rotateSegment","origin","degree","rotatedA","rotateOnePoint","rotatedB","p1","p2","angle","Math","PI","pb","v2","rotatedPb","rotate","rayTest","line1","line2","result","dis","mag","getSuitablePoint","currentDis","targetDis","direction","normalizeSelf","currentDisX","currentDisY","ratio","resultX","resultY","makeRay","ray","dx","dy","getLinesOfOneNode","givenNode","offset","height","width","p3","p4","p5","p6","p7","p8","line3","line4","undefined","obj","lowerLine","upperLine","leftLine","rightLine","error","isTwoNodeCross","node1","node2","info1","getInfoOfOneNode","info2","minY","maxY","minX","maxX","leftUpPoint","rightUpPoint","leftDownPoint","rightDownPoint","arry","index","point","getDisToSelfBorder","borderLines","key","line","getPointsOfOneNode","isOneNodeWillCollidWithOneLineInDirection","givenLine","givenDirection","nodePoints","rays","onePoint","push","oneRay","minerX","maxerX","minerY","maxerY","lineMinx","lineMaxX","lineMinY","lineMaxY","lineDirection","lenthenLineP2","lenthenLineP1","lenthenLine","testRay","distance","isTwoPositionSimilarEqual","faultTolerent","isTwoValueSimilarEqual","v1","temp","module","exports"],"mappings":"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","file":"helper.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nvar Helper = cc.Class({\n    properties: {},\n\n    segmentsIntr(a, b, c, d){  \n        /** 1 解线性方程组, 求线段交点. **/  \n        // 如果分母为0 则平行或共线, 不相交  \n            var denominator = (b.y - a.y)*(d.x - c.x) - (a.x - b.x)*(c.y - d.y);  \n            if (denominator==0) {\n                return false;  \n            }  \n           \n        // 线段所在直线的交点坐标 (x , y)      \n            var x = ( (b.x - a.x) * (d.x - c.x) * (c.y - a.y)   \n                        + (b.y - a.y) * (d.x - c.x) * a.x   \n                        - (d.y - c.y) * (b.x - a.x) * c.x ) / denominator ;  \n            var y = -( (b.y - a.y) * (d.y - c.y) * (c.x - a.x)   \n                        + (b.x - a.x) * (d.y - c.y) * a.y   \n                        - (d.x - c.x) * (b.y - a.y) * c.y ) / denominator;  \n        /** 2 判断交点是否在两条线段上 **/  \n            if (  \n                // 交点在线段1上  \n                this.similarMinus(x, a.x) * this.similarMinus(x, b.x) <= 0 && this.similarMinus(y, a.y) * this.similarMinus(y,b.y) <= 0 \n                // (x - a.x) * (x - b.x) <= 0 && (y - a.y) * (y - b.y) <= 0  \n                // 且交点也在线段2上  \n                && this.similarMinus(x, c.x) * this.similarMinus(x, d.x) <= 0 && this.similarMinus(y,c.y) * this.similarMinus(y,d.y) <= 0\n                //  && (x - c.x) * (x - d.x) <= 0 && (y - c.y) * (y - d.y) <= 0  \n                ){  \n          \n                // 返回交点p  \n                return {  \n                        x :  x,  \n                        y :  y  \n                    }  \n            }  \n            //否则不相交  \n            return false  \n    },\n\n    rotateSegment(a,b,origin,degree) {\n        var rotatedA = this.rotateOnePoint(a,origin,degree)\n        var rotatedB = this.rotateOnePoint(b,origin,degree)\n\n        return {\n            p1: rotatedA,\n            p2: rotatedB\n        }\n    },\n\n    rotateOnePoint(b,origin,degree) {\n        var angle = degree * Math.PI / 180\n        var pb = cc.v2(b.x - origin.x, b.y - origin.y)\n        var rotatedPb = pb.rotate(angle)\n        var rotatedB = cc.v2(rotatedPb.x + origin.x, rotatedPb.y + origin.y)\n        return rotatedB\n    },\n\n    rayTest(line1,line2) {\n        var result = this.segmentsIntr(line1.p1, line1.p2, line2.p1, line2.p2)\n        if (result == false) {\n            return false\n        }\n\n        var dis = cc.v2(result.x - line1.p1.x, result.y - line1.p1.y).mag()\n        return dis\n    },\n    \n    getSuitablePoint(p1,currentDis,targetDis,direction) {\n        \n        if (targetDis >= currentDis) {\n            return p1\n        }\n        direction.normalizeSelf()\n        var currentDisX = currentDis * direction.x\n        var currentDisY = currentDis * direction.y\n\n        var ratio = (currentDis - targetDis) / currentDis\n        var resultX = p1.x + ratio * currentDisX\n        var resultY = p1.y + ratio * currentDisY\n\n        return cc.v2(resultX, resultY)\n    },\n\n    makeRay(p1,dis,direction) {\n        var ray = {\n            p1: p1,\n            p2: null\n        }\n        if (direction.mag() != 1) {\n            direction.normalizeSelf()\n        }\n        var dx = direction.x * dis\n        var dy = direction.y * dis\n        var x = p1.x + dx\n        var y = p1.y + dy\n        ray.p2 = cc.v2(x,y)\n        return ray\n    },\n\n    getLinesOfOneNode(givenNode) {\n\n        var offset = givenNode.height / 2\n        var p1 = cc.v2(givenNode.x - givenNode.width/2, givenNode.y - offset)\n        var p2 = cc.v2(givenNode.x + givenNode.width/2, givenNode.y - offset)\n        var p3 = cc.v2(p1.x, p1.y + givenNode.height)\n        var p4 = cc.v2(p2.x, p2.y + givenNode.height)\n        var p5 = cc.v2(givenNode.x - givenNode.width / 2, givenNode.y + givenNode.height / 2)\n        var p6 = cc.v2(p5.x, p5.y - givenNode.height)\n        var p7 = cc.v2(givenNode.x + givenNode.width / 2, givenNode.y + givenNode.height / 2)\n        var p8 = cc.v2(p7.x, p7.y - givenNode.height)\n\n        var line1 = {p1:p1,p2:p2}\n        var line2 = {p1:p3,p2:p4}\n        var line3 = {p1:p5,p2:p6}\n        var line4 = {p1:p7,p2:p8}\n        if (givenNode.angle != null && givenNode.angle != undefined) {\n            line1 = this.rotateSegment(p1,p2,cc.v2(givenNode.x, givenNode.y),-givenNode.angle)\n            line2 = this.rotateSegment(p3,p4,cc.v2(givenNode.x, givenNode.y),-givenNode.angle)\n            line3 = this.rotateSegment(p5,p6,cc.v2(givenNode.x, givenNode.y),-givenNode.angle)\n            line4 = this.rotateSegment(p7,p8,cc.v2(givenNode.x, givenNode.y),-givenNode.angle) \n        }\n        // var line1 = this.rotateSegment(p1,p2,cc.v2(givenNode.x, givenNode.y),-givenNode.angle)\n        // var line2 = this.rotateSegment(p3,p4,cc.v2(givenNode.x, givenNode.y),-givenNode.angle)\n        // var line3 = this.rotateSegment(p5,p6,cc.v2(givenNode.x, givenNode.y),-givenNode.angle)\n        // var line4 = this.rotateSegment(p7,p8,cc.v2(givenNode.x, givenNode.y),-givenNode.angle) \n        var obj = {\n            lowerLine: line1, //lower line\n            upperLine: line2, //upper line\n            leftLine: line3, //left line\n            rightLine: line4  //right line\n        }\n        if (line1 == null || line2 == null || line3 == null || line4 == null) {\n            cc.error(\"NOT INVALID LINES\")\n        }\n        return obj\n    },\n\n    isTwoNodeCross(node1, node2) {\n        \n        var info1 = this.getInfoOfOneNode(node1)\n        var info2 = this.getInfoOfOneNode(node2)\n        if (info1.minY > info2.maxY || info2.minY > info1.maxY || info1.minX > info2.maxX || info2.minX > info1.maxX) {\n            return false\n        }\n        return true\n    },\n    getInfoOfOneNode(givenNode) {\n        var leftUpPoint = cc.v2(givenNode.x - givenNode.width / 2, givenNode.y + givenNode.height / 2)\n        var rightUpPoint = cc.v2(givenNode.x + givenNode.width / 2, leftUpPoint.y)\n        var leftDownPoint = cc.v2(leftUpPoint.x, givenNode.y - givenNode.height / 2)\n        var rightDownPoint = cc.v2(rightUpPoint.x, leftDownPoint.y)\n\n        if (givenNode.angle != null && givenNode.angle != undefined) {\n            leftUpPoint = this.rotateOnePoint(leftUpPoint,cc.v2(givenNode.x,givenNode.y),-givenNode.angle)\n            rightUpPoint = this.rotateOnePoint(rightUpPoint,cc.v2(givenNode.x,givenNode.y),-givenNode.angle)\n            leftDownPoint = this.rotateOnePoint(leftDownPoint,cc.v2(givenNode.x,givenNode.y),-givenNode.angle)\n            rightDownPoint = this.rotateOnePoint(rightDownPoint,cc.v2(givenNode.x,givenNode.y),-givenNode.angle)\n        }\n\n        var minX = leftUpPoint.x\n        var maxX = rightDownPoint.x\n        var minY = leftDownPoint.y\n        var maxY = rightUpPoint.y\n        var arry = [leftUpPoint,leftDownPoint,rightUpPoint,rightDownPoint]\n        for (var index in arry) {\n            var point = arry[index]\n            if (minX > point.x) {\n                minX = point.x\n            }\n            if (maxX < point.x) {\n                maxX = point.x\n            }\n            if (minY > point.y) {\n                minY = point.y\n            }\n            if (maxY < point.y) {\n                maxY = point.y\n            }\n        }\n\n        return {\n            minX: minX,\n            minY: minY,\n            maxX: maxX,\n            maxY: maxY\n        }\n    },\n\n    getDisToSelfBorder(givenNode,direction) {\n        var ray = this.makeRay(cc.v2(givenNode.x,givenNode.y),1000,direction)\n        var borderLines = this.getLinesOfOneNode(givenNode)\n        for (var key in borderLines) {\n            var line = borderLines[key]\n            var dis = this.rayTest(ray,line)\n            if (dis != false) {\n                return dis\n            }\n        }\n    },\n\n    getPointsOfOneNode(givenNode){\n        var leftUpPoint = cc.v2(givenNode.x - givenNode.width / 2, givenNode.y + givenNode.height / 2)\n        var rightUpPoint = cc.v2(givenNode.x + givenNode.width / 2, leftUpPoint.y)\n        var leftDownPoint = cc.v2(leftUpPoint.x, givenNode.y - givenNode.height / 2)\n        var rightDownPoint = cc.v2(rightUpPoint.x, leftDownPoint.y)\n\n        if (givenNode.angle != null && givenNode.angle != undefined) {\n            leftUpPoint = this.rotateOnePoint(leftUpPoint,cc.v2(givenNode.x,givenNode.y),-givenNode.angle)\n            rightUpPoint = this.rotateOnePoint(rightUpPoint,cc.v2(givenNode.x,givenNode.y),-givenNode.angle)\n            leftDownPoint = this.rotateOnePoint(leftDownPoint,cc.v2(givenNode.x,givenNode.y),-givenNode.angle)\n            rightDownPoint = this.rotateOnePoint(rightDownPoint,cc.v2(givenNode.x,givenNode.y),-givenNode.angle)\n        }\n        return {\n            leftUpPoint: leftUpPoint,\n            leftDownPoint: leftDownPoint,\n            rightUpPoint: rightUpPoint,\n            rightDownPoint: rightDownPoint\n        }\n    },\n\n    isOneNodeWillCollidWithOneLineInDirection(givenNode,givenLine,givenDirection, dis= 3000) {\n        var nodePoints = this.getPointsOfOneNode(givenNode)\n        var rays = []\n        for (var key in nodePoints) {\n            var onePoint = nodePoints[key]\n            var ray = this.makeRay(onePoint,dis,givenDirection)\n            rays.push(ray)\n        }\n\n        var minX = null\n        var minY = null\n        var maxX = null\n        var maxY = null\n\n        for (var index in rays) {\n            \n            var oneRay = rays[index]\n            var minerX = oneRay.p1.x\n            var maxerX = oneRay.p2.x\n            if (minerX > oneRay.p2.x) {\n                minerX = oneRay.p2.x\n                maxerX = oneRay.p1.x\n            }\n\n            var minerY = oneRay.p1.y\n            var maxerY = oneRay.p2.y\n            if (minerY > oneRay.p2.y) {\n                minerY = oneRay.p2.y\n                maxerY = oneRay.p1.y\n            }\n\n            if (minX == null) {\n                minX = minerX\n                maxX = maxerX\n            }\n            else {\n                if (minX > minerX) {\n                    minX = minerX\n                }\n                if (maxX < maxerX) {\n                    maxX = maxerX\n                }\n            }\n\n            if (minY == null) {\n                minY = minerY\n                maxY = maxerY\n            }\n            else {\n                if (minY > minerY) {\n                    minY = minerY\n                }\n                if (maxY < maxerY) {\n                    maxY = maxerY\n                }\n            }  \n        }\n        \n        var lineMinx = givenLine.p1.x\n        var lineMaxX = givenLine.p2.x\n        var lineMinY = givenLine.p1.y\n        var lineMaxY = givenLine.p2.y\n\n        if (lineMinx > givenLine.p2.x) {\n            lineMinx = givenLine.p2.x\n            lineMaxX = givenLine.p1.x\n        }\n\n        if (lineMinY > givenLine.p2.y) {\n            lineMinY = givenLine.p2.y\n            lineMaxY = givenLine.p1.y\n        }\n\n        if (minY >= lineMaxY || maxY <= lineMinY || minX >= lineMaxX || maxX <= lineMinx) {\n            return false\n        }\n\n        var lineDirection = cc.v2(givenLine.p2.x - givenLine.p1.x, givenLine.p2.y - givenLine.p1.y)\n        lineDirection.normalizeSelf()\n\n        var lenthenLineP2 = this.makeRay(givenLine.p2,3000,lineDirection).p2\n        var lenthenLineP1 = this.makeRay(givenLine.p1,3000,cc.v2(-lineDirection.x, -lineDirection.y)).p2\n        var lenthenLine = {\n            p1: lenthenLineP1,\n            p2: lenthenLineP2\n        }\n\n        var testRay = this.makeRay(cc.v2(givenNode.x, givenNode.y),3000,givenDirection)\n        var distance = this.rayTest(testRay,lenthenLine)\n\n        if (distance != false) {\n            return distance\n        }\n        else {\n            return false\n        }\n\n    },\n\n    isTwoPositionSimilarEqual(p1, p2) {\n        var dx = p2.x - p1.x\n        var dy = p2.y - p1.y\n        var faultTolerent = 0.01\n        if (-faultTolerent > dx || faultTolerent < dx ) {\n            return false\n        }\n\n        if (-faultTolerent > dy || faultTolerent < dy) {\n            return false\n        }\n\n        return true\n    },\n\n    isTwoValueSimilarEqual(v1, v2) {\n        var d = v2 - v1\n        var faultTolerent = 0.01\n        if (-faultTolerent > d || faultTolerent < d) {\n            return false\n        }\n\n        return true\n    },\n\n    similarMinus(a,b) {\n        var temp = a - b\n        if (-0.001 < temp && temp < 0.001) {\n            temp = 0\n        }\n        return temp\n    },\n    \n});\n\nmodule.exports = Helper\n"]}