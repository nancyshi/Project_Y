{"version":3,"sources":["../../../../assets/scripts/assets/scripts/helper.js"],"names":["Helper","cc","Class","properties","segmentsIntr","a","b","c","d","area_abc","x","y","area_abd","area_cda","area_cdb","t","dx","dy","rotateSegment","origin","degree","rotatedA","rotateOnePoint","rotatedB","p1","p2","angle","Math","PI","pb","v2","rotatedPb","rotate","rayTest","line1","line2","result","dis","mag","getSuitablePoint","currentDis","targetDis","direction","normalizeSelf","currentDisX","currentDisY","ratio","resultX","resultY","makeRay","ray","getLinesOfOneNode","givenNode","offset","height","width","p3","p4","p5","p6","p7","p8","line3","line4","undefined","obj","lowerLine","upperLine","leftLine","rightLine","error","isTwoNodeCross","node1","node2","info1","getInfoOfOneNode","info2","minY","maxY","minX","maxX","leftUpPoint","rightUpPoint","leftDownPoint","rightDownPoint","arry","index","point","getDisToSelfBorder","borderLines","key","line","getPointsOfOneNode","isOneNodeWillCollidWithOneLineInDirection","givenLine","givenDirection","nodePoints","rays","onePoint","push","oneRay","minerX","maxerX","minerY","maxerY","lineMinx","lineMaxX","lineMinY","lineMaxY","lineDirection","lenthenLineP2","lenthenLineP1","lenthenLine","testRay","module","exports"],"mappings":"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","file":"helper.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nvar Helper = cc.Class({\n    properties: {},\n\n    segmentsIntr(a, b, c, d){ \n  \n        // 三角形abc 面积的2倍 \n        var area_abc = (a.x - c.x) * (b.y - c.y) - (a.y - c.y) * (b.x - c.x); \n         \n        // 三角形abd 面积的2倍 \n        var area_abd = (a.x - d.x) * (b.y - d.y) - (a.y - d.y) * (b.x - d.x); \n         \n        // 面积符号相同则两点在线段同侧,不相交 (对点在线段上的情况,本例当作不相交处理); \n        if ( area_abc*area_abd>=0 ) { \n        return false; \n        } \n         \n        // 三角形cda 面积的2倍 \n        var area_cda = (c.x - a.x) * (d.y - a.y) - (c.y - a.y) * (d.x - a.x); \n        // 三角形cdb 面积的2倍 \n        // 注意: 这里有一个小优化.不需要再用公式计算面积,而是通过已知的三个面积加减得出. \n        var area_cdb = area_cda + area_abc - area_abd ; \n        if ( area_cda * area_cdb >= 0 ) { \n        return false; \n        } \n         \n        //计算交点坐标 \n        var t = area_cda / ( area_abd- area_abc ); \n        var dx= t*(b.x - a.x), \n        dy= t*(b.y - a.y); \n        return { x: a.x + dx , y: a.y + dy }; \n         \n    },\n\n    rotateSegment(a,b,origin,degree) {\n        var rotatedA = this.rotateOnePoint(a,origin,degree)\n        var rotatedB = this.rotateOnePoint(b,origin,degree)\n\n        return {\n            p1: rotatedA,\n            p2: rotatedB\n        }\n    },\n\n    rotateOnePoint(b,origin,degree) {\n        var angle = degree * Math.PI / 180\n        var pb = cc.v2(b.x - origin.x, b.y - origin.y)\n        var rotatedPb = pb.rotate(angle)\n        var rotatedB = cc.v2(rotatedPb.x + origin.x, rotatedPb.y + origin.y)\n        return rotatedB\n    },\n\n    rayTest(line1,line2) {\n        var result = this.segmentsIntr(line1.p1, line1.p2, line2.p1, line2.p2)\n        if (result == false) {\n            return false\n        }\n\n        var dis = cc.v2(result.x - line1.p1.x, result.y - line1.p1.y).mag()\n        return dis\n    },\n    \n    getSuitablePoint(p1,currentDis,targetDis,direction) {\n        if (targetDis >= currentDis) {\n            return p1\n        }\n        direction.normalizeSelf()\n        var currentDisX = currentDis * direction.x\n        var currentDisY = currentDis * direction.y\n\n        var ratio = (currentDis - targetDis) / currentDis\n        var resultX = p1.x + ratio * currentDisX\n        var resultY = p1.y + ratio * currentDisY\n\n        return cc.v2(resultX, resultY)\n    },\n\n    makeRay(p1,dis,direction) {\n        var ray = {\n            p1: p1,\n            p2: null\n        }\n        if (direction.mag() != 1) {\n            direction.normalizeSelf()\n        }\n        var dx = direction.x * dis\n        var dy = direction.y * dis\n        var x = p1.x + dx\n        var y = p1.y + dy\n        ray.p2 = cc.v2(x,y)\n        return ray\n    },\n\n    getLinesOfOneNode(givenNode) {\n\n        var offset = givenNode.height / 2\n        var p1 = cc.v2(givenNode.x - givenNode.width/2, givenNode.y - offset)\n        var p2 = cc.v2(givenNode.x + givenNode.width/2, givenNode.y - offset)\n        var p3 = cc.v2(p1.x, p1.y + givenNode.height)\n        var p4 = cc.v2(p2.x, p2.y + givenNode.height)\n        var p5 = cc.v2(givenNode.x - givenNode.width / 2, givenNode.y + givenNode.height / 2)\n        var p6 = cc.v2(p5.x, p5.y - givenNode.height)\n        var p7 = cc.v2(givenNode.x + givenNode.width / 2, givenNode.y + givenNode.height / 2)\n        var p8 = cc.v2(p7.x, p7.y - givenNode.height)\n\n        var line1 = {p1:p1,p2:p2}\n        var line2 = {p1:p3,p2:p4}\n        var line3 = {p1:p5,p2:p6}\n        var line4 = {p1:p7,p2:p8}\n        if (givenNode.angle != null && givenNode.angle != undefined) {\n            line1 = this.rotateSegment(p1,p2,cc.v2(givenNode.x, givenNode.y),-givenNode.angle)\n            line2 = this.rotateSegment(p3,p4,cc.v2(givenNode.x, givenNode.y),-givenNode.angle)\n            line3 = this.rotateSegment(p5,p6,cc.v2(givenNode.x, givenNode.y),-givenNode.angle)\n            line4 = this.rotateSegment(p7,p8,cc.v2(givenNode.x, givenNode.y),-givenNode.angle) \n        }\n        // var line1 = this.rotateSegment(p1,p2,cc.v2(givenNode.x, givenNode.y),-givenNode.angle)\n        // var line2 = this.rotateSegment(p3,p4,cc.v2(givenNode.x, givenNode.y),-givenNode.angle)\n        // var line3 = this.rotateSegment(p5,p6,cc.v2(givenNode.x, givenNode.y),-givenNode.angle)\n        // var line4 = this.rotateSegment(p7,p8,cc.v2(givenNode.x, givenNode.y),-givenNode.angle) \n        var obj = {\n            lowerLine: line1, //lower line\n            upperLine: line2, //upper line\n            leftLine: line3, //left line\n            rightLine: line4  //right line\n        }\n        if (line1 == null || line2 == null || line3 == null || line4 == null) {\n            cc.error(\"NOT INVALID LINES\")\n        }\n        return obj\n    },\n\n    isTwoNodeCross(node1, node2) {\n        \n        var info1 = this.getInfoOfOneNode(node1)\n        var info2 = this.getInfoOfOneNode(node2)\n        if (info1.minY > info2.maxY || info2.minY > info1.maxY || info1.minX > info2.maxX || info2.minX > info1.maxX) {\n            return false\n        }\n        return true\n    },\n    getInfoOfOneNode(givenNode) {\n        var leftUpPoint = cc.v2(givenNode.x - givenNode.width / 2, givenNode.y + givenNode.height / 2)\n        var rightUpPoint = cc.v2(givenNode.x + givenNode.width / 2, leftUpPoint.y)\n        var leftDownPoint = cc.v2(leftUpPoint.x, givenNode.y - givenNode.height / 2)\n        var rightDownPoint = cc.v2(rightUpPoint.x, leftDownPoint.y)\n\n        if (givenNode.angle != null && givenNode.angle != undefined) {\n            leftUpPoint = this.rotateOnePoint(leftUpPoint,cc.v2(givenNode.x,givenNode.y),-givenNode.angle)\n            rightUpPoint = this.rotateOnePoint(rightUpPoint,cc.v2(givenNode.x,givenNode.y),-givenNode.angle)\n            leftDownPoint = this.rotateOnePoint(leftDownPoint,cc.v2(givenNode.x,givenNode.y),-givenNode.angle)\n            rightDownPoint = this.rotateOnePoint(rightDownPoint,cc.v2(givenNode.x,givenNode.y),-givenNode.angle)\n        }\n\n        var minX = leftUpPoint.x\n        var maxX = rightDownPoint.x\n        var minY = leftDownPoint.y\n        var maxY = rightUpPoint.y\n        var arry = [leftUpPoint,leftDownPoint,rightUpPoint,rightDownPoint]\n        for (var index in arry) {\n            var point = arry[index]\n            if (minX > point.x) {\n                minX = point.x\n            }\n            if (maxX < point.x) {\n                maxX = point.x\n            }\n            if (minY > point.y) {\n                minY = point.y\n            }\n            if (maxY < point.y) {\n                maxY = point.y\n            }\n        }\n\n        return {\n            minX: minX,\n            minY: minY,\n            maxX: maxX,\n            maxY: maxY\n        }\n    },\n\n    getDisToSelfBorder(givenNode,direction) {\n        var ray = this.makeRay(cc.v2(givenNode.x,givenNode.y),1000,direction)\n        var borderLines = this.getLinesOfOneNode(givenNode)\n\n        for (var key in borderLines) {\n            var line = borderLines[key]\n            var dis = this.rayTest(ray,line)\n\n            if (dis != false) {\n                return dis\n            }\n        }\n    },\n\n    getPointsOfOneNode(givenNode){\n        var leftUpPoint = cc.v2(givenNode.x - givenNode.width / 2, givenNode.y + givenNode.height / 2)\n        var rightUpPoint = cc.v2(givenNode.x + givenNode.width / 2, leftUpPoint.y)\n        var leftDownPoint = cc.v2(leftUpPoint.x, givenNode.y - givenNode.height / 2)\n        var rightDownPoint = cc.v2(rightUpPoint.x, leftDownPoint.y)\n\n        if (givenNode.angle != null && givenNode.angle != undefined) {\n            leftUpPoint = this.rotateOnePoint(leftUpPoint,cc.v2(givenNode.x,givenNode.y),-givenNode.angle)\n            rightUpPoint = this.rotateOnePoint(rightUpPoint,cc.v2(givenNode.x,givenNode.y),-givenNode.angle)\n            leftDownPoint = this.rotateOnePoint(leftDownPoint,cc.v2(givenNode.x,givenNode.y),-givenNode.angle)\n            rightDownPoint = this.rotateOnePoint(rightDownPoint,cc.v2(givenNode.x,givenNode.y),-givenNode.angle)\n        }\n        return {\n            leftUpPoint: leftUpPoint,\n            leftDownPoint: leftDownPoint,\n            rightUpPoint: rightUpPoint,\n            rightDownPoint: rightDownPoint\n        }\n    },\n\n    isOneNodeWillCollidWithOneLineInDirection(givenNode,givenLine,givenDirection) {\n        var nodePoints = this.getPointsOfOneNode(givenNode)\n        var rays = []\n        for (var key in nodePoints) {\n            var onePoint = nodePoints[key]\n            var ray = this.makeRay(onePoint,3000,givenDirection)\n            rays.push(ray)\n        }\n\n        var minX = null\n        var minY = null\n        var maxX = null\n        var maxY = null\n\n        for (var index in rays) {\n            \n            var oneRay = rays[index]\n            var minerX = oneRay.p1.x\n            var maxerX = oneRay.p2.x\n            if (minerX > oneRay.p2.x) {\n                minerX = oneRay.p2.x\n                maxerX = oneRay.p1.x\n            }\n\n            var minerY = oneRay.p1.y\n            var maxerY = oneRay.p2.y\n            if (minerY > oneRay.p2.y) {\n                minerY = oneRay.p2.y\n                maxerY = oneRay.p1.y\n            }\n\n            if (minX == null) {\n                minX = minerX\n                maxX = maxerX\n            }\n            else {\n                if (minX > minerX) {\n                    minX = minerX\n                }\n                if (maxX < maxerX) {\n                    maxX = maxerX\n                }\n            }\n\n            if (minY == null) {\n                minY = minerY\n                maxY = maxerY\n            }\n            else {\n                if (minY > minerY) {\n                    minY = minerY\n                }\n                if (maxY < maxerY) {\n                    maxY = maxerY\n                }\n            }  \n        }\n        \n        var lineMinx = givenLine.p1.x\n        var lineMaxX = givenLine.p2.x\n        var lineMinY = givenLine.p1.y\n        var lineMaxY = givenLine.p2.y\n\n        if (lineMinx > givenLine.p2.x) {\n            lineMinx = givenLine.p2.x\n            lineMaxX = givenLine.p1.x\n        }\n\n        if (lineMinY > givenLine.p2.y) {\n            lineMinY = givenLine.p2.y\n            lineMaxY = givenLine.p1.y\n        }\n\n        if (minY >= lineMaxY || maxY <= lineMinY || minX >= lineMaxX || maxX <= lineMinx) {\n            return false\n        }\n\n        var lineDirection = cc.v2(givenLine.p2.x - givenLine.p1.x, givenLine.p2.y - givenLine.p1.y)\n        lineDirection.normalizeSelf()\n\n        var lenthenLineP2 = this.makeRay(givenLine.p2,3000,lineDirection).p2\n        var lenthenLineP1 = this.makeRay(givenLine.p1,3000,cc.v2(-lineDirection.x, -lineDirection.y)).p2\n        var lenthenLine = {\n            p1: lenthenLineP1,\n            p2: lenthenLineP2\n        }\n\n        var testRay = this.makeRay(cc.v2(givenNode.x, givenNode.y),3000,givenDirection)\n        var dis = this.rayTest(testRay,lenthenLine)\n\n        if (dis != false) {\n            return dis\n        }\n        else {\n            return false\n        }\n\n    }\n    \n});\n\nmodule.exports = Helper\n"]}